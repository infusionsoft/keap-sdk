/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.812056
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// Class representing the display options for a reference custom field.
    /// </summary>
    [DataContract(Name = "PipelineCustomFieldRefDisplayOptions")]
    public partial class PipelineCustomFieldRefDisplayOptions : IValidatableObject
    {

        /// <summary>
        /// The display type for the reference custom field. This field is optional.
        /// </summary>
        /// <value>The display type for the reference custom field. This field is optional.</value>
        [DataMember(Name = "reference_display_type", EmitDefaultValue = true)]
        public PipelineCustomFieldRefDisplayType? ReferenceDisplayType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PipelineCustomFieldRefDisplayOptions" /> class.
        /// </summary>
        /// <param name="hidden">Indicates whether the reference custom field is hidden..</param>
        /// <param name="cardOptions">The card display options for the reference custom field. This field is optional..</param>
        /// <param name="titleProperty">The title property for the reference custom field..</param>
        /// <param name="descriptionProperty">The description property for the reference custom field..</param>
        /// <param name="referenceDisplayType">The display type for the reference custom field. This field is optional..</param>
        /// <param name="emptyState">The empty state content for the reference custom field. This field is optional..</param>
        /// <param name="componentName">The component name for the reference custom field..</param>
        public PipelineCustomFieldRefDisplayOptions(bool? hidden = default, PipelineCustomFieldCardDisplayOptions cardOptions = default, string titleProperty = default, string descriptionProperty = default, PipelineCustomFieldRefDisplayType? referenceDisplayType = default, PipelineCustomFieldEmptyStateContent emptyState = default, string componentName = default)
        {
            this.Hidden = hidden;
            this.CardOptions = cardOptions;
            this.TitleProperty = titleProperty;
            this.DescriptionProperty = descriptionProperty;
            this.ReferenceDisplayType = referenceDisplayType;
            this.EmptyState = emptyState;
            this.ComponentName = componentName;
        }

        /// <summary>
        /// Indicates whether the reference custom field is hidden.
        /// </summary>
        /// <value>Indicates whether the reference custom field is hidden.</value>
        [DataMember(Name = "hidden", EmitDefaultValue = true)]
        public bool? Hidden { get; set; }

        /// <summary>
        /// The card display options for the reference custom field. This field is optional.
        /// </summary>
        /// <value>The card display options for the reference custom field. This field is optional.</value>
        [DataMember(Name = "card_options", EmitDefaultValue = true)]
        public PipelineCustomFieldCardDisplayOptions CardOptions { get; set; }

        /// <summary>
        /// The title property for the reference custom field.
        /// </summary>
        /// <value>The title property for the reference custom field.</value>
        [DataMember(Name = "title_property", EmitDefaultValue = true)]
        public string TitleProperty { get; set; }

        /// <summary>
        /// The description property for the reference custom field.
        /// </summary>
        /// <value>The description property for the reference custom field.</value>
        [DataMember(Name = "description_property", EmitDefaultValue = true)]
        public string DescriptionProperty { get; set; }

        /// <summary>
        /// The empty state content for the reference custom field. This field is optional.
        /// </summary>
        /// <value>The empty state content for the reference custom field. This field is optional.</value>
        [DataMember(Name = "empty_state", EmitDefaultValue = true)]
        public PipelineCustomFieldEmptyStateContent EmptyState { get; set; }

        /// <summary>
        /// The component name for the reference custom field.
        /// </summary>
        /// <value>The component name for the reference custom field.</value>
        [DataMember(Name = "component_name", EmitDefaultValue = true)]
        public string ComponentName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PipelineCustomFieldRefDisplayOptions {\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  CardOptions: ").Append(CardOptions).Append("\n");
            sb.Append("  TitleProperty: ").Append(TitleProperty).Append("\n");
            sb.Append("  DescriptionProperty: ").Append(DescriptionProperty).Append("\n");
            sb.Append("  ReferenceDisplayType: ").Append(ReferenceDisplayType).Append("\n");
            sb.Append("  EmptyState: ").Append(EmptyState).Append("\n");
            sb.Append("  ComponentName: ").Append(ComponentName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
