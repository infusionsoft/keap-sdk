/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.865894-hf-202510091441
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// ProductInterest
    /// </summary>
    [DataContract(Name = "ProductInterest")]
    public partial class ProductInterest : IValidatableObject
    {
        /// <summary>
        /// The product interest type
        /// </summary>
        /// <value>The product interest type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum PRODUCT for value: PRODUCT
            /// </summary>
            [EnumMember(Value = "PRODUCT")]
            PRODUCT = 1,

            /// <summary>
            /// Enum SUBSCRIPTIONPLAN for value: SUBSCRIPTION_PLAN
            /// </summary>
            [EnumMember(Value = "SUBSCRIPTION_PLAN")]
            SUBSCRIPTIONPLAN = 2
        }

        /// <summary>
        /// The product interest type
        /// </summary>
        /// <value>The product interest type</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductInterest" /> class.
        /// </summary>
        /// <param name="discountPercent">The percent to discount the product. Percent represented in a whole number, for example 10 is 10%.</param>
        /// <param name="id">The product interest ID.</param>
        /// <param name="interestId">The interest ID.</param>
        /// <param name="price">price.</param>
        /// <param name="quantity">The quantity of product..</param>
        /// <param name="type">The product interest type.</param>
        public ProductInterest(int discountPercent = default, string id = default, string interestId = default, CurrencyValue price = default, int quantity = default, TypeEnum? type = default)
        {
            this.DiscountPercent = discountPercent;
            this.Id = id;
            this.InterestId = interestId;
            this.Price = price;
            this.Quantity = quantity;
            this.Type = type;
        }

        /// <summary>
        /// The percent to discount the product. Percent represented in a whole number, for example 10 is 10%
        /// </summary>
        /// <value>The percent to discount the product. Percent represented in a whole number, for example 10 is 10%</value>
        [DataMember(Name = "discount_percent", EmitDefaultValue = false)]
        public int DiscountPercent { get; set; }

        /// <summary>
        /// The product interest ID
        /// </summary>
        /// <value>The product interest ID</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The interest ID
        /// </summary>
        /// <value>The interest ID</value>
        [DataMember(Name = "interest_id", EmitDefaultValue = false)]
        public string InterestId { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public CurrencyValue Price { get; set; }

        /// <summary>
        /// The quantity of product.
        /// </summary>
        /// <value>The quantity of product.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductInterest {\n");
            sb.Append("  DiscountPercent: ").Append(DiscountPercent).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InterestId: ").Append(InterestId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
