/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.812056
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// Request model for moving specific deals.
    /// </summary>
    [DataContract(Name = "MoveDealsForContactsRequest")]
    public partial class MoveDealsForContactsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MoveDealsForContactsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MoveDealsForContactsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MoveDealsForContactsRequest" /> class.
        /// </summary>
        /// <param name="contactIds">List of IDs of the contacts whose active deals need to be moved. (required).</param>
        /// <param name="fromStage">The ID of the stage from which the deals should be moved. (required).</param>
        /// <param name="toStage">The ID of the stage to which the deals should be moved. (required).</param>
        public MoveDealsForContactsRequest(List<string> contactIds = default, string fromStage = default, string toStage = default)
        {
            // to ensure "contactIds" is required (not null)
            if (contactIds == null)
            {
                throw new ArgumentNullException("contactIds is a required property for MoveDealsForContactsRequest and cannot be null");
            }
            this.ContactIds = contactIds;
            // to ensure "fromStage" is required (not null)
            if (fromStage == null)
            {
                throw new ArgumentNullException("fromStage is a required property for MoveDealsForContactsRequest and cannot be null");
            }
            this.FromStage = fromStage;
            // to ensure "toStage" is required (not null)
            if (toStage == null)
            {
                throw new ArgumentNullException("toStage is a required property for MoveDealsForContactsRequest and cannot be null");
            }
            this.ToStage = toStage;
        }

        /// <summary>
        /// List of IDs of the contacts whose active deals need to be moved.
        /// </summary>
        /// <value>List of IDs of the contacts whose active deals need to be moved.</value>
        [DataMember(Name = "contact_ids", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ContactIds { get; set; }

        /// <summary>
        /// The ID of the stage from which the deals should be moved.
        /// </summary>
        /// <value>The ID of the stage from which the deals should be moved.</value>
        [DataMember(Name = "from_stage", IsRequired = true, EmitDefaultValue = true)]
        public string FromStage { get; set; }

        /// <summary>
        /// The ID of the stage to which the deals should be moved.
        /// </summary>
        /// <value>The ID of the stage to which the deals should be moved.</value>
        [DataMember(Name = "to_stage", IsRequired = true, EmitDefaultValue = true)]
        public string ToStage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MoveDealsForContactsRequest {\n");
            sb.Append("  ContactIds: ").Append(ContactIds).Append("\n");
            sb.Append("  FromStage: ").Append(FromStage).Append("\n");
            sb.Append("  ToStage: ").Append(ToStage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FromStage (string) minLength
            if (this.FromStage != null && this.FromStage.Length < 1)
            {
                yield return new ValidationResult("Invalid value for FromStage, length must be greater than 1.", new [] { "FromStage" });
            }

            // ToStage (string) minLength
            if (this.ToStage != null && this.ToStage.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ToStage, length must be greater than 1.", new [] { "ToStage" });
            }

            yield break;
        }    }

}
