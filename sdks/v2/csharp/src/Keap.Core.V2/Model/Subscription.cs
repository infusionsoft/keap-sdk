/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.866784-hf-202510132126
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// Subscription
    /// </summary>
    [DataContract(Name = "Subscription")]
    public partial class Subscription : IValidatableObject
    {
        /// <summary>
        /// The billing cycle of the subscription.
        /// </summary>
        /// <value>The billing cycle of the subscription.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BillingCycleEnum
        {
            /// <summary>
            /// Enum YEAR for value: YEAR
            /// </summary>
            [EnumMember(Value = "YEAR")]
            YEAR = 1,

            /// <summary>
            /// Enum MONTH for value: MONTH
            /// </summary>
            [EnumMember(Value = "MONTH")]
            MONTH = 2,

            /// <summary>
            /// Enum WEEK for value: WEEK
            /// </summary>
            [EnumMember(Value = "WEEK")]
            WEEK = 3,

            /// <summary>
            /// Enum DAY for value: DAY
            /// </summary>
            [EnumMember(Value = "DAY")]
            DAY = 4
        }

        /// <summary>
        /// The billing cycle of the subscription.
        /// </summary>
        /// <value>The billing cycle of the subscription.</value>
        [DataMember(Name = "billing_cycle", EmitDefaultValue = false)]
        public BillingCycleEnum? BillingCycle { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription" /> class.
        /// </summary>
        /// <param name="active">If the subscription is active or not..</param>
        /// <param name="allowTax">If the subscription allows tax..</param>
        /// <param name="autoCharge">If the subscription should auto charge on the next billing date..</param>
        /// <param name="billingAmount">The billing amount..</param>
        /// <param name="billingCycle">The billing cycle of the subscription..</param>
        /// <param name="billingFrequency">The billing frequency in days..</param>
        /// <param name="contactId">Id of the contact to create the subscription for..</param>
        /// <param name="daysBetweenRetries">Number of days between charge attempts..</param>
        /// <param name="endDate">The last date the subscription will bill..</param>
        /// <param name="id">Id of the subscription..</param>
        /// <param name="lastBillDate">The last date the subscription was billed..</param>
        /// <param name="leadAffiliateId">The affiliate id for the lead of the subscription..</param>
        /// <param name="maxChargeAttempts">Maximum number of charge attempts..</param>
        /// <param name="merchantAccountId">The merchant account id associated with the subscription..</param>
        /// <param name="nextBillDate">The next date the subscription will bill..</param>
        /// <param name="paymentMethodId">Id associated with the payment method..</param>
        /// <param name="productId">Id of the product associated with the subscription..</param>
        /// <param name="quantity">The subscription quantity..</param>
        /// <param name="saleAffiliateId">The affiliate id for the sale of the subscription..</param>
        /// <param name="shippingAddress">shippingAddress.</param>
        /// <param name="startDate">The first day the subscription will bill..</param>
        /// <param name="subscriptionPlanId">Id of the product subscription plan..</param>
        public Subscription(bool active = default, bool allowTax = default, bool autoCharge = default, double billingAmount = default, BillingCycleEnum? billingCycle = default, int billingFrequency = default, string contactId = default, int daysBetweenRetries = default, string endDate = default, string id = default, string lastBillDate = default, string leadAffiliateId = default, int maxChargeAttempts = default, string merchantAccountId = default, string nextBillDate = default, string paymentMethodId = default, string productId = default, long quantity = default, string saleAffiliateId = default, Address shippingAddress = default, string startDate = default, string subscriptionPlanId = default)
        {
            this.Active = active;
            this.AllowTax = allowTax;
            this.AutoCharge = autoCharge;
            this.BillingAmount = billingAmount;
            this.BillingCycle = billingCycle;
            this.BillingFrequency = billingFrequency;
            this.ContactId = contactId;
            this.DaysBetweenRetries = daysBetweenRetries;
            this.EndDate = endDate;
            this.Id = id;
            this.LastBillDate = lastBillDate;
            this.LeadAffiliateId = leadAffiliateId;
            this.MaxChargeAttempts = maxChargeAttempts;
            this.MerchantAccountId = merchantAccountId;
            this.NextBillDate = nextBillDate;
            this.PaymentMethodId = paymentMethodId;
            this.ProductId = productId;
            this.Quantity = quantity;
            this.SaleAffiliateId = saleAffiliateId;
            this.ShippingAddress = shippingAddress;
            this.StartDate = startDate;
            this.SubscriptionPlanId = subscriptionPlanId;
        }

        /// <summary>
        /// If the subscription is active or not.
        /// </summary>
        /// <value>If the subscription is active or not.</value>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// If the subscription allows tax.
        /// </summary>
        /// <value>If the subscription allows tax.</value>
        [DataMember(Name = "allow_tax", EmitDefaultValue = true)]
        public bool AllowTax { get; set; }

        /// <summary>
        /// If the subscription should auto charge on the next billing date.
        /// </summary>
        /// <value>If the subscription should auto charge on the next billing date.</value>
        [DataMember(Name = "auto_charge", EmitDefaultValue = true)]
        public bool AutoCharge { get; set; }

        /// <summary>
        /// The billing amount.
        /// </summary>
        /// <value>The billing amount.</value>
        [DataMember(Name = "billing_amount", EmitDefaultValue = false)]
        public double BillingAmount { get; set; }

        /// <summary>
        /// The billing frequency in days.
        /// </summary>
        /// <value>The billing frequency in days.</value>
        [DataMember(Name = "billing_frequency", EmitDefaultValue = false)]
        public int BillingFrequency { get; set; }

        /// <summary>
        /// Id of the contact to create the subscription for.
        /// </summary>
        /// <value>Id of the contact to create the subscription for.</value>
        [DataMember(Name = "contact_id", EmitDefaultValue = false)]
        public string ContactId { get; set; }

        /// <summary>
        /// Number of days between charge attempts.
        /// </summary>
        /// <value>Number of days between charge attempts.</value>
        [DataMember(Name = "days_between_retries", EmitDefaultValue = false)]
        public int DaysBetweenRetries { get; set; }

        /// <summary>
        /// The last date the subscription will bill.
        /// </summary>
        /// <value>The last date the subscription will bill.</value>
        [DataMember(Name = "end_date", EmitDefaultValue = false)]
        public string EndDate { get; set; }

        /// <summary>
        /// Id of the subscription.
        /// </summary>
        /// <value>Id of the subscription.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The last date the subscription was billed.
        /// </summary>
        /// <value>The last date the subscription was billed.</value>
        [DataMember(Name = "last_bill_date", EmitDefaultValue = false)]
        public string LastBillDate { get; set; }

        /// <summary>
        /// The affiliate id for the lead of the subscription.
        /// </summary>
        /// <value>The affiliate id for the lead of the subscription.</value>
        [DataMember(Name = "lead_affiliate_id", EmitDefaultValue = false)]
        public string LeadAffiliateId { get; set; }

        /// <summary>
        /// Maximum number of charge attempts.
        /// </summary>
        /// <value>Maximum number of charge attempts.</value>
        [DataMember(Name = "max_charge_attempts", EmitDefaultValue = false)]
        public int MaxChargeAttempts { get; set; }

        /// <summary>
        /// The merchant account id associated with the subscription.
        /// </summary>
        /// <value>The merchant account id associated with the subscription.</value>
        [DataMember(Name = "merchant_account_id", EmitDefaultValue = false)]
        public string MerchantAccountId { get; set; }

        /// <summary>
        /// The next date the subscription will bill.
        /// </summary>
        /// <value>The next date the subscription will bill.</value>
        [DataMember(Name = "next_bill_date", EmitDefaultValue = false)]
        public string NextBillDate { get; set; }

        /// <summary>
        /// Id associated with the payment method.
        /// </summary>
        /// <value>Id associated with the payment method.</value>
        [DataMember(Name = "payment_method_id", EmitDefaultValue = false)]
        public string PaymentMethodId { get; set; }

        /// <summary>
        /// Id of the product associated with the subscription.
        /// </summary>
        /// <value>Id of the product associated with the subscription.</value>
        [DataMember(Name = "product_id", EmitDefaultValue = false)]
        public string ProductId { get; set; }

        /// <summary>
        /// The subscription quantity.
        /// </summary>
        /// <value>The subscription quantity.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public long Quantity { get; set; }

        /// <summary>
        /// The affiliate id for the sale of the subscription.
        /// </summary>
        /// <value>The affiliate id for the sale of the subscription.</value>
        [DataMember(Name = "sale_affiliate_id", EmitDefaultValue = false)]
        public string SaleAffiliateId { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name = "shipping_address", EmitDefaultValue = false)]
        public Address ShippingAddress { get; set; }

        /// <summary>
        /// The first day the subscription will bill.
        /// </summary>
        /// <value>The first day the subscription will bill.</value>
        [DataMember(Name = "start_date", EmitDefaultValue = false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Id of the product subscription plan.
        /// </summary>
        /// <value>Id of the product subscription plan.</value>
        [DataMember(Name = "subscription_plan_id", EmitDefaultValue = false)]
        public string SubscriptionPlanId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Subscription {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  AllowTax: ").Append(AllowTax).Append("\n");
            sb.Append("  AutoCharge: ").Append(AutoCharge).Append("\n");
            sb.Append("  BillingAmount: ").Append(BillingAmount).Append("\n");
            sb.Append("  BillingCycle: ").Append(BillingCycle).Append("\n");
            sb.Append("  BillingFrequency: ").Append(BillingFrequency).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  DaysBetweenRetries: ").Append(DaysBetweenRetries).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastBillDate: ").Append(LastBillDate).Append("\n");
            sb.Append("  LeadAffiliateId: ").Append(LeadAffiliateId).Append("\n");
            sb.Append("  MaxChargeAttempts: ").Append(MaxChargeAttempts).Append("\n");
            sb.Append("  MerchantAccountId: ").Append(MerchantAccountId).Append("\n");
            sb.Append("  NextBillDate: ").Append(NextBillDate).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SaleAffiliateId: ").Append(SaleAffiliateId).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  SubscriptionPlanId: ").Append(SubscriptionPlanId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
