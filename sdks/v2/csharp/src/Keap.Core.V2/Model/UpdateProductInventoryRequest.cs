/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.865894-hf-202510091441
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// UpdateProductInventoryRequest
    /// </summary>
    [DataContract(Name = "UpdateProductInventoryRequest")]
    public partial class UpdateProductInventoryRequest : IValidatableObject
    {
        /// <summary>
        /// The direction to alter the quantity in
        /// </summary>
        /// <value>The direction to alter the quantity in</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum INCREASE for value: INCREASE
            /// </summary>
            [EnumMember(Value = "INCREASE")]
            INCREASE = 1,

            /// <summary>
            /// Enum DECREASE for value: DECREASE
            /// </summary>
            [EnumMember(Value = "DECREASE")]
            DECREASE = 2
        }

        /// <summary>
        /// The direction to alter the quantity in
        /// </summary>
        /// <value>The direction to alter the quantity in</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateProductInventoryRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateProductInventoryRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateProductInventoryRequest" /> class.
        /// </summary>
        /// <param name="quantity">The amount to increment or decrement by. Must be greater than or equal to 0. (required).</param>
        /// <param name="type">The direction to alter the quantity in (required).</param>
        public UpdateProductInventoryRequest(int quantity = default, TypeEnum type = default)
        {
            this.Quantity = quantity;
            this.Type = type;
        }

        /// <summary>
        /// The amount to increment or decrement by. Must be greater than or equal to 0.
        /// </summary>
        /// <value>The amount to increment or decrement by. Must be greater than or equal to 0.</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public int Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateProductInventoryRequest {\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
