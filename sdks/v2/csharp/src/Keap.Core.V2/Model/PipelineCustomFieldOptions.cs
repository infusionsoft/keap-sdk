/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.809589
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// Class representing the options for a custom field.
    /// </summary>
    [DataContract(Name = "PipelineCustomFieldOptions")]
    public partial class PipelineCustomFieldOptions : IValidatableObject
    {

        /// <summary>
        /// The display type of the custom field options. This field is required.
        /// </summary>
        /// <value>The display type of the custom field options. This field is required.</value>
        [DataMember(Name = "display_type", IsRequired = true, EmitDefaultValue = true)]
        public PipelineCustomFieldOptionDisplayType DisplayType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PipelineCustomFieldOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PipelineCustomFieldOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PipelineCustomFieldOptions" /> class.
        /// </summary>
        /// <param name="defaultOptionId">The default option ID for the custom field..</param>
        /// <param name="displayType">The display type of the custom field options. This field is required. (required).</param>
        /// <param name="optionSource">The source of the custom field options. This field is optional..</param>
        /// <param name="groups">The list of custom field option groups. (required).</param>
        public PipelineCustomFieldOptions(string defaultOptionId = default, PipelineCustomFieldOptionDisplayType displayType = default, PipelineCustomFieldRefType optionSource = default, List<PipelineCustomFieldOptionGroup> groups = default)
        {
            this.DisplayType = displayType;
            // to ensure "groups" is required (not null)
            if (groups == null)
            {
                throw new ArgumentNullException("groups is a required property for PipelineCustomFieldOptions and cannot be null");
            }
            this.Groups = groups;
            this.DefaultOptionId = defaultOptionId;
            this.OptionSource = optionSource;
        }

        /// <summary>
        /// The default option ID for the custom field.
        /// </summary>
        /// <value>The default option ID for the custom field.</value>
        [DataMember(Name = "default_option_id", EmitDefaultValue = true)]
        public string DefaultOptionId { get; set; }

        /// <summary>
        /// The source of the custom field options. This field is optional.
        /// </summary>
        /// <value>The source of the custom field options. This field is optional.</value>
        [DataMember(Name = "option_source", EmitDefaultValue = true)]
        public PipelineCustomFieldRefType OptionSource { get; set; }

        /// <summary>
        /// The list of custom field option groups.
        /// </summary>
        /// <value>The list of custom field option groups.</value>
        [DataMember(Name = "groups", IsRequired = true, EmitDefaultValue = true)]
        public List<PipelineCustomFieldOptionGroup> Groups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PipelineCustomFieldOptions {\n");
            sb.Append("  DefaultOptionId: ").Append(DefaultOptionId).Append("\n");
            sb.Append("  DisplayType: ").Append(DisplayType).Append("\n");
            sb.Append("  OptionSource: ").Append(OptionSource).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
