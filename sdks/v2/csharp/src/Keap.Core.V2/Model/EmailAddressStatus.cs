/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.798982-hf-202504081948
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// EmailAddressStatus
    /// </summary>
    [DataContract(Name = "EmailAddressStatus")]
    public partial class EmailAddressStatus : IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum UNENGAGEDMARKETABLE for value: UNENGAGED_MARKETABLE
            /// </summary>
            [EnumMember(Value = "UNENGAGED_MARKETABLE")]
            UNENGAGEDMARKETABLE = 1,

            /// <summary>
            /// Enum SINGLEOPTIN for value: SINGLE_OPT_IN
            /// </summary>
            [EnumMember(Value = "SINGLE_OPT_IN")]
            SINGLEOPTIN = 2,

            /// <summary>
            /// Enum DOUBLEOPTIN for value: DOUBLE_OPT_IN
            /// </summary>
            [EnumMember(Value = "DOUBLE_OPT_IN")]
            DOUBLEOPTIN = 3,

            /// <summary>
            /// Enum CONFIRMED for value: CONFIRMED
            /// </summary>
            [EnumMember(Value = "CONFIRMED")]
            CONFIRMED = 4,

            /// <summary>
            /// Enum UNENGAGEDNONMARKETABLE for value: UNENGAGED_NON_MARKETABLE
            /// </summary>
            [EnumMember(Value = "UNENGAGED_NON_MARKETABLE")]
            UNENGAGEDNONMARKETABLE = 5,

            /// <summary>
            /// Enum NONMARKETABLE for value: NON_MARKETABLE
            /// </summary>
            [EnumMember(Value = "NON_MARKETABLE")]
            NONMARKETABLE = 6,

            /// <summary>
            /// Enum LOCKDOWN for value: LOCKDOWN
            /// </summary>
            [EnumMember(Value = "LOCKDOWN")]
            LOCKDOWN = 7,

            /// <summary>
            /// Enum BOUNCE for value: BOUNCE
            /// </summary>
            [EnumMember(Value = "BOUNCE")]
            BOUNCE = 8,

            /// <summary>
            /// Enum HARDBOUNCE for value: HARD_BOUNCE
            /// </summary>
            [EnumMember(Value = "HARD_BOUNCE")]
            HARDBOUNCE = 9,

            /// <summary>
            /// Enum MANUAL for value: MANUAL
            /// </summary>
            [EnumMember(Value = "MANUAL")]
            MANUAL = 10,

            /// <summary>
            /// Enum ADMIN for value: ADMIN
            /// </summary>
            [EnumMember(Value = "ADMIN")]
            ADMIN = 11,

            /// <summary>
            /// Enum SYSTEM for value: SYSTEM
            /// </summary>
            [EnumMember(Value = "SYSTEM")]
            SYSTEM = 12,

            /// <summary>
            /// Enum LISTUNSUBSCRIBE for value: LIST_UNSUBSCRIBE
            /// </summary>
            [EnumMember(Value = "LIST_UNSUBSCRIBE")]
            LISTUNSUBSCRIBE = 13,

            /// <summary>
            /// Enum FEEDBACK for value: FEEDBACK
            /// </summary>
            [EnumMember(Value = "FEEDBACK")]
            FEEDBACK = 14,

            /// <summary>
            /// Enum SPAM for value: SPAM
            /// </summary>
            [EnumMember(Value = "SPAM")]
            SPAM = 15,

            /// <summary>
            /// Enum INVALID for value: INVALID
            /// </summary>
            [EnumMember(Value = "INVALID")]
            INVALID = 16,

            /// <summary>
            /// Enum DEACTIVATED for value: DEACTIVATED
            /// </summary>
            [EnumMember(Value = "DEACTIVATED")]
            DEACTIVATED = 17
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailAddressStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailAddressStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailAddressStatus" /> class.
        /// </summary>
        /// <param name="email">email (required).</param>
        /// <param name="optedIn">optedIn (required).</param>
        /// <param name="status">status (required).</param>
        public EmailAddressStatus(string email = default(string), bool optedIn = default(bool), StatusEnum status = default(StatusEnum))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for EmailAddressStatus and cannot be null");
            }
            this.Email = email;
            this.OptedIn = optedIn;
            this.Status = status;
        }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets OptedIn
        /// </summary>
        [DataMember(Name = "opted_in", IsRequired = true, EmitDefaultValue = true)]
        public bool OptedIn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailAddressStatus {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  OptedIn: ").Append(OptedIn).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
