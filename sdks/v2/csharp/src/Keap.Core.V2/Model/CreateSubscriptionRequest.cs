/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.834462-hf-202507221415
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// CreateSubscriptionRequest
    /// </summary>
    [DataContract(Name = "CreateSubscriptionRequest")]
    public partial class CreateSubscriptionRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubscriptionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateSubscriptionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubscriptionRequest" /> class.
        /// </summary>
        /// <param name="allowDuplicate">If true, it will disable the check to see if there is already an identical subscription for the contact. Default is false..</param>
        /// <param name="allowTax">Only works if the product associated with the product subscription is taxable. Default is false..</param>
        /// <param name="autoCharge">If the subscription should auto charge on the next billing date. Default is true..</param>
        /// <param name="billingAmount">The billing amount. Must be 0 or greater. Default is the price in the product subscription plan..</param>
        /// <param name="contactId">Id of the contact to create the subscription for. (required).</param>
        /// <param name="paymentMethodId">Id associated with the payment method. Default is the contact&#39;s most recently used card, if auto charge is true. Default is 0 otherwise..</param>
        /// <param name="quantity">The subscription quantity. Must be 1 or greater. Default is 1..</param>
        /// <param name="saleAffiliateId">The affiliate id for the sale of the subscription. Default is 0..</param>
        /// <param name="startDate">The first day the subscription will bill. Must not be in the past. Default is today..</param>
        /// <param name="subscriptionPlanId">Id of the product subscription plan. (required).</param>
        public CreateSubscriptionRequest(bool allowDuplicate = default, bool allowTax = default, bool autoCharge = default, double billingAmount = default, string contactId = default, string paymentMethodId = default, int quantity = default, string saleAffiliateId = default, string startDate = default, string subscriptionPlanId = default)
        {
            // to ensure "contactId" is required (not null)
            if (contactId == null)
            {
                throw new ArgumentNullException("contactId is a required property for CreateSubscriptionRequest and cannot be null");
            }
            this.ContactId = contactId;
            // to ensure "subscriptionPlanId" is required (not null)
            if (subscriptionPlanId == null)
            {
                throw new ArgumentNullException("subscriptionPlanId is a required property for CreateSubscriptionRequest and cannot be null");
            }
            this.SubscriptionPlanId = subscriptionPlanId;
            this.AllowDuplicate = allowDuplicate;
            this.AllowTax = allowTax;
            this.AutoCharge = autoCharge;
            this.BillingAmount = billingAmount;
            this.PaymentMethodId = paymentMethodId;
            this.Quantity = quantity;
            this.SaleAffiliateId = saleAffiliateId;
            this.StartDate = startDate;
        }

        /// <summary>
        /// If true, it will disable the check to see if there is already an identical subscription for the contact. Default is false.
        /// </summary>
        /// <value>If true, it will disable the check to see if there is already an identical subscription for the contact. Default is false.</value>
        [DataMember(Name = "allow_duplicate", EmitDefaultValue = true)]
        public bool AllowDuplicate { get; set; }

        /// <summary>
        /// Only works if the product associated with the product subscription is taxable. Default is false.
        /// </summary>
        /// <value>Only works if the product associated with the product subscription is taxable. Default is false.</value>
        [DataMember(Name = "allow_tax", EmitDefaultValue = true)]
        public bool AllowTax { get; set; }

        /// <summary>
        /// If the subscription should auto charge on the next billing date. Default is true.
        /// </summary>
        /// <value>If the subscription should auto charge on the next billing date. Default is true.</value>
        [DataMember(Name = "auto_charge", EmitDefaultValue = true)]
        public bool AutoCharge { get; set; }

        /// <summary>
        /// The billing amount. Must be 0 or greater. Default is the price in the product subscription plan.
        /// </summary>
        /// <value>The billing amount. Must be 0 or greater. Default is the price in the product subscription plan.</value>
        [DataMember(Name = "billing_amount", EmitDefaultValue = false)]
        public double BillingAmount { get; set; }

        /// <summary>
        /// Id of the contact to create the subscription for.
        /// </summary>
        /// <value>Id of the contact to create the subscription for.</value>
        [DataMember(Name = "contact_id", IsRequired = true, EmitDefaultValue = true)]
        public string ContactId { get; set; }

        /// <summary>
        /// Id associated with the payment method. Default is the contact&#39;s most recently used card, if auto charge is true. Default is 0 otherwise.
        /// </summary>
        /// <value>Id associated with the payment method. Default is the contact&#39;s most recently used card, if auto charge is true. Default is 0 otherwise.</value>
        [DataMember(Name = "payment_method_id", EmitDefaultValue = false)]
        public string PaymentMethodId { get; set; }

        /// <summary>
        /// The subscription quantity. Must be 1 or greater. Default is 1.
        /// </summary>
        /// <value>The subscription quantity. Must be 1 or greater. Default is 1.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int Quantity { get; set; }

        /// <summary>
        /// The affiliate id for the sale of the subscription. Default is 0.
        /// </summary>
        /// <value>The affiliate id for the sale of the subscription. Default is 0.</value>
        [DataMember(Name = "sale_affiliate_id", EmitDefaultValue = false)]
        public string SaleAffiliateId { get; set; }

        /// <summary>
        /// The first day the subscription will bill. Must not be in the past. Default is today.
        /// </summary>
        /// <value>The first day the subscription will bill. Must not be in the past. Default is today.</value>
        [DataMember(Name = "start_date", EmitDefaultValue = false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Id of the product subscription plan.
        /// </summary>
        /// <value>Id of the product subscription plan.</value>
        [DataMember(Name = "subscription_plan_id", IsRequired = true, EmitDefaultValue = true)]
        public string SubscriptionPlanId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateSubscriptionRequest {\n");
            sb.Append("  AllowDuplicate: ").Append(AllowDuplicate).Append("\n");
            sb.Append("  AllowTax: ").Append(AllowTax).Append("\n");
            sb.Append("  AutoCharge: ").Append(AutoCharge).Append("\n");
            sb.Append("  BillingAmount: ").Append(BillingAmount).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SaleAffiliateId: ").Append(SaleAffiliateId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  SubscriptionPlanId: ").Append(SubscriptionPlanId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
