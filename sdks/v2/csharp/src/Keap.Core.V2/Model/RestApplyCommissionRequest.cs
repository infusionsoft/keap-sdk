/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.834462-hf-202507221415
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// RestApplyCommissionRequest
    /// </summary>
    [DataContract(Name = "RestApplyCommissionRequest")]
    public partial class RestApplyCommissionRequest : IValidatableObject
    {
        /// <summary>
        /// The payout type
        /// </summary>
        /// <value>The payout type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PayoutTypeEnum
        {
            /// <summary>
            /// Enum UPFRONT for value: UPFRONT
            /// </summary>
            [EnumMember(Value = "UPFRONT")]
            UPFRONT = 1,

            /// <summary>
            /// Enum PAYMENTRECEIVED for value: PAYMENT_RECEIVED
            /// </summary>
            [EnumMember(Value = "PAYMENT_RECEIVED")]
            PAYMENTRECEIVED = 2
        }

        /// <summary>
        /// The payout type
        /// </summary>
        /// <value>The payout type</value>
        [DataMember(Name = "payout_type", IsRequired = true, EmitDefaultValue = true)]
        public PayoutTypeEnum PayoutType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RestApplyCommissionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RestApplyCommissionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RestApplyCommissionRequest" /> class.
        /// </summary>
        /// <param name="affiliateId">The affiliate id (required).</param>
        /// <param name="commissionAmount">commissionAmount.</param>
        /// <param name="commissionDate">commissionDate.</param>
        /// <param name="description">description.</param>
        /// <param name="payPercent">payPercent.</param>
        /// <param name="payoutType">The payout type (required).</param>
        public RestApplyCommissionRequest(string affiliateId = default, double commissionAmount = default, string commissionDate = default, string description = default, double payPercent = default, PayoutTypeEnum payoutType = default)
        {
            // to ensure "affiliateId" is required (not null)
            if (affiliateId == null)
            {
                throw new ArgumentNullException("affiliateId is a required property for RestApplyCommissionRequest and cannot be null");
            }
            this.AffiliateId = affiliateId;
            this.PayoutType = payoutType;
            this.CommissionAmount = commissionAmount;
            this.CommissionDate = commissionDate;
            this.Description = description;
            this.PayPercent = payPercent;
        }

        /// <summary>
        /// The affiliate id
        /// </summary>
        /// <value>The affiliate id</value>
        [DataMember(Name = "affiliate_id", IsRequired = true, EmitDefaultValue = true)]
        public string AffiliateId { get; set; }

        /// <summary>
        /// Gets or Sets CommissionAmount
        /// </summary>
        [DataMember(Name = "commission_amount", EmitDefaultValue = false)]
        public double CommissionAmount { get; set; }

        /// <summary>
        /// Gets or Sets CommissionDate
        /// </summary>
        [DataMember(Name = "commission_date", EmitDefaultValue = false)]
        public string CommissionDate { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets PayPercent
        /// </summary>
        [DataMember(Name = "pay_percent", EmitDefaultValue = false)]
        public double PayPercent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RestApplyCommissionRequest {\n");
            sb.Append("  AffiliateId: ").Append(AffiliateId).Append("\n");
            sb.Append("  CommissionAmount: ").Append(CommissionAmount).Append("\n");
            sb.Append("  CommissionDate: ").Append(CommissionDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PayPercent: ").Append(PayPercent).Append("\n");
            sb.Append("  PayoutType: ").Append(PayoutType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
