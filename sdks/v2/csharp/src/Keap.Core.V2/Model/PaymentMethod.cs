/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.866784-hf-202510132126
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// PaymentMethod
    /// </summary>
    [DataContract(Name = "PaymentMethod")]
    public partial class PaymentMethod : IValidatableObject
    {
        /// <summary>
        /// The merchant type this payment method was authorized with. Valid values are: PAYPAL, AUTHORIZE, EWAY, WEPAY, STRIPE, KEAP_PAY, UNSUPPORTED
        /// </summary>
        /// <value>The merchant type this payment method was authorized with. Valid values are: PAYPAL, AUTHORIZE, EWAY, WEPAY, STRIPE, KEAP_PAY, UNSUPPORTED</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MerchantAccountTypeEnum
        {
            /// <summary>
            /// Enum PAYPAL for value: PAYPAL
            /// </summary>
            [EnumMember(Value = "PAYPAL")]
            PAYPAL = 1,

            /// <summary>
            /// Enum UNSUPPORTED for value: UNSUPPORTED
            /// </summary>
            [EnumMember(Value = "UNSUPPORTED")]
            UNSUPPORTED = 2,

            /// <summary>
            /// Enum AUTHORIZE for value: AUTHORIZE
            /// </summary>
            [EnumMember(Value = "AUTHORIZE")]
            AUTHORIZE = 3,

            /// <summary>
            /// Enum EWAY for value: EWAY
            /// </summary>
            [EnumMember(Value = "EWAY")]
            EWAY = 4,

            /// <summary>
            /// Enum WEPAY for value: WEPAY
            /// </summary>
            [EnumMember(Value = "WEPAY")]
            WEPAY = 5,

            /// <summary>
            /// Enum STRIPE for value: STRIPE
            /// </summary>
            [EnumMember(Value = "STRIPE")]
            STRIPE = 6,

            /// <summary>
            /// Enum KEAPPAY for value: KEAP_PAY
            /// </summary>
            [EnumMember(Value = "KEAP_PAY")]
            KEAPPAY = 7
        }

        /// <summary>
        /// The merchant type this payment method was authorized with. Valid values are: PAYPAL, AUTHORIZE, EWAY, WEPAY, STRIPE, KEAP_PAY, UNSUPPORTED
        /// </summary>
        /// <value>The merchant type this payment method was authorized with. Valid values are: PAYPAL, AUTHORIZE, EWAY, WEPAY, STRIPE, KEAP_PAY, UNSUPPORTED</value>
        [DataMember(Name = "merchant_account_type", EmitDefaultValue = false)]
        public MerchantAccountTypeEnum? MerchantAccountType { get; set; }
        /// <summary>
        /// The type of payment method. For now, only CARD is supported.
        /// </summary>
        /// <value>The type of payment method. For now, only CARD is supported.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentMethodTypeEnum
        {
            /// <summary>
            /// Enum CARD for value: CARD
            /// </summary>
            [EnumMember(Value = "CARD")]
            CARD = 1
        }

        /// <summary>
        /// The type of payment method. For now, only CARD is supported.
        /// </summary>
        /// <value>The type of payment method. For now, only CARD is supported.</value>
        [DataMember(Name = "payment_method_type", EmitDefaultValue = false)]
        public PaymentMethodTypeEnum? PaymentMethodType { get; set; }
        /// <summary>
        /// Status of the payment method. Fow now, only EXPIRED is supported.
        /// </summary>
        /// <value>Status of the payment method. Fow now, only EXPIRED is supported.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum EXPIRED for value: EXPIRED
            /// </summary>
            [EnumMember(Value = "EXPIRED")]
            EXPIRED = 1
        }

        /// <summary>
        /// Status of the payment method. Fow now, only EXPIRED is supported.
        /// </summary>
        /// <value>Status of the payment method. Fow now, only EXPIRED is supported.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethod" /> class.
        /// </summary>
        /// <param name="cardInfo">cardInfo.</param>
        /// <param name="contactId">contactId.</param>
        /// <param name="createdTime">createdTime.</param>
        /// <param name="merchantAccountId">merchantAccountId.</param>
        /// <param name="merchantAccountType">The merchant type this payment method was authorized with. Valid values are: PAYPAL, AUTHORIZE, EWAY, WEPAY, STRIPE, KEAP_PAY, UNSUPPORTED.</param>
        /// <param name="paymentMethodId">paymentMethodId.</param>
        /// <param name="paymentMethodType">The type of payment method. For now, only CARD is supported..</param>
        /// <param name="status">Status of the payment method. Fow now, only EXPIRED is supported..</param>
        public PaymentMethod(CardInfo cardInfo = default, string contactId = default, string createdTime = default, string merchantAccountId = default, MerchantAccountTypeEnum? merchantAccountType = default, string paymentMethodId = default, PaymentMethodTypeEnum? paymentMethodType = default, StatusEnum? status = default)
        {
            this.CardInfo = cardInfo;
            this.ContactId = contactId;
            this.CreatedTime = createdTime;
            this.MerchantAccountId = merchantAccountId;
            this.MerchantAccountType = merchantAccountType;
            this.PaymentMethodId = paymentMethodId;
            this.PaymentMethodType = paymentMethodType;
            this.Status = status;
        }

        /// <summary>
        /// Gets or Sets CardInfo
        /// </summary>
        [DataMember(Name = "card_info", EmitDefaultValue = false)]
        public CardInfo CardInfo { get; set; }

        /// <summary>
        /// Gets or Sets ContactId
        /// </summary>
        [DataMember(Name = "contact_id", EmitDefaultValue = false)]
        public string ContactId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedTime
        /// </summary>
        [DataMember(Name = "created_time", EmitDefaultValue = false)]
        public string CreatedTime { get; set; }

        /// <summary>
        /// Gets or Sets MerchantAccountId
        /// </summary>
        [DataMember(Name = "merchant_account_id", EmitDefaultValue = false)]
        public string MerchantAccountId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethodId
        /// </summary>
        [DataMember(Name = "payment_method_id", EmitDefaultValue = false)]
        public string PaymentMethodId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentMethod {\n");
            sb.Append("  CardInfo: ").Append(CardInfo).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  MerchantAccountId: ").Append(MerchantAccountId).Append("\n");
            sb.Append("  MerchantAccountType: ").Append(MerchantAccountType).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  PaymentMethodType: ").Append(PaymentMethodType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
