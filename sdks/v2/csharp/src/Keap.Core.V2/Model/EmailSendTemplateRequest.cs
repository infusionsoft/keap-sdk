/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.789938-hf-202503111611
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// EmailSendTemplateRequest
    /// </summary>
    [DataContract(Name = "EmailSendTemplateRequest")]
    public partial class EmailSendTemplateRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailSendTemplateRequest" /> class.
        /// </summary>
        /// <param name="addressField">Email field of each Contact record to address the email to, such as &#39;Email&#39;, &#39;EmailAddress2&#39;, &#39;EmailAddress3&#39; or &#39;_CustomFieldName&#39;, defaulting to the contact&#39;s primary email.</param>
        /// <param name="contactIds">List of contacts to send.</param>
        /// <param name="templateId">Template ID.</param>
        /// <param name="userId">user id sending the email.</param>
        public EmailSendTemplateRequest(string addressField = default(string), List<string> contactIds = default(List<string>), string templateId = default(string), string userId = default(string))
        {
            this.AddressField = addressField;
            this.ContactIds = contactIds;
            this.TemplateId = templateId;
            this.UserId = userId;
        }

        /// <summary>
        /// Email field of each Contact record to address the email to, such as &#39;Email&#39;, &#39;EmailAddress2&#39;, &#39;EmailAddress3&#39; or &#39;_CustomFieldName&#39;, defaulting to the contact&#39;s primary email
        /// </summary>
        /// <value>Email field of each Contact record to address the email to, such as &#39;Email&#39;, &#39;EmailAddress2&#39;, &#39;EmailAddress3&#39; or &#39;_CustomFieldName&#39;, defaulting to the contact&#39;s primary email</value>
        [DataMember(Name = "address_field", EmitDefaultValue = false)]
        public string AddressField { get; set; }

        /// <summary>
        /// List of contacts to send
        /// </summary>
        /// <value>List of contacts to send</value>
        [DataMember(Name = "contact_ids", EmitDefaultValue = false)]
        public List<string> ContactIds { get; set; }

        /// <summary>
        /// Template ID
        /// </summary>
        /// <value>Template ID</value>
        [DataMember(Name = "template_id", EmitDefaultValue = false)]
        public string TemplateId { get; set; }

        /// <summary>
        /// user id sending the email
        /// </summary>
        /// <value>user id sending the email</value>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailSendTemplateRequest {\n");
            sb.Append("  AddressField: ").Append(AddressField).Append("\n");
            sb.Append("  ContactIds: ").Append(ContactIds).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
