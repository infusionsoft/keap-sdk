/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.869301
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// Webform
    /// </summary>
    [DataContract(Name = "Webform")]
    public partial class Webform : IValidatableObject
    {
        /// <summary>
        /// The option that determines if the lead submitted through the form is a duplicate or not. If it&#39;s a duplicate, then the lead will be merged with the existing contact record
        /// </summary>
        /// <value>The option that determines if the lead submitted through the form is a duplicate or not. If it&#39;s a duplicate, then the lead will be merged with the existing contact record</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DuplicateCheckOptionEnum
        {
            /// <summary>
            /// Enum EMAIL for value: EMAIL
            /// </summary>
            [EnumMember(Value = "EMAIL")]
            EMAIL = 1,

            /// <summary>
            /// Enum EMAILANDNAME for value: EMAIL_AND_NAME
            /// </summary>
            [EnumMember(Value = "EMAIL_AND_NAME")]
            EMAILANDNAME = 2,

            /// <summary>
            /// Enum EMAILANDNAMEANDCOMPANY for value: EMAIL_AND_NAME_AND_COMPANY
            /// </summary>
            [EnumMember(Value = "EMAIL_AND_NAME_AND_COMPANY")]
            EMAILANDNAMEANDCOMPANY = 3,

            /// <summary>
            /// Enum NOCHECK for value: NO_CHECK
            /// </summary>
            [EnumMember(Value = "NO_CHECK")]
            NOCHECK = 4
        }

        /// <summary>
        /// The option that determines if the lead submitted through the form is a duplicate or not. If it&#39;s a duplicate, then the lead will be merged with the existing contact record
        /// </summary>
        /// <value>The option that determines if the lead submitted through the form is a duplicate or not. If it&#39;s a duplicate, then the lead will be merged with the existing contact record</value>
        [DataMember(Name = "duplicate_check_option", EmitDefaultValue = false)]
        public DuplicateCheckOptionEnum? DuplicateCheckOption { get; set; }
        /// <summary>
        /// The option that determines what happens after the form is submitted
        /// </summary>
        /// <value>The option that determines what happens after the form is submitted</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExitOptionEnum
        {
            /// <summary>
            /// Enum REDIRECT for value: REDIRECT
            /// </summary>
            [EnumMember(Value = "REDIRECT")]
            REDIRECT = 1,

            /// <summary>
            /// Enum FUNNELLINK for value: FUNNEL_LINK
            /// </summary>
            [EnumMember(Value = "FUNNEL_LINK")]
            FUNNELLINK = 2,

            /// <summary>
            /// Enum HOSTED for value: HOSTED
            /// </summary>
            [EnumMember(Value = "HOSTED")]
            HOSTED = 3,

            /// <summary>
            /// Enum LANDINGPAGE for value: LANDING_PAGE
            /// </summary>
            [EnumMember(Value = "LANDING_PAGE")]
            LANDINGPAGE = 4,

            /// <summary>
            /// Enum WEBFORM for value: WEB_FORM
            /// </summary>
            [EnumMember(Value = "WEB_FORM")]
            WEBFORM = 5,

            /// <summary>
            /// Enum SURVEY for value: SURVEY
            /// </summary>
            [EnumMember(Value = "SURVEY")]
            SURVEY = 6,

            /// <summary>
            /// Enum UPDATE for value: UPDATE
            /// </summary>
            [EnumMember(Value = "UPDATE")]
            UPDATE = 7,

            /// <summary>
            /// Enum UPDATEOPTOUT for value: UPDATE_OPT_OUT
            /// </summary>
            [EnumMember(Value = "UPDATE_OPT_OUT")]
            UPDATEOPTOUT = 8,

            /// <summary>
            /// Enum OPTOUT for value: OPT_OUT
            /// </summary>
            [EnumMember(Value = "OPT_OUT")]
            OPTOUT = 9,

            /// <summary>
            /// Enum CONFIRM for value: CONFIRM
            /// </summary>
            [EnumMember(Value = "CONFIRM")]
            CONFIRM = 10,

            /// <summary>
            /// Enum MESSAGE for value: MESSAGE
            /// </summary>
            [EnumMember(Value = "MESSAGE")]
            MESSAGE = 11,

            /// <summary>
            /// Enum AUTHORINGMESSAGE for value: AUTHORING_MESSAGE
            /// </summary>
            [EnumMember(Value = "AUTHORING_MESSAGE")]
            AUTHORINGMESSAGE = 12,

            /// <summary>
            /// Enum MANUAL for value: MANUAL
            /// </summary>
            [EnumMember(Value = "MANUAL")]
            MANUAL = 13,

            /// <summary>
            /// Enum CLOSE for value: CLOSE
            /// </summary>
            [EnumMember(Value = "CLOSE")]
            CLOSE = 14,

            /// <summary>
            /// Enum DISPLAYTEXTANDBUTTON for value: DISPLAY_TEXT_AND_BUTTON
            /// </summary>
            [EnumMember(Value = "DISPLAY_TEXT_AND_BUTTON")]
            DISPLAYTEXTANDBUTTON = 15,

            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 16,

            /// <summary>
            /// Enum HOSTEDPAGE for value: HOSTED_PAGE
            /// </summary>
            [EnumMember(Value = "HOSTED_PAGE")]
            HOSTEDPAGE = 17
        }

        /// <summary>
        /// The option that determines what happens after the form is submitted
        /// </summary>
        /// <value>The option that determines what happens after the form is submitted</value>
        [DataMember(Name = "exit_option", EmitDefaultValue = false)]
        public ExitOptionEnum? ExitOption { get; set; }
        /// <summary>
        /// The type of webform this is
        /// </summary>
        /// <value>The type of webform this is</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WebformTypeEnum
        {
            /// <summary>
            /// Enum LEGACY for value: LEGACY
            /// </summary>
            [EnumMember(Value = "LEGACY")]
            LEGACY = 1,

            /// <summary>
            /// Enum STANDALONE for value: STANDALONE
            /// </summary>
            [EnumMember(Value = "STANDALONE")]
            STANDALONE = 2,

            /// <summary>
            /// Enum FUNNEL for value: FUNNEL
            /// </summary>
            [EnumMember(Value = "FUNNEL")]
            FUNNEL = 3,

            /// <summary>
            /// Enum LANDINGPAGE for value: LANDING_PAGE
            /// </summary>
            [EnumMember(Value = "LANDING_PAGE")]
            LANDINGPAGE = 4,

            /// <summary>
            /// Enum SURVEY for value: SURVEY
            /// </summary>
            [EnumMember(Value = "SURVEY")]
            SURVEY = 5,

            /// <summary>
            /// Enum INTERNAL for value: INTERNAL
            /// </summary>
            [EnumMember(Value = "INTERNAL")]
            INTERNAL = 6,

            /// <summary>
            /// Enum TWITTER for value: TWITTER
            /// </summary>
            [EnumMember(Value = "TWITTER")]
            TWITTER = 7,

            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 8
        }

        /// <summary>
        /// The type of webform this is
        /// </summary>
        /// <value>The type of webform this is</value>
        [DataMember(Name = "webform_type", EmitDefaultValue = false)]
        public WebformTypeEnum? WebformType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Webform" /> class.
        /// </summary>
        /// <param name="createTime">When the webform was created.</param>
        /// <param name="customSlug">The custom slug of the webform. Used in pretty webform URLs.</param>
        /// <param name="duplicateCheckOption">The option that determines if the lead submitted through the form is a duplicate or not. If it&#39;s a duplicate, then the lead will be merged with the existing contact record.</param>
        /// <param name="exitOption">The option that determines what happens after the form is submitted.</param>
        /// <param name="funnelId">The id of the funnel this webform belongs to, if any.</param>
        /// <param name="id">The unique identifier for this webform.</param>
        /// <param name="name">The name of this webform.</param>
        /// <param name="prettyWebformUrl">The URL for this webform that uses the custom slug to identify it.</param>
        /// <param name="thankYouPageUrl">The URL of the thank you page for this webform.</param>
        /// <param name="updateTime">When the webform was last updated.</param>
        /// <param name="webformType">The type of webform this is.</param>
        /// <param name="webformUrl">The URL for this webform that uses the xid to identify it.</param>
        /// <param name="xid">The public unique identifier for this tag, used in webform URLs.</param>
        public Webform(string createTime = default, string customSlug = default, DuplicateCheckOptionEnum? duplicateCheckOption = default, ExitOptionEnum? exitOption = default, string funnelId = default, string id = default, string name = default, string prettyWebformUrl = default, string thankYouPageUrl = default, string updateTime = default, WebformTypeEnum? webformType = default, string webformUrl = default, string xid = default)
        {
            this.CreateTime = createTime;
            this.CustomSlug = customSlug;
            this.DuplicateCheckOption = duplicateCheckOption;
            this.ExitOption = exitOption;
            this.FunnelId = funnelId;
            this.Id = id;
            this.Name = name;
            this.PrettyWebformUrl = prettyWebformUrl;
            this.ThankYouPageUrl = thankYouPageUrl;
            this.UpdateTime = updateTime;
            this.WebformType = webformType;
            this.WebformUrl = webformUrl;
            this.Xid = xid;
        }

        /// <summary>
        /// When the webform was created
        /// </summary>
        /// <value>When the webform was created</value>
        [DataMember(Name = "create_time", EmitDefaultValue = false)]
        public string CreateTime { get; set; }

        /// <summary>
        /// The custom slug of the webform. Used in pretty webform URLs
        /// </summary>
        /// <value>The custom slug of the webform. Used in pretty webform URLs</value>
        [DataMember(Name = "custom_slug", EmitDefaultValue = false)]
        public string CustomSlug { get; set; }

        /// <summary>
        /// The id of the funnel this webform belongs to, if any
        /// </summary>
        /// <value>The id of the funnel this webform belongs to, if any</value>
        [DataMember(Name = "funnel_id", EmitDefaultValue = false)]
        public string FunnelId { get; set; }

        /// <summary>
        /// The unique identifier for this webform
        /// </summary>
        /// <value>The unique identifier for this webform</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of this webform
        /// </summary>
        /// <value>The name of this webform</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The URL for this webform that uses the custom slug to identify it
        /// </summary>
        /// <value>The URL for this webform that uses the custom slug to identify it</value>
        [DataMember(Name = "pretty_webform_url", EmitDefaultValue = false)]
        public string PrettyWebformUrl { get; set; }

        /// <summary>
        /// The URL of the thank you page for this webform
        /// </summary>
        /// <value>The URL of the thank you page for this webform</value>
        [DataMember(Name = "thank_you_page_url", EmitDefaultValue = false)]
        public string ThankYouPageUrl { get; set; }

        /// <summary>
        /// When the webform was last updated
        /// </summary>
        /// <value>When the webform was last updated</value>
        [DataMember(Name = "update_time", EmitDefaultValue = false)]
        public string UpdateTime { get; set; }

        /// <summary>
        /// The URL for this webform that uses the xid to identify it
        /// </summary>
        /// <value>The URL for this webform that uses the xid to identify it</value>
        [DataMember(Name = "webform_url", EmitDefaultValue = false)]
        public string WebformUrl { get; set; }

        /// <summary>
        /// The public unique identifier for this tag, used in webform URLs
        /// </summary>
        /// <value>The public unique identifier for this tag, used in webform URLs</value>
        [DataMember(Name = "xid", EmitDefaultValue = false)]
        public string Xid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Webform {\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  CustomSlug: ").Append(CustomSlug).Append("\n");
            sb.Append("  DuplicateCheckOption: ").Append(DuplicateCheckOption).Append("\n");
            sb.Append("  ExitOption: ").Append(ExitOption).Append("\n");
            sb.Append("  FunnelId: ").Append(FunnelId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PrettyWebformUrl: ").Append(PrettyWebformUrl).Append("\n");
            sb.Append("  ThankYouPageUrl: ").Append(ThankYouPageUrl).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("  WebformType: ").Append(WebformType).Append("\n");
            sb.Append("  WebformUrl: ").Append(WebformUrl).Append("\n");
            sb.Append("  Xid: ").Append(Xid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
