/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.809589
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// CardInfo
    /// </summary>
    [DataContract(Name = "CardInfo")]
    public partial class CardInfo : IValidatableObject
    {
        /// <summary>
        /// Defines CardType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CardTypeEnum
        {
            /// <summary>
            /// Enum CREDIT for value: CREDIT
            /// </summary>
            [EnumMember(Value = "CREDIT")]
            CREDIT = 1,

            /// <summary>
            /// Enum DEBIT for value: DEBIT
            /// </summary>
            [EnumMember(Value = "DEBIT")]
            DEBIT = 2,

            /// <summary>
            /// Enum PREPAID for value: PREPAID
            /// </summary>
            [EnumMember(Value = "PREPAID")]
            PREPAID = 3,

            /// <summary>
            /// Enum ACH for value: ACH
            /// </summary>
            [EnumMember(Value = "ACH")]
            ACH = 4
        }

        /// <summary>
        /// Gets or Sets CardType
        /// </summary>
        [DataMember(Name = "card_type", EmitDefaultValue = false)]
        public CardTypeEnum? CardType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardInfo" /> class.
        /// </summary>
        /// <param name="brand">brand.</param>
        /// <param name="cardType">cardType.</param>
        /// <param name="expirationMonth">expirationMonth.</param>
        /// <param name="expirationYear">expirationYear.</param>
        /// <param name="lastFour">lastFour.</param>
        public CardInfo(string brand = default, CardTypeEnum? cardType = default, string expirationMonth = default, string expirationYear = default, string lastFour = default)
        {
            this.Brand = brand;
            this.CardType = cardType;
            this.ExpirationMonth = expirationMonth;
            this.ExpirationYear = expirationYear;
            this.LastFour = lastFour;
        }

        /// <summary>
        /// Gets or Sets Brand
        /// </summary>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        public string Brand { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationMonth
        /// </summary>
        [DataMember(Name = "expiration_month", EmitDefaultValue = false)]
        public string ExpirationMonth { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationYear
        /// </summary>
        [DataMember(Name = "expiration_year", EmitDefaultValue = false)]
        public string ExpirationYear { get; set; }

        /// <summary>
        /// Gets or Sets LastFour
        /// </summary>
        [DataMember(Name = "last_four", EmitDefaultValue = false)]
        public string LastFour { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CardInfo {\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("  ExpirationMonth: ").Append(ExpirationMonth).Append("\n");
            sb.Append("  ExpirationYear: ").Append(ExpirationYear).Append("\n");
            sb.Append("  LastFour: ").Append(LastFour).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
