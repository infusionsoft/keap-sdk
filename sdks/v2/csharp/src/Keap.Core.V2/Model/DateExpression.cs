/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.809589
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// DateExpression
    /// </summary>
    [DataContract(Name = "DateExpression")]
    public partial class DateExpression : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DateExpression" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DateExpression() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DateExpression" /> class.
        /// </summary>
        /// <param name="query">query (required).</param>
        /// <param name="parseStart">Where in the expression this date exists (start) (required).</param>
        /// <param name="parseEnd">Where in the expression this date exists (required).</param>
        /// <param name="dateInferred">Whether the date portion of the results has been inferred (and can be ignored) (required).</param>
        /// <param name="timeInferred">Whether the time portion of the results has been inferred (and can be ignored) (required).</param>
        /// <param name="result">result (required).</param>
        /// <param name="recurring">Whether the results are recurring (required).</param>
        /// <param name="recurseUntil">If recurring, when the recurrence ends (required).</param>
        /// <param name="completeMatch">completeMatch.</param>
        public DateExpression(string query = default, int parseStart = default, int parseEnd = default, bool dateInferred = default, bool timeInferred = default, LogicalDate result = default, bool recurring = default, LogicalDate recurseUntil = default, bool? completeMatch = default)
        {
            // to ensure "query" is required (not null)
            if (query == null)
            {
                throw new ArgumentNullException("query is a required property for DateExpression and cannot be null");
            }
            this.Query = query;
            this.ParseStart = parseStart;
            this.ParseEnd = parseEnd;
            this.DateInferred = dateInferred;
            this.TimeInferred = timeInferred;
            // to ensure "result" is required (not null)
            if (result == null)
            {
                throw new ArgumentNullException("result is a required property for DateExpression and cannot be null");
            }
            this.Result = result;
            this.Recurring = recurring;
            // to ensure "recurseUntil" is required (not null)
            if (recurseUntil == null)
            {
                throw new ArgumentNullException("recurseUntil is a required property for DateExpression and cannot be null");
            }
            this.RecurseUntil = recurseUntil;
            this.CompleteMatch = completeMatch;
        }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name = "query", IsRequired = true, EmitDefaultValue = true)]
        public string Query { get; set; }

        /// <summary>
        /// Where in the expression this date exists (start)
        /// </summary>
        /// <value>Where in the expression this date exists (start)</value>
        [DataMember(Name = "parse_start", IsRequired = true, EmitDefaultValue = true)]
        public int ParseStart { get; set; }

        /// <summary>
        /// Where in the expression this date exists
        /// </summary>
        /// <value>Where in the expression this date exists</value>
        [DataMember(Name = "parse_end", IsRequired = true, EmitDefaultValue = true)]
        public int ParseEnd { get; set; }

        /// <summary>
        /// Whether the date portion of the results has been inferred (and can be ignored)
        /// </summary>
        /// <value>Whether the date portion of the results has been inferred (and can be ignored)</value>
        [DataMember(Name = "date_inferred", IsRequired = true, EmitDefaultValue = true)]
        public bool DateInferred { get; set; }

        /// <summary>
        /// Whether the time portion of the results has been inferred (and can be ignored)
        /// </summary>
        /// <value>Whether the time portion of the results has been inferred (and can be ignored)</value>
        [DataMember(Name = "time_inferred", IsRequired = true, EmitDefaultValue = true)]
        public bool TimeInferred { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "result", IsRequired = true, EmitDefaultValue = true)]
        public LogicalDate Result { get; set; }

        /// <summary>
        /// Whether the results are recurring
        /// </summary>
        /// <value>Whether the results are recurring</value>
        [DataMember(Name = "recurring", IsRequired = true, EmitDefaultValue = true)]
        public bool Recurring { get; set; }

        /// <summary>
        /// If recurring, when the recurrence ends
        /// </summary>
        /// <value>If recurring, when the recurrence ends</value>
        [DataMember(Name = "recurse_until", IsRequired = true, EmitDefaultValue = true)]
        public LogicalDate RecurseUntil { get; set; }

        /// <summary>
        /// Gets or Sets CompleteMatch
        /// </summary>
        [DataMember(Name = "complete_match", EmitDefaultValue = true)]
        public bool? CompleteMatch { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DateExpression {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  ParseStart: ").Append(ParseStart).Append("\n");
            sb.Append("  ParseEnd: ").Append(ParseEnd).Append("\n");
            sb.Append("  DateInferred: ").Append(DateInferred).Append("\n");
            sb.Append("  TimeInferred: ").Append(TimeInferred).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Recurring: ").Append(Recurring).Append("\n");
            sb.Append("  RecurseUntil: ").Append(RecurseUntil).Append("\n");
            sb.Append("  CompleteMatch: ").Append(CompleteMatch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
