/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.839048
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// LeadSourceRecurringExpense
    /// </summary>
    [DataContract(Name = "LeadSourceRecurringExpense")]
    public partial class LeadSourceRecurringExpense : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LeadSourceRecurringExpense" /> class.
        /// </summary>
        /// <param name="amount">amount.</param>
        /// <param name="createTime">The time this lead source recurring expense was created.</param>
        /// <param name="endTime">The time this lead source recurring expense end.</param>
        /// <param name="id">The ID of the lead source recurring expense.</param>
        /// <param name="leadSourceId">The ID of the lead source the recurring expense belongs to.</param>
        /// <param name="nextExpenseTime">The time this lead source recurring expense will incur a new expense.</param>
        /// <param name="notes">The notes for the lead source recurring expense.</param>
        /// <param name="startTime">The time this lead source recurring expense starts.</param>
        /// <param name="title">The title of the lead source recurring expense.</param>
        /// <param name="updateTime">The time this lead source recurring expense was last updated.</param>
        public LeadSourceRecurringExpense(CurrencyValue amount = default, string createTime = default, string endTime = default, string id = default, string leadSourceId = default, string nextExpenseTime = default, string notes = default, string startTime = default, string title = default, string updateTime = default)
        {
            this.Amount = amount;
            this.CreateTime = createTime;
            this.EndTime = endTime;
            this.Id = id;
            this.LeadSourceId = leadSourceId;
            this.NextExpenseTime = nextExpenseTime;
            this.Notes = notes;
            this.StartTime = startTime;
            this.Title = title;
            this.UpdateTime = updateTime;
        }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public CurrencyValue Amount { get; set; }

        /// <summary>
        /// The time this lead source recurring expense was created
        /// </summary>
        /// <value>The time this lead source recurring expense was created</value>
        [DataMember(Name = "create_time", EmitDefaultValue = false)]
        public string CreateTime { get; set; }

        /// <summary>
        /// The time this lead source recurring expense end
        /// </summary>
        /// <value>The time this lead source recurring expense end</value>
        [DataMember(Name = "end_time", EmitDefaultValue = false)]
        public string EndTime { get; set; }

        /// <summary>
        /// The ID of the lead source recurring expense
        /// </summary>
        /// <value>The ID of the lead source recurring expense</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the lead source the recurring expense belongs to
        /// </summary>
        /// <value>The ID of the lead source the recurring expense belongs to</value>
        [DataMember(Name = "lead_source_id", EmitDefaultValue = false)]
        public string LeadSourceId { get; set; }

        /// <summary>
        /// The time this lead source recurring expense will incur a new expense
        /// </summary>
        /// <value>The time this lead source recurring expense will incur a new expense</value>
        [DataMember(Name = "next_expense_time", EmitDefaultValue = false)]
        public string NextExpenseTime { get; set; }

        /// <summary>
        /// The notes for the lead source recurring expense
        /// </summary>
        /// <value>The notes for the lead source recurring expense</value>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// The time this lead source recurring expense starts
        /// </summary>
        /// <value>The time this lead source recurring expense starts</value>
        [DataMember(Name = "start_time", EmitDefaultValue = false)]
        public string StartTime { get; set; }

        /// <summary>
        /// The title of the lead source recurring expense
        /// </summary>
        /// <value>The title of the lead source recurring expense</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// The time this lead source recurring expense was last updated
        /// </summary>
        /// <value>The time this lead source recurring expense was last updated</value>
        [DataMember(Name = "update_time", EmitDefaultValue = false)]
        public string UpdateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LeadSourceRecurringExpense {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LeadSourceId: ").Append(LeadSourceId).Append("\n");
            sb.Append("  NextExpenseTime: ").Append(NextExpenseTime).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
