/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.812056
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// UpdateDisplayGroupRequest
    /// </summary>
    [DataContract(Name = "UpdateDisplayGroupRequest")]
    public partial class UpdateDisplayGroupRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDisplayGroupRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateDisplayGroupRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDisplayGroupRequest" /> class.
        /// </summary>
        /// <param name="sortOrder">Determines the order for where this display group shows up on the form..</param>
        /// <param name="title">The title of the display group. (required).</param>
        /// <param name="description">The description of the display group..</param>
        /// <param name="properties">A list of properties that will be displayed in this group. (required).</param>
        public UpdateDisplayGroupRequest(int sortOrder = default, string title = default, string description = default, List<UpdateDisplayPropertyRequest> properties = default)
        {
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for UpdateDisplayGroupRequest and cannot be null");
            }
            this.Title = title;
            // to ensure "properties" is required (not null)
            if (properties == null)
            {
                throw new ArgumentNullException("properties is a required property for UpdateDisplayGroupRequest and cannot be null");
            }
            this.Properties = properties;
            this.SortOrder = sortOrder;
            this.Description = description;
        }

        /// <summary>
        /// Determines the order for where this display group shows up on the form.
        /// </summary>
        /// <value>Determines the order for where this display group shows up on the form.</value>
        [DataMember(Name = "sort_order", EmitDefaultValue = false)]
        public int SortOrder { get; set; }

        /// <summary>
        /// The title of the display group.
        /// </summary>
        /// <value>The title of the display group.</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// The description of the display group.
        /// </summary>
        /// <value>The description of the display group.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// A list of properties that will be displayed in this group.
        /// </summary>
        /// <value>A list of properties that will be displayed in this group.</value>
        [DataMember(Name = "properties", IsRequired = true, EmitDefaultValue = true)]
        public List<UpdateDisplayPropertyRequest> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateDisplayGroupRequest {\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
