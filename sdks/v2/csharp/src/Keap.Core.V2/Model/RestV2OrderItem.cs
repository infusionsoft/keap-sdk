/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.804890
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// RestV2OrderItem
    /// </summary>
    [DataContract(Name = "RestV2OrderItem")]
    public partial class RestV2OrderItem : IValidatableObject
    {
        /// <summary>
        /// Defines ItemType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ItemTypeEnum
        {
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN,

            /// <summary>
            /// Enum SHIPPING for value: SHIPPING
            /// </summary>
            [EnumMember(Value = "SHIPPING")]
            SHIPPING,

            /// <summary>
            /// Enum TAX for value: TAX
            /// </summary>
            [EnumMember(Value = "TAX")]
            TAX,

            /// <summary>
            /// Enum SERVICE for value: SERVICE
            /// </summary>
            [EnumMember(Value = "SERVICE")]
            SERVICE,

            /// <summary>
            /// Enum PRODUCT for value: PRODUCT
            /// </summary>
            [EnumMember(Value = "PRODUCT")]
            PRODUCT,

            /// <summary>
            /// Enum UPSELL for value: UPSELL
            /// </summary>
            [EnumMember(Value = "UPSELL")]
            UPSELL,

            /// <summary>
            /// Enum FINANCECHARGE for value: FINANCE_CHARGE
            /// </summary>
            [EnumMember(Value = "FINANCE_CHARGE")]
            FINANCECHARGE,

            /// <summary>
            /// Enum DISCOUNT for value: DISCOUNT
            /// </summary>
            [EnumMember(Value = "DISCOUNT")]
            DISCOUNT,

            /// <summary>
            /// Enum PROGRAM for value: PROGRAM
            /// </summary>
            [EnumMember(Value = "PROGRAM")]
            PROGRAM,

            /// <summary>
            /// Enum SUBSCRIPTION for value: SUBSCRIPTION
            /// </summary>
            [EnumMember(Value = "SUBSCRIPTION")]
            SUBSCRIPTION,

            /// <summary>
            /// Enum DISCOUNTFREETRIAL for value: DISCOUNT_FREE_TRIAL
            /// </summary>
            [EnumMember(Value = "DISCOUNT_FREE_TRIAL")]
            DISCOUNTFREETRIAL,

            /// <summary>
            /// Enum DISCOUNTORDERTOTAL for value: DISCOUNT_ORDER_TOTAL
            /// </summary>
            [EnumMember(Value = "DISCOUNT_ORDER_TOTAL")]
            DISCOUNTORDERTOTAL,

            /// <summary>
            /// Enum DISCOUNTPRODUCT for value: DISCOUNT_PRODUCT
            /// </summary>
            [EnumMember(Value = "DISCOUNT_PRODUCT")]
            DISCOUNTPRODUCT,

            /// <summary>
            /// Enum DISCOUNTPRODUCTCATEGORY for value: DISCOUNT_PRODUCT_CATEGORY
            /// </summary>
            [EnumMember(Value = "DISCOUNT_PRODUCT_CATEGORY")]
            DISCOUNTPRODUCTCATEGORY,

            /// <summary>
            /// Enum DISCOUNTSHIPPING for value: DISCOUNT_SHIPPING
            /// </summary>
            [EnumMember(Value = "DISCOUNT_SHIPPING")]
            DISCOUNTSHIPPING,

            /// <summary>
            /// Enum TIP for value: TIP
            /// </summary>
            [EnumMember(Value = "TIP")]
            TIP,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER
        }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name = "item_type", EmitDefaultValue = false)]
        public ItemTypeEnum? ItemType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RestV2OrderItem" /> class.
        /// </summary>
        /// <param name="cost">cost.</param>
        /// <param name="description">description.</param>
        /// <param name="discount">discount.</param>
        /// <param name="id">id.</param>
        /// <param name="itemType">itemType.</param>
        /// <param name="name">name.</param>
        /// <param name="notes">notes.</param>
        /// <param name="orderItemTaxes">orderItemTaxes.</param>
        /// <param name="price">price.</param>
        /// <param name="product">product.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="special">special.</param>
        /// <param name="subscription">subscription.</param>
        /// <param name="subscriptionId">subscriptionId.</param>
        /// <param name="subscriptionPlan">subscriptionPlan.</param>
        public RestV2OrderItem(CurrencyValue cost = default, string description = default, CurrencyValue discount = default, string id = default, ItemTypeEnum? itemType = default, string name = default, string notes = default, List<OrderItemTax> orderItemTaxes = default, CurrencyValue price = default, OrderItemProduct product = default, int quantity = default, Discount special = default, RestV2Subscription subscription = default, string subscriptionId = default, RestSubscriptionPlan subscriptionPlan = default)
        {
            this.Cost = cost;
            this.Description = description;
            this.Discount = discount;
            this.Id = id;
            this.ItemType = itemType;
            this.Name = name;
            this.Notes = notes;
            this.OrderItemTaxes = orderItemTaxes;
            this.Price = price;
            this.Product = product;
            this.Quantity = quantity;
            this.Special = special;
            this.Subscription = subscription;
            this.SubscriptionId = subscriptionId;
            this.SubscriptionPlan = subscriptionPlan;
        }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name = "cost", EmitDefaultValue = false)]
        public CurrencyValue Cost { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Discount
        /// </summary>
        [DataMember(Name = "discount", EmitDefaultValue = false)]
        public CurrencyValue Discount { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets OrderItemTaxes
        /// </summary>
        [DataMember(Name = "order_item_taxes", EmitDefaultValue = false)]
        public List<OrderItemTax> OrderItemTaxes { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public CurrencyValue Price { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name = "product", EmitDefaultValue = false)]
        public OrderItemProduct Product { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Special
        /// </summary>
        [DataMember(Name = "special", EmitDefaultValue = false)]
        public Discount Special { get; set; }

        /// <summary>
        /// Gets or Sets Subscription
        /// </summary>
        [DataMember(Name = "subscription", EmitDefaultValue = false)]
        public RestV2Subscription Subscription { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionId
        /// </summary>
        [DataMember(Name = "subscription_id", EmitDefaultValue = false)]
        public string SubscriptionId { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionPlan
        /// </summary>
        [DataMember(Name = "subscription_plan", EmitDefaultValue = false)]
        public RestSubscriptionPlan SubscriptionPlan { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RestV2OrderItem {\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  OrderItemTaxes: ").Append(OrderItemTaxes).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Special: ").Append(Special).Append("\n");
            sb.Append("  Subscription: ").Append(Subscription).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  SubscriptionPlan: ").Append(SubscriptionPlan).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
