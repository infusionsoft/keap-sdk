/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.863963
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// UpdateLeadSourceExpenseRequest
    /// </summary>
    [DataContract(Name = "UpdateLeadSourceExpenseRequest")]
    public partial class UpdateLeadSourceExpenseRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateLeadSourceExpenseRequest" /> class.
        /// </summary>
        /// <param name="amount">The monthly cost of the lead source recurring expense. The value should be in the smallest unit of currency for your currency locale. For example, if your currency locale is USD, then the smallest unit of currency is in cents, $225.50 would be provided in the request as 22550..</param>
        /// <param name="incurredTime">The time that the lead source expense was incurred.</param>
        /// <param name="notes">The notes for the lead source expense.</param>
        /// <param name="title">The title of the lead source expense.</param>
        public UpdateLeadSourceExpenseRequest(long amount = default, string incurredTime = default, string notes = default, string title = default)
        {
            this.Amount = amount;
            this.IncurredTime = incurredTime;
            this.Notes = notes;
            this.Title = title;
        }

        /// <summary>
        /// The monthly cost of the lead source recurring expense. The value should be in the smallest unit of currency for your currency locale. For example, if your currency locale is USD, then the smallest unit of currency is in cents, $225.50 would be provided in the request as 22550.
        /// </summary>
        /// <value>The monthly cost of the lead source recurring expense. The value should be in the smallest unit of currency for your currency locale. For example, if your currency locale is USD, then the smallest unit of currency is in cents, $225.50 would be provided in the request as 22550.</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public long Amount { get; set; }

        /// <summary>
        /// The time that the lead source expense was incurred
        /// </summary>
        /// <value>The time that the lead source expense was incurred</value>
        [DataMember(Name = "incurred_time", EmitDefaultValue = false)]
        public string IncurredTime { get; set; }

        /// <summary>
        /// The notes for the lead source expense
        /// </summary>
        /// <value>The notes for the lead source expense</value>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// The title of the lead source expense
        /// </summary>
        /// <value>The title of the lead source expense</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateLeadSourceExpenseRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  IncurredTime: ").Append(IncurredTime).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
