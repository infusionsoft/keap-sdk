/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.839048
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// CreateRestOrderItemRequest
    /// </summary>
    [DataContract(Name = "CreateRestOrderItemRequest")]
    public partial class CreateRestOrderItemRequest : IValidatableObject
    {
        /// <summary>
        /// The type of this line item. For now only [PRODUCT] is supported. Will default to [PRODUCT] if omitted.
        /// </summary>
        /// <value>The type of this line item. For now only [PRODUCT] is supported. Will default to [PRODUCT] if omitted.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ItemTypeEnum
        {
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN,

            /// <summary>
            /// Enum SHIPPING for value: SHIPPING
            /// </summary>
            [EnumMember(Value = "SHIPPING")]
            SHIPPING,

            /// <summary>
            /// Enum TAX for value: TAX
            /// </summary>
            [EnumMember(Value = "TAX")]
            TAX,

            /// <summary>
            /// Enum SERVICE for value: SERVICE
            /// </summary>
            [EnumMember(Value = "SERVICE")]
            SERVICE,

            /// <summary>
            /// Enum PRODUCT for value: PRODUCT
            /// </summary>
            [EnumMember(Value = "PRODUCT")]
            PRODUCT,

            /// <summary>
            /// Enum UPSELL for value: UPSELL
            /// </summary>
            [EnumMember(Value = "UPSELL")]
            UPSELL,

            /// <summary>
            /// Enum FINANCECHARGE for value: FINANCE_CHARGE
            /// </summary>
            [EnumMember(Value = "FINANCE_CHARGE")]
            FINANCECHARGE,

            /// <summary>
            /// Enum DISCOUNT for value: DISCOUNT
            /// </summary>
            [EnumMember(Value = "DISCOUNT")]
            DISCOUNT,

            /// <summary>
            /// Enum PROGRAM for value: PROGRAM
            /// </summary>
            [EnumMember(Value = "PROGRAM")]
            PROGRAM,

            /// <summary>
            /// Enum SUBSCRIPTION for value: SUBSCRIPTION
            /// </summary>
            [EnumMember(Value = "SUBSCRIPTION")]
            SUBSCRIPTION,

            /// <summary>
            /// Enum DISCOUNTFREETRIAL for value: DISCOUNT_FREE_TRIAL
            /// </summary>
            [EnumMember(Value = "DISCOUNT_FREE_TRIAL")]
            DISCOUNTFREETRIAL,

            /// <summary>
            /// Enum DISCOUNTORDERTOTAL for value: DISCOUNT_ORDER_TOTAL
            /// </summary>
            [EnumMember(Value = "DISCOUNT_ORDER_TOTAL")]
            DISCOUNTORDERTOTAL,

            /// <summary>
            /// Enum DISCOUNTPRODUCT for value: DISCOUNT_PRODUCT
            /// </summary>
            [EnumMember(Value = "DISCOUNT_PRODUCT")]
            DISCOUNTPRODUCT,

            /// <summary>
            /// Enum DISCOUNTPRODUCTCATEGORY for value: DISCOUNT_PRODUCT_CATEGORY
            /// </summary>
            [EnumMember(Value = "DISCOUNT_PRODUCT_CATEGORY")]
            DISCOUNTPRODUCTCATEGORY,

            /// <summary>
            /// Enum DISCOUNTSHIPPING for value: DISCOUNT_SHIPPING
            /// </summary>
            [EnumMember(Value = "DISCOUNT_SHIPPING")]
            DISCOUNTSHIPPING,

            /// <summary>
            /// Enum TIP for value: TIP
            /// </summary>
            [EnumMember(Value = "TIP")]
            TIP,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER
        }

        /// <summary>
        /// The type of this line item. For now only [PRODUCT] is supported. Will default to [PRODUCT] if omitted.
        /// </summary>
        /// <value>The type of this line item. For now only [PRODUCT] is supported. Will default to [PRODUCT] if omitted.</value>
        [DataMember(Name = "item_type", EmitDefaultValue = false)]
        public ItemTypeEnum? ItemType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRestOrderItemRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateRestOrderItemRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRestOrderItemRequest" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="itemType">The type of this line item. For now only [PRODUCT] is supported. Will default to [PRODUCT] if omitted..</param>
        /// <param name="price">Overridable price of the product. Must be greater than or equal to 0. If not specified, the product price will be used..</param>
        /// <param name="productId">The id of the product to be added to the order. (required).</param>
        /// <param name="quantity">Quantity must be greater than or equal to 1 (required).</param>
        public CreateRestOrderItemRequest(string description = default, ItemTypeEnum? itemType = default, double price = default, string productId = default, int quantity = default)
        {
            // to ensure "productId" is required (not null)
            if (productId == null)
            {
                throw new ArgumentNullException("productId is a required property for CreateRestOrderItemRequest and cannot be null");
            }
            this.ProductId = productId;
            this.Quantity = quantity;
            this.Description = description;
            this.ItemType = itemType;
            this.Price = price;
        }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Overridable price of the product. Must be greater than or equal to 0. If not specified, the product price will be used.
        /// </summary>
        /// <value>Overridable price of the product. Must be greater than or equal to 0. If not specified, the product price will be used.</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// The id of the product to be added to the order.
        /// </summary>
        /// <value>The id of the product to be added to the order.</value>
        [DataMember(Name = "product_id", IsRequired = true, EmitDefaultValue = true)]
        public string ProductId { get; set; }

        /// <summary>
        /// Quantity must be greater than or equal to 1
        /// </summary>
        /// <value>Quantity must be greater than or equal to 1</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public int Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateRestOrderItemRequest {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
