/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.852640
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// LeadSource
    /// </summary>
    [DataContract(Name = "LeadSource")]
    public partial class LeadSource : IValidatableObject
    {
        /// <summary>
        /// The status of the lead source
        /// </summary>
        /// <value>The status of the lead source</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,

            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 2
        }

        /// <summary>
        /// The status of the lead source
        /// </summary>
        /// <value>The status of the lead source</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeadSource" /> class.
        /// </summary>
        /// <param name="createTime">The time that this lead source was created.</param>
        /// <param name="description">The description of the lead source.</param>
        /// <param name="endTime">The time that this lead source will end.</param>
        /// <param name="id">The unique identifier for this lead source.</param>
        /// <param name="leadSourceCategoryId">The ID of the category that the lead source belongs to.</param>
        /// <param name="medium">The medium of the lead source.</param>
        /// <param name="message">The message/content of the lead source.</param>
        /// <param name="name">The name of the lead source.</param>
        /// <param name="startTime">The time that this lead source started.</param>
        /// <param name="status">The status of the lead source.</param>
        /// <param name="updateTime">The time that this lead source was last updated.</param>
        /// <param name="vendor">The vendor of the lead source.</param>
        public LeadSource(string createTime = default, string description = default, string endTime = default, string id = default, string leadSourceCategoryId = default, string medium = default, string message = default, string name = default, string startTime = default, StatusEnum? status = default, string updateTime = default, string vendor = default)
        {
            this.CreateTime = createTime;
            this.Description = description;
            this.EndTime = endTime;
            this.Id = id;
            this.LeadSourceCategoryId = leadSourceCategoryId;
            this.Medium = medium;
            this.Message = message;
            this.Name = name;
            this.StartTime = startTime;
            this.Status = status;
            this.UpdateTime = updateTime;
            this.Vendor = vendor;
        }

        /// <summary>
        /// The time that this lead source was created
        /// </summary>
        /// <value>The time that this lead source was created</value>
        [DataMember(Name = "create_time", EmitDefaultValue = false)]
        public string CreateTime { get; set; }

        /// <summary>
        /// The description of the lead source
        /// </summary>
        /// <value>The description of the lead source</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The time that this lead source will end
        /// </summary>
        /// <value>The time that this lead source will end</value>
        [DataMember(Name = "end_time", EmitDefaultValue = false)]
        public string EndTime { get; set; }

        /// <summary>
        /// The unique identifier for this lead source
        /// </summary>
        /// <value>The unique identifier for this lead source</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the category that the lead source belongs to
        /// </summary>
        /// <value>The ID of the category that the lead source belongs to</value>
        [DataMember(Name = "lead_source_category_id", EmitDefaultValue = false)]
        public string LeadSourceCategoryId { get; set; }

        /// <summary>
        /// The medium of the lead source
        /// </summary>
        /// <value>The medium of the lead source</value>
        [DataMember(Name = "medium", EmitDefaultValue = false)]
        public string Medium { get; set; }

        /// <summary>
        /// The message/content of the lead source
        /// </summary>
        /// <value>The message/content of the lead source</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// The name of the lead source
        /// </summary>
        /// <value>The name of the lead source</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The time that this lead source started
        /// </summary>
        /// <value>The time that this lead source started</value>
        [DataMember(Name = "start_time", EmitDefaultValue = false)]
        public string StartTime { get; set; }

        /// <summary>
        /// The time that this lead source was last updated
        /// </summary>
        /// <value>The time that this lead source was last updated</value>
        [DataMember(Name = "update_time", EmitDefaultValue = false)]
        public string UpdateTime { get; set; }

        /// <summary>
        /// The vendor of the lead source
        /// </summary>
        /// <value>The vendor of the lead source</value>
        [DataMember(Name = "vendor", EmitDefaultValue = false)]
        public string Vendor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LeadSource {\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LeadSourceCategoryId: ").Append(LeadSourceCategoryId).Append("\n");
            sb.Append("  Medium: ").Append(Medium).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
