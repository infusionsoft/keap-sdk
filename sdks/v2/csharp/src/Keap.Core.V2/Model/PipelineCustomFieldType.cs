/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.809589
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// Class representing a custom field type.
    /// </summary>
    [DataContract(Name = "PipelineCustomFieldType")]
    public partial class PipelineCustomFieldType : IValidatableObject
    {

        /// <summary>
        /// The base primitive type of the custom field. This field is required.
        /// </summary>
        /// <value>The base primitive type of the custom field. This field is required.</value>
        [DataMember(Name = "primitive_type", IsRequired = true, EmitDefaultValue = true)]
        public PipelineCustomFieldPrimitiveType PrimitiveType { get; set; }

        /// <summary>
        /// The discriminator for the model property type. This field is required.
        /// </summary>
        /// <value>The discriminator for the model property type. This field is required.</value>
        [DataMember(Name = "discriminator", IsRequired = true, EmitDefaultValue = true)]
        public PipelineCustomFieldModelPropertyTypeDiscriminator Discriminator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PipelineCustomFieldType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PipelineCustomFieldType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PipelineCustomFieldType" /> class.
        /// </summary>
        /// <param name="primitiveType">The base primitive type of the custom field. This field is required. (required).</param>
        /// <param name="discriminator">The discriminator for the model property type. This field is required. (required).</param>
        /// <param name="array">The array property type of the custom field. This field is optional..</param>
        /// <param name="varRef">The reference property type of the custom field. This field is optional..</param>
        public PipelineCustomFieldType(PipelineCustomFieldPrimitiveType primitiveType = default, PipelineCustomFieldModelPropertyTypeDiscriminator discriminator = default, PipelineCustomFieldArrayPropertyType array = default, PipelineCustomFieldRefPropertyType varRef = default)
        {
            this.PrimitiveType = primitiveType;
            this.Discriminator = discriminator;
            this.Array = array;
            this.Ref = varRef;
        }

        /// <summary>
        /// The array property type of the custom field. This field is optional.
        /// </summary>
        /// <value>The array property type of the custom field. This field is optional.</value>
        [DataMember(Name = "array", EmitDefaultValue = true)]
        public PipelineCustomFieldArrayPropertyType Array { get; set; }

        /// <summary>
        /// The reference property type of the custom field. This field is optional.
        /// </summary>
        /// <value>The reference property type of the custom field. This field is optional.</value>
        [DataMember(Name = "ref", EmitDefaultValue = true)]
        public PipelineCustomFieldRefPropertyType Ref { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PipelineCustomFieldType {\n");
            sb.Append("  PrimitiveType: ").Append(PrimitiveType).Append("\n");
            sb.Append("  Discriminator: ").Append(Discriminator).Append("\n");
            sb.Append("  Array: ").Append(Array).Append("\n");
            sb.Append("  Ref: ").Append(Ref).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
