/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.863963
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// CreatePaymentRequest
    /// </summary>
    [DataContract(Name = "CreatePaymentRequest")]
    public partial class CreatePaymentRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePaymentRequest" /> class.
        /// </summary>
        /// <param name="applyToCommissions">Whether to apply this payment to commissions..</param>
        /// <param name="notes">The notes for this payment..</param>
        /// <param name="paymentAmount">The amount to pay. Must not exceed the current balance of the order. Must be greater than 0 if charging with a payment_method_id.</param>
        /// <param name="paymentMethodId">The payment method id to charge immediately against this order. Omit if you want to add a payment record instead..</param>
        /// <param name="paymentMethodType">The manual payment method type for manually recording a payment. Value must match against the list of types defined under your application&#39;s Order Settings. Ignored if payment_method_id is provided..</param>
        /// <param name="paymentTime">The date and time of payment. In ISO-8601 format (e.g. 2024-05-21T23:00:00Z).</param>
        public CreatePaymentRequest(bool applyToCommissions = default, string notes = default, double paymentAmount = default, string paymentMethodId = default, string paymentMethodType = default, string paymentTime = default)
        {
            this.ApplyToCommissions = applyToCommissions;
            this.Notes = notes;
            this.PaymentAmount = paymentAmount;
            this.PaymentMethodId = paymentMethodId;
            this.PaymentMethodType = paymentMethodType;
            this.PaymentTime = paymentTime;
        }

        /// <summary>
        /// Whether to apply this payment to commissions.
        /// </summary>
        /// <value>Whether to apply this payment to commissions.</value>
        [DataMember(Name = "apply_to_commissions", EmitDefaultValue = true)]
        public bool ApplyToCommissions { get; set; }

        /// <summary>
        /// The notes for this payment.
        /// </summary>
        /// <value>The notes for this payment.</value>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// The amount to pay. Must not exceed the current balance of the order. Must be greater than 0 if charging with a payment_method_id
        /// </summary>
        /// <value>The amount to pay. Must not exceed the current balance of the order. Must be greater than 0 if charging with a payment_method_id</value>
        [DataMember(Name = "payment_amount", EmitDefaultValue = false)]
        public double PaymentAmount { get; set; }

        /// <summary>
        /// The payment method id to charge immediately against this order. Omit if you want to add a payment record instead.
        /// </summary>
        /// <value>The payment method id to charge immediately against this order. Omit if you want to add a payment record instead.</value>
        [DataMember(Name = "payment_method_id", EmitDefaultValue = false)]
        public string PaymentMethodId { get; set; }

        /// <summary>
        /// The manual payment method type for manually recording a payment. Value must match against the list of types defined under your application&#39;s Order Settings. Ignored if payment_method_id is provided.
        /// </summary>
        /// <value>The manual payment method type for manually recording a payment. Value must match against the list of types defined under your application&#39;s Order Settings. Ignored if payment_method_id is provided.</value>
        [DataMember(Name = "payment_method_type", EmitDefaultValue = false)]
        public string PaymentMethodType { get; set; }

        /// <summary>
        /// The date and time of payment. In ISO-8601 format (e.g. 2024-05-21T23:00:00Z)
        /// </summary>
        /// <value>The date and time of payment. In ISO-8601 format (e.g. 2024-05-21T23:00:00Z)</value>
        [DataMember(Name = "payment_time", EmitDefaultValue = false)]
        public string PaymentTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePaymentRequest {\n");
            sb.Append("  ApplyToCommissions: ").Append(ApplyToCommissions).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  PaymentAmount: ").Append(PaymentAmount).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  PaymentMethodType: ").Append(PaymentMethodType).Append("\n");
            sb.Append("  PaymentTime: ").Append(PaymentTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
