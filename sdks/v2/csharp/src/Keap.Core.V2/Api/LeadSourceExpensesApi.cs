/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.839048
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Keap.Core.V2.Client;
using Keap.Core.V2.Client.Auth;
using Keap.Core.V2.Model;

namespace Keap.Core.V2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeadSourceExpensesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Lead Source Expense
        /// </summary>
        /// <remarks>
        /// Creates a new Lead Source Expense
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="createLeadSourceExpenseRequest">The request object to create a new lead source expense</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadSourceExpense</returns>
        LeadSourceExpense CreateLeadSourceExpense(string leadSourceId, CreateLeadSourceExpenseRequest createLeadSourceExpenseRequest, int operationIndex = 0);

        /// <summary>
        /// Create a Lead Source Expense
        /// </summary>
        /// <remarks>
        /// Creates a new Lead Source Expense
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="createLeadSourceExpenseRequest">The request object to create a new lead source expense</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadSourceExpense</returns>
        ApiResponse<LeadSourceExpense> CreateLeadSourceExpenseWithHttpInfo(string leadSourceId, CreateLeadSourceExpenseRequest createLeadSourceExpenseRequest, int operationIndex = 0);
        /// <summary>
        /// Delete a lead source expense
        /// </summary>
        /// <remarks>
        /// Deletes a lead source expense by ID
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteLeadSourceExpense(string leadSourceExpenseId, string leadSourceId, int operationIndex = 0);

        /// <summary>
        /// Delete a lead source expense
        /// </summary>
        /// <remarks>
        /// Deletes a lead source expense by ID
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLeadSourceExpenseWithHttpInfo(string leadSourceExpenseId, string leadSourceId, int operationIndex = 0);
        /// <summary>
        /// Retrieve a Lead Source Expense
        /// </summary>
        /// <remarks>
        /// Retrieves a single Lead Source Expense for a given ID
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadSourceExpense</returns>
        LeadSourceExpense GetLeadSourceExpense(string leadSourceExpenseId, string leadSourceId, int operationIndex = 0);

        /// <summary>
        /// Retrieve a Lead Source Expense
        /// </summary>
        /// <remarks>
        /// Retrieves a single Lead Source Expense for a given ID
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadSourceExpense</returns>
        ApiResponse<LeadSourceExpense> GetLeadSourceExpenseWithHttpInfo(string leadSourceExpenseId, string leadSourceId, int operationIndex = 0);
        /// <summary>
        /// List Lead Source Expenses
        /// </summary>
        /// <remarks>
        /// Retrieves a list of lead source expenses
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="filter">Filter to apply, allowed fields are:  - (String) &#x60;title&#x60; - (Long) &#x60;amount&#x60; - (String) &#x60;incurred_time&#x60; - (String) &#x60;create_time&#x60; - (String) &#x60;update_time&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;amount%3D%3D2500&#x60; - &#x60;filter&#x3D;incurred_time%3D%3D2024-12-22T01:00:00.000Z&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields:  - &#x60;title&#x60; - &#x60;amount&#x60; - &#x60;incurred_time&#x60; - &#x60;create_time&#x60; - &#x60;update_time&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListLeadSourceExpensesResponse</returns>
        ListLeadSourceExpensesResponse ListLeadSourceExpenses(string leadSourceId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);

        /// <summary>
        /// List Lead Source Expenses
        /// </summary>
        /// <remarks>
        /// Retrieves a list of lead source expenses
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="filter">Filter to apply, allowed fields are:  - (String) &#x60;title&#x60; - (Long) &#x60;amount&#x60; - (String) &#x60;incurred_time&#x60; - (String) &#x60;create_time&#x60; - (String) &#x60;update_time&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;amount%3D%3D2500&#x60; - &#x60;filter&#x3D;incurred_time%3D%3D2024-12-22T01:00:00.000Z&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields:  - &#x60;title&#x60; - &#x60;amount&#x60; - &#x60;incurred_time&#x60; - &#x60;create_time&#x60; - &#x60;update_time&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListLeadSourceExpensesResponse</returns>
        ApiResponse<ListLeadSourceExpensesResponse> ListLeadSourceExpensesWithHttpInfo(string leadSourceId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);
        /// <summary>
        /// Update a Lead Source Expense
        /// </summary>
        /// <remarks>
        /// Updates a new Lead Source Expense
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="updateLeadSourceExpenseRequest">The request object to update a lead source expense</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadSourceExpense</returns>
        LeadSourceExpense UpdateLeadSourceExpense(string leadSourceExpenseId, string leadSourceId, UpdateLeadSourceExpenseRequest updateLeadSourceExpenseRequest, List<string>? updateMask = default, int operationIndex = 0);

        /// <summary>
        /// Update a Lead Source Expense
        /// </summary>
        /// <remarks>
        /// Updates a new Lead Source Expense
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="updateLeadSourceExpenseRequest">The request object to update a lead source expense</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadSourceExpense</returns>
        ApiResponse<LeadSourceExpense> UpdateLeadSourceExpenseWithHttpInfo(string leadSourceExpenseId, string leadSourceId, UpdateLeadSourceExpenseRequest updateLeadSourceExpenseRequest, List<string>? updateMask = default, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeadSourceExpensesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a Lead Source Expense
        /// </summary>
        /// <remarks>
        /// Creates a new Lead Source Expense
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="createLeadSourceExpenseRequest">The request object to create a new lead source expense</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadSourceExpense</returns>
        System.Threading.Tasks.Task<LeadSourceExpense> CreateLeadSourceExpenseAsync(string leadSourceId, CreateLeadSourceExpenseRequest createLeadSourceExpenseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a Lead Source Expense
        /// </summary>
        /// <remarks>
        /// Creates a new Lead Source Expense
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="createLeadSourceExpenseRequest">The request object to create a new lead source expense</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadSourceExpense)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeadSourceExpense>> CreateLeadSourceExpenseWithHttpInfoAsync(string leadSourceId, CreateLeadSourceExpenseRequest createLeadSourceExpenseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete a lead source expense
        /// </summary>
        /// <remarks>
        /// Deletes a lead source expense by ID
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLeadSourceExpenseAsync(string leadSourceExpenseId, string leadSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a lead source expense
        /// </summary>
        /// <remarks>
        /// Deletes a lead source expense by ID
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLeadSourceExpenseWithHttpInfoAsync(string leadSourceExpenseId, string leadSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieve a Lead Source Expense
        /// </summary>
        /// <remarks>
        /// Retrieves a single Lead Source Expense for a given ID
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadSourceExpense</returns>
        System.Threading.Tasks.Task<LeadSourceExpense> GetLeadSourceExpenseAsync(string leadSourceExpenseId, string leadSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve a Lead Source Expense
        /// </summary>
        /// <remarks>
        /// Retrieves a single Lead Source Expense for a given ID
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadSourceExpense)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeadSourceExpense>> GetLeadSourceExpenseWithHttpInfoAsync(string leadSourceExpenseId, string leadSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Lead Source Expenses
        /// </summary>
        /// <remarks>
        /// Retrieves a list of lead source expenses
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="filter">Filter to apply, allowed fields are:  - (String) &#x60;title&#x60; - (Long) &#x60;amount&#x60; - (String) &#x60;incurred_time&#x60; - (String) &#x60;create_time&#x60; - (String) &#x60;update_time&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;amount%3D%3D2500&#x60; - &#x60;filter&#x3D;incurred_time%3D%3D2024-12-22T01:00:00.000Z&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields:  - &#x60;title&#x60; - &#x60;amount&#x60; - &#x60;incurred_time&#x60; - &#x60;create_time&#x60; - &#x60;update_time&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListLeadSourceExpensesResponse</returns>
        System.Threading.Tasks.Task<ListLeadSourceExpensesResponse> ListLeadSourceExpensesAsync(string leadSourceId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Lead Source Expenses
        /// </summary>
        /// <remarks>
        /// Retrieves a list of lead source expenses
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="filter">Filter to apply, allowed fields are:  - (String) &#x60;title&#x60; - (Long) &#x60;amount&#x60; - (String) &#x60;incurred_time&#x60; - (String) &#x60;create_time&#x60; - (String) &#x60;update_time&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;amount%3D%3D2500&#x60; - &#x60;filter&#x3D;incurred_time%3D%3D2024-12-22T01:00:00.000Z&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields:  - &#x60;title&#x60; - &#x60;amount&#x60; - &#x60;incurred_time&#x60; - &#x60;create_time&#x60; - &#x60;update_time&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListLeadSourceExpensesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListLeadSourceExpensesResponse>> ListLeadSourceExpensesWithHttpInfoAsync(string leadSourceId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update a Lead Source Expense
        /// </summary>
        /// <remarks>
        /// Updates a new Lead Source Expense
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="updateLeadSourceExpenseRequest">The request object to update a lead source expense</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadSourceExpense</returns>
        System.Threading.Tasks.Task<LeadSourceExpense> UpdateLeadSourceExpenseAsync(string leadSourceExpenseId, string leadSourceId, UpdateLeadSourceExpenseRequest updateLeadSourceExpenseRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a Lead Source Expense
        /// </summary>
        /// <remarks>
        /// Updates a new Lead Source Expense
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="updateLeadSourceExpenseRequest">The request object to update a lead source expense</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadSourceExpense)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeadSourceExpense>> UpdateLeadSourceExpenseWithHttpInfoAsync(string leadSourceExpenseId, string leadSourceId, UpdateLeadSourceExpenseRequest updateLeadSourceExpenseRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeadSourceExpensesApi : ILeadSourceExpensesApiSync, ILeadSourceExpensesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LeadSourceExpensesApi : ILeadSourceExpensesApi
    {
        private Keap.Core.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LeadSourceExpensesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LeadSourceExpensesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeadSourceExpensesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LeadSourceExpensesApi(string basePath)
        {
            this.Configuration = Keap.Core.V2.Client.Configuration.MergeConfigurations(
                Keap.Core.V2.Client.GlobalConfiguration.Instance,
                new Keap.Core.V2.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeadSourceExpensesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LeadSourceExpensesApi(Keap.Core.V2.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Keap.Core.V2.Client.Configuration.MergeConfigurations(
                Keap.Core.V2.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeadSourceExpensesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LeadSourceExpensesApi(Keap.Core.V2.Client.ISynchronousClient client, Keap.Core.V2.Client.IAsynchronousClient asyncClient, Keap.Core.V2.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Keap.Core.V2.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Keap.Core.V2.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Keap.Core.V2.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Keap.Core.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a Lead Source Expense Creates a new Lead Source Expense
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="createLeadSourceExpenseRequest">The request object to create a new lead source expense</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadSourceExpense</returns>
        public LeadSourceExpense CreateLeadSourceExpense(string leadSourceId, CreateLeadSourceExpenseRequest createLeadSourceExpenseRequest, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<LeadSourceExpense> localVarResponse = CreateLeadSourceExpenseWithHttpInfo(leadSourceId, createLeadSourceExpenseRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Lead Source Expense Creates a new Lead Source Expense
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="createLeadSourceExpenseRequest">The request object to create a new lead source expense</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadSourceExpense</returns>
        public Keap.Core.V2.Client.ApiResponse<LeadSourceExpense> CreateLeadSourceExpenseWithHttpInfo(string leadSourceId, CreateLeadSourceExpenseRequest createLeadSourceExpenseRequest, int operationIndex = 0)
        {
            // verify the required parameter 'leadSourceId' is set
            if (leadSourceId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'leadSourceId' when calling LeadSourceExpensesApi->CreateLeadSourceExpense");
            }

            // verify the required parameter 'createLeadSourceExpenseRequest' is set
            if (createLeadSourceExpenseRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'createLeadSourceExpenseRequest' when calling LeadSourceExpensesApi->CreateLeadSourceExpense");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lead_source_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(leadSourceId)); // path parameter
            localVarRequestOptions.Data = createLeadSourceExpenseRequest;

            localVarRequestOptions.Operation = "LeadSourceExpensesApi.CreateLeadSourceExpense";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<LeadSourceExpense>("/v2/leadSources/{lead_source_id}/expenses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLeadSourceExpense", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Lead Source Expense Creates a new Lead Source Expense
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="createLeadSourceExpenseRequest">The request object to create a new lead source expense</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadSourceExpense</returns>
        public async System.Threading.Tasks.Task<LeadSourceExpense> CreateLeadSourceExpenseAsync(string leadSourceId, CreateLeadSourceExpenseRequest createLeadSourceExpenseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<LeadSourceExpense> localVarResponse = await CreateLeadSourceExpenseWithHttpInfoAsync(leadSourceId, createLeadSourceExpenseRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Lead Source Expense Creates a new Lead Source Expense
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="createLeadSourceExpenseRequest">The request object to create a new lead source expense</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadSourceExpense)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<LeadSourceExpense>> CreateLeadSourceExpenseWithHttpInfoAsync(string leadSourceId, CreateLeadSourceExpenseRequest createLeadSourceExpenseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'leadSourceId' is set
            if (leadSourceId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'leadSourceId' when calling LeadSourceExpensesApi->CreateLeadSourceExpense");
            }

            // verify the required parameter 'createLeadSourceExpenseRequest' is set
            if (createLeadSourceExpenseRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'createLeadSourceExpenseRequest' when calling LeadSourceExpensesApi->CreateLeadSourceExpense");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lead_source_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(leadSourceId)); // path parameter
            localVarRequestOptions.Data = createLeadSourceExpenseRequest;

            localVarRequestOptions.Operation = "LeadSourceExpensesApi.CreateLeadSourceExpense";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LeadSourceExpense>("/v2/leadSources/{lead_source_id}/expenses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLeadSourceExpense", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a lead source expense Deletes a lead source expense by ID
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteLeadSourceExpense(string leadSourceExpenseId, string leadSourceId, int operationIndex = 0)
        {
            DeleteLeadSourceExpenseWithHttpInfo(leadSourceExpenseId, leadSourceId);
        }

        /// <summary>
        /// Delete a lead source expense Deletes a lead source expense by ID
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Core.V2.Client.ApiResponse<Object> DeleteLeadSourceExpenseWithHttpInfo(string leadSourceExpenseId, string leadSourceId, int operationIndex = 0)
        {
            // verify the required parameter 'leadSourceExpenseId' is set
            if (leadSourceExpenseId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'leadSourceExpenseId' when calling LeadSourceExpensesApi->DeleteLeadSourceExpense");
            }

            // verify the required parameter 'leadSourceId' is set
            if (leadSourceId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'leadSourceId' when calling LeadSourceExpensesApi->DeleteLeadSourceExpense");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lead_source_expense_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(leadSourceExpenseId)); // path parameter
            localVarRequestOptions.PathParameters.Add("lead_source_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(leadSourceId)); // path parameter

            localVarRequestOptions.Operation = "LeadSourceExpensesApi.DeleteLeadSourceExpense";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/leadSources/{lead_source_id}/expenses/{lead_source_expense_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLeadSourceExpense", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a lead source expense Deletes a lead source expense by ID
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLeadSourceExpenseAsync(string leadSourceExpenseId, string leadSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteLeadSourceExpenseWithHttpInfoAsync(leadSourceExpenseId, leadSourceId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a lead source expense Deletes a lead source expense by ID
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Object>> DeleteLeadSourceExpenseWithHttpInfoAsync(string leadSourceExpenseId, string leadSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'leadSourceExpenseId' is set
            if (leadSourceExpenseId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'leadSourceExpenseId' when calling LeadSourceExpensesApi->DeleteLeadSourceExpense");
            }

            // verify the required parameter 'leadSourceId' is set
            if (leadSourceId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'leadSourceId' when calling LeadSourceExpensesApi->DeleteLeadSourceExpense");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lead_source_expense_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(leadSourceExpenseId)); // path parameter
            localVarRequestOptions.PathParameters.Add("lead_source_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(leadSourceId)); // path parameter

            localVarRequestOptions.Operation = "LeadSourceExpensesApi.DeleteLeadSourceExpense";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/leadSources/{lead_source_id}/expenses/{lead_source_expense_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLeadSourceExpense", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Lead Source Expense Retrieves a single Lead Source Expense for a given ID
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadSourceExpense</returns>
        public LeadSourceExpense GetLeadSourceExpense(string leadSourceExpenseId, string leadSourceId, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<LeadSourceExpense> localVarResponse = GetLeadSourceExpenseWithHttpInfo(leadSourceExpenseId, leadSourceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Lead Source Expense Retrieves a single Lead Source Expense for a given ID
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadSourceExpense</returns>
        public Keap.Core.V2.Client.ApiResponse<LeadSourceExpense> GetLeadSourceExpenseWithHttpInfo(string leadSourceExpenseId, string leadSourceId, int operationIndex = 0)
        {
            // verify the required parameter 'leadSourceExpenseId' is set
            if (leadSourceExpenseId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'leadSourceExpenseId' when calling LeadSourceExpensesApi->GetLeadSourceExpense");
            }

            // verify the required parameter 'leadSourceId' is set
            if (leadSourceId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'leadSourceId' when calling LeadSourceExpensesApi->GetLeadSourceExpense");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lead_source_expense_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(leadSourceExpenseId)); // path parameter
            localVarRequestOptions.PathParameters.Add("lead_source_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(leadSourceId)); // path parameter

            localVarRequestOptions.Operation = "LeadSourceExpensesApi.GetLeadSourceExpense";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<LeadSourceExpense>("/v2/leadSources/{lead_source_id}/expenses/{lead_source_expense_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLeadSourceExpense", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Lead Source Expense Retrieves a single Lead Source Expense for a given ID
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadSourceExpense</returns>
        public async System.Threading.Tasks.Task<LeadSourceExpense> GetLeadSourceExpenseAsync(string leadSourceExpenseId, string leadSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<LeadSourceExpense> localVarResponse = await GetLeadSourceExpenseWithHttpInfoAsync(leadSourceExpenseId, leadSourceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Lead Source Expense Retrieves a single Lead Source Expense for a given ID
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadSourceExpense)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<LeadSourceExpense>> GetLeadSourceExpenseWithHttpInfoAsync(string leadSourceExpenseId, string leadSourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'leadSourceExpenseId' is set
            if (leadSourceExpenseId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'leadSourceExpenseId' when calling LeadSourceExpensesApi->GetLeadSourceExpense");
            }

            // verify the required parameter 'leadSourceId' is set
            if (leadSourceId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'leadSourceId' when calling LeadSourceExpensesApi->GetLeadSourceExpense");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lead_source_expense_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(leadSourceExpenseId)); // path parameter
            localVarRequestOptions.PathParameters.Add("lead_source_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(leadSourceId)); // path parameter

            localVarRequestOptions.Operation = "LeadSourceExpensesApi.GetLeadSourceExpense";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LeadSourceExpense>("/v2/leadSources/{lead_source_id}/expenses/{lead_source_expense_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLeadSourceExpense", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Lead Source Expenses Retrieves a list of lead source expenses
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="filter">Filter to apply, allowed fields are:  - (String) &#x60;title&#x60; - (Long) &#x60;amount&#x60; - (String) &#x60;incurred_time&#x60; - (String) &#x60;create_time&#x60; - (String) &#x60;update_time&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;amount%3D%3D2500&#x60; - &#x60;filter&#x3D;incurred_time%3D%3D2024-12-22T01:00:00.000Z&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields:  - &#x60;title&#x60; - &#x60;amount&#x60; - &#x60;incurred_time&#x60; - &#x60;create_time&#x60; - &#x60;update_time&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListLeadSourceExpensesResponse</returns>
        public ListLeadSourceExpensesResponse ListLeadSourceExpenses(string leadSourceId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ListLeadSourceExpensesResponse> localVarResponse = ListLeadSourceExpensesWithHttpInfo(leadSourceId, filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Lead Source Expenses Retrieves a list of lead source expenses
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="filter">Filter to apply, allowed fields are:  - (String) &#x60;title&#x60; - (Long) &#x60;amount&#x60; - (String) &#x60;incurred_time&#x60; - (String) &#x60;create_time&#x60; - (String) &#x60;update_time&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;amount%3D%3D2500&#x60; - &#x60;filter&#x3D;incurred_time%3D%3D2024-12-22T01:00:00.000Z&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields:  - &#x60;title&#x60; - &#x60;amount&#x60; - &#x60;incurred_time&#x60; - &#x60;create_time&#x60; - &#x60;update_time&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListLeadSourceExpensesResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<ListLeadSourceExpensesResponse> ListLeadSourceExpensesWithHttpInfo(string leadSourceId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            // verify the required parameter 'leadSourceId' is set
            if (leadSourceId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'leadSourceId' when calling LeadSourceExpensesApi->ListLeadSourceExpenses");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lead_source_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(leadSourceId)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "LeadSourceExpensesApi.ListLeadSourceExpenses";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListLeadSourceExpensesResponse>("/v2/leadSources/{lead_source_id}/expenses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLeadSourceExpenses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Lead Source Expenses Retrieves a list of lead source expenses
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="filter">Filter to apply, allowed fields are:  - (String) &#x60;title&#x60; - (Long) &#x60;amount&#x60; - (String) &#x60;incurred_time&#x60; - (String) &#x60;create_time&#x60; - (String) &#x60;update_time&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;amount%3D%3D2500&#x60; - &#x60;filter&#x3D;incurred_time%3D%3D2024-12-22T01:00:00.000Z&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields:  - &#x60;title&#x60; - &#x60;amount&#x60; - &#x60;incurred_time&#x60; - &#x60;create_time&#x60; - &#x60;update_time&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListLeadSourceExpensesResponse</returns>
        public async System.Threading.Tasks.Task<ListLeadSourceExpensesResponse> ListLeadSourceExpensesAsync(string leadSourceId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<ListLeadSourceExpensesResponse> localVarResponse = await ListLeadSourceExpensesWithHttpInfoAsync(leadSourceId, filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Lead Source Expenses Retrieves a list of lead source expenses
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="filter">Filter to apply, allowed fields are:  - (String) &#x60;title&#x60; - (Long) &#x60;amount&#x60; - (String) &#x60;incurred_time&#x60; - (String) &#x60;create_time&#x60; - (String) &#x60;update_time&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;amount%3D%3D2500&#x60; - &#x60;filter&#x3D;incurred_time%3D%3D2024-12-22T01:00:00.000Z&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields:  - &#x60;title&#x60; - &#x60;amount&#x60; - &#x60;incurred_time&#x60; - &#x60;create_time&#x60; - &#x60;update_time&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListLeadSourceExpensesResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ListLeadSourceExpensesResponse>> ListLeadSourceExpensesWithHttpInfoAsync(string leadSourceId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'leadSourceId' is set
            if (leadSourceId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'leadSourceId' when calling LeadSourceExpensesApi->ListLeadSourceExpenses");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lead_source_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(leadSourceId)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "LeadSourceExpensesApi.ListLeadSourceExpenses";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListLeadSourceExpensesResponse>("/v2/leadSources/{lead_source_id}/expenses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLeadSourceExpenses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Lead Source Expense Updates a new Lead Source Expense
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="updateLeadSourceExpenseRequest">The request object to update a lead source expense</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadSourceExpense</returns>
        public LeadSourceExpense UpdateLeadSourceExpense(string leadSourceExpenseId, string leadSourceId, UpdateLeadSourceExpenseRequest updateLeadSourceExpenseRequest, List<string>? updateMask = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<LeadSourceExpense> localVarResponse = UpdateLeadSourceExpenseWithHttpInfo(leadSourceExpenseId, leadSourceId, updateLeadSourceExpenseRequest, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Lead Source Expense Updates a new Lead Source Expense
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="updateLeadSourceExpenseRequest">The request object to update a lead source expense</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadSourceExpense</returns>
        public Keap.Core.V2.Client.ApiResponse<LeadSourceExpense> UpdateLeadSourceExpenseWithHttpInfo(string leadSourceExpenseId, string leadSourceId, UpdateLeadSourceExpenseRequest updateLeadSourceExpenseRequest, List<string>? updateMask = default, int operationIndex = 0)
        {
            // verify the required parameter 'leadSourceExpenseId' is set
            if (leadSourceExpenseId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'leadSourceExpenseId' when calling LeadSourceExpensesApi->UpdateLeadSourceExpense");
            }

            // verify the required parameter 'leadSourceId' is set
            if (leadSourceId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'leadSourceId' when calling LeadSourceExpensesApi->UpdateLeadSourceExpense");
            }

            // verify the required parameter 'updateLeadSourceExpenseRequest' is set
            if (updateLeadSourceExpenseRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateLeadSourceExpenseRequest' when calling LeadSourceExpensesApi->UpdateLeadSourceExpense");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lead_source_expense_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(leadSourceExpenseId)); // path parameter
            localVarRequestOptions.PathParameters.Add("lead_source_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(leadSourceId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateLeadSourceExpenseRequest;

            localVarRequestOptions.Operation = "LeadSourceExpensesApi.UpdateLeadSourceExpense";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<LeadSourceExpense>("/v2/leadSources/{lead_source_id}/expenses/{lead_source_expense_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLeadSourceExpense", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Lead Source Expense Updates a new Lead Source Expense
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="updateLeadSourceExpenseRequest">The request object to update a lead source expense</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadSourceExpense</returns>
        public async System.Threading.Tasks.Task<LeadSourceExpense> UpdateLeadSourceExpenseAsync(string leadSourceExpenseId, string leadSourceId, UpdateLeadSourceExpenseRequest updateLeadSourceExpenseRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<LeadSourceExpense> localVarResponse = await UpdateLeadSourceExpenseWithHttpInfoAsync(leadSourceExpenseId, leadSourceId, updateLeadSourceExpenseRequest, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Lead Source Expense Updates a new Lead Source Expense
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadSourceExpenseId">The ID of a lead source expense</param>
        /// <param name="leadSourceId">The ID of the lead source this expense belongs to</param>
        /// <param name="updateLeadSourceExpenseRequest">The request object to update a lead source expense</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadSourceExpense)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<LeadSourceExpense>> UpdateLeadSourceExpenseWithHttpInfoAsync(string leadSourceExpenseId, string leadSourceId, UpdateLeadSourceExpenseRequest updateLeadSourceExpenseRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'leadSourceExpenseId' is set
            if (leadSourceExpenseId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'leadSourceExpenseId' when calling LeadSourceExpensesApi->UpdateLeadSourceExpense");
            }

            // verify the required parameter 'leadSourceId' is set
            if (leadSourceId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'leadSourceId' when calling LeadSourceExpensesApi->UpdateLeadSourceExpense");
            }

            // verify the required parameter 'updateLeadSourceExpenseRequest' is set
            if (updateLeadSourceExpenseRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateLeadSourceExpenseRequest' when calling LeadSourceExpensesApi->UpdateLeadSourceExpense");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lead_source_expense_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(leadSourceExpenseId)); // path parameter
            localVarRequestOptions.PathParameters.Add("lead_source_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(leadSourceId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateLeadSourceExpenseRequest;

            localVarRequestOptions.Operation = "LeadSourceExpensesApi.UpdateLeadSourceExpense";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<LeadSourceExpense>("/v2/leadSources/{lead_source_id}/expenses/{lead_source_expense_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLeadSourceExpense", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
