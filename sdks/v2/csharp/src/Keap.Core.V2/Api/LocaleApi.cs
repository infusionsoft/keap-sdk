/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.848026-hf-202508251610
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Keap.Core.V2.Client;
using Keap.Core.V2.Client.Auth;
using Keap.Core.V2.Model;

namespace Keap.Core.V2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocaleApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Country
        /// </summary>
        /// <remarks>
        /// Gets a country by its code or name
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The ISO 3166-2 alpha-2 code, alpha-3 code, or name of the country to be retrieved</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Country</returns>
        Country GetCountryByCode(string countryCode, int operationIndex = 0);

        /// <summary>
        /// Get Country
        /// </summary>
        /// <remarks>
        /// Gets a country by its code or name
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The ISO 3166-2 alpha-2 code, alpha-3 code, or name of the country to be retrieved</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Country</returns>
        ApiResponse<Country> GetCountryByCodeWithHttpInfo(string countryCode, int operationIndex = 0);
        /// <summary>
        /// Get Province
        /// </summary>
        /// <remarks>
        /// Get a province by its code or name
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The ISO 3166-1 alpha-2 code, alpha-3 code, or name of the country to be retrieved</param>
        /// <param name="provinceCode">The ISO 3166-2 code or name of the province to be retrieved</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Province</returns>
        Province GetProvinceByCode(string countryCode, string provinceCode, int operationIndex = 0);

        /// <summary>
        /// Get Province
        /// </summary>
        /// <remarks>
        /// Get a province by its code or name
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The ISO 3166-1 alpha-2 code, alpha-3 code, or name of the country to be retrieved</param>
        /// <param name="provinceCode">The ISO 3166-2 code or name of the province to be retrieved</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Province</returns>
        ApiResponse<Province> GetProvinceByCodeWithHttpInfo(string countryCode, string provinceCode, int operationIndex = 0);
        /// <summary>
        /// List Countries
        /// </summary>
        /// <remarks>
        /// Retrieves a list of countries
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListCountriesResponse</returns>
        ListCountriesResponse ListCountries(int operationIndex = 0);

        /// <summary>
        /// List Countries
        /// </summary>
        /// <remarks>
        /// Retrieves a list of countries
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListCountriesResponse</returns>
        ApiResponse<ListCountriesResponse> ListCountriesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// List a Country&#39;s Province
        /// </summary>
        /// <remarks>
        /// Retrieves a list of provinces for a given country
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListProvincesResponse</returns>
        ListProvincesResponse ListProvincesForCountry(string countryCode, int operationIndex = 0);

        /// <summary>
        /// List a Country&#39;s Province
        /// </summary>
        /// <remarks>
        /// Retrieves a list of provinces for a given country
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListProvincesResponse</returns>
        ApiResponse<ListProvincesResponse> ListProvincesForCountryWithHttpInfo(string countryCode, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocaleApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Country
        /// </summary>
        /// <remarks>
        /// Gets a country by its code or name
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The ISO 3166-2 alpha-2 code, alpha-3 code, or name of the country to be retrieved</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Country</returns>
        System.Threading.Tasks.Task<Country> GetCountryByCodeAsync(string countryCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Country
        /// </summary>
        /// <remarks>
        /// Gets a country by its code or name
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The ISO 3166-2 alpha-2 code, alpha-3 code, or name of the country to be retrieved</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Country)</returns>
        System.Threading.Tasks.Task<ApiResponse<Country>> GetCountryByCodeWithHttpInfoAsync(string countryCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Province
        /// </summary>
        /// <remarks>
        /// Get a province by its code or name
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The ISO 3166-1 alpha-2 code, alpha-3 code, or name of the country to be retrieved</param>
        /// <param name="provinceCode">The ISO 3166-2 code or name of the province to be retrieved</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Province</returns>
        System.Threading.Tasks.Task<Province> GetProvinceByCodeAsync(string countryCode, string provinceCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Province
        /// </summary>
        /// <remarks>
        /// Get a province by its code or name
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The ISO 3166-1 alpha-2 code, alpha-3 code, or name of the country to be retrieved</param>
        /// <param name="provinceCode">The ISO 3166-2 code or name of the province to be retrieved</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Province)</returns>
        System.Threading.Tasks.Task<ApiResponse<Province>> GetProvinceByCodeWithHttpInfoAsync(string countryCode, string provinceCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Countries
        /// </summary>
        /// <remarks>
        /// Retrieves a list of countries
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCountriesResponse</returns>
        System.Threading.Tasks.Task<ListCountriesResponse> ListCountriesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Countries
        /// </summary>
        /// <remarks>
        /// Retrieves a list of countries
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCountriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCountriesResponse>> ListCountriesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List a Country&#39;s Province
        /// </summary>
        /// <remarks>
        /// Retrieves a list of provinces for a given country
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListProvincesResponse</returns>
        System.Threading.Tasks.Task<ListProvincesResponse> ListProvincesForCountryAsync(string countryCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List a Country&#39;s Province
        /// </summary>
        /// <remarks>
        /// Retrieves a list of provinces for a given country
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListProvincesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListProvincesResponse>> ListProvincesForCountryWithHttpInfoAsync(string countryCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocaleApi : ILocaleApiSync, ILocaleApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LocaleApi : ILocaleApi
    {
        private Keap.Core.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LocaleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LocaleApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocaleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LocaleApi(string basePath)
        {
            this.Configuration = Keap.Core.V2.Client.Configuration.MergeConfigurations(
                Keap.Core.V2.Client.GlobalConfiguration.Instance,
                new Keap.Core.V2.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocaleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LocaleApi(Keap.Core.V2.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Keap.Core.V2.Client.Configuration.MergeConfigurations(
                Keap.Core.V2.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocaleApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LocaleApi(Keap.Core.V2.Client.ISynchronousClient client, Keap.Core.V2.Client.IAsynchronousClient asyncClient, Keap.Core.V2.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Keap.Core.V2.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Keap.Core.V2.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Keap.Core.V2.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Keap.Core.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Country Gets a country by its code or name
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The ISO 3166-2 alpha-2 code, alpha-3 code, or name of the country to be retrieved</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Country</returns>
        public Country GetCountryByCode(string countryCode, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<Country> localVarResponse = GetCountryByCodeWithHttpInfo(countryCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Country Gets a country by its code or name
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The ISO 3166-2 alpha-2 code, alpha-3 code, or name of the country to be retrieved</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Country</returns>
        public Keap.Core.V2.Client.ApiResponse<Country> GetCountryByCodeWithHttpInfo(string countryCode, int operationIndex = 0)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'countryCode' when calling LocaleApi->GetCountryByCode");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("country_code", Keap.Core.V2.Client.ClientUtils.ParameterToString(countryCode)); // path parameter

            localVarRequestOptions.Operation = "LocaleApi.GetCountryByCode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Country>("/v2/locales/countries/{country_code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCountryByCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Country Gets a country by its code or name
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The ISO 3166-2 alpha-2 code, alpha-3 code, or name of the country to be retrieved</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Country</returns>
        public async System.Threading.Tasks.Task<Country> GetCountryByCodeAsync(string countryCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<Country> localVarResponse = await GetCountryByCodeWithHttpInfoAsync(countryCode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Country Gets a country by its code or name
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The ISO 3166-2 alpha-2 code, alpha-3 code, or name of the country to be retrieved</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Country)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Country>> GetCountryByCodeWithHttpInfoAsync(string countryCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'countryCode' when calling LocaleApi->GetCountryByCode");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("country_code", Keap.Core.V2.Client.ClientUtils.ParameterToString(countryCode)); // path parameter

            localVarRequestOptions.Operation = "LocaleApi.GetCountryByCode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Country>("/v2/locales/countries/{country_code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCountryByCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Province Get a province by its code or name
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The ISO 3166-1 alpha-2 code, alpha-3 code, or name of the country to be retrieved</param>
        /// <param name="provinceCode">The ISO 3166-2 code or name of the province to be retrieved</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Province</returns>
        public Province GetProvinceByCode(string countryCode, string provinceCode, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<Province> localVarResponse = GetProvinceByCodeWithHttpInfo(countryCode, provinceCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Province Get a province by its code or name
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The ISO 3166-1 alpha-2 code, alpha-3 code, or name of the country to be retrieved</param>
        /// <param name="provinceCode">The ISO 3166-2 code or name of the province to be retrieved</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Province</returns>
        public Keap.Core.V2.Client.ApiResponse<Province> GetProvinceByCodeWithHttpInfo(string countryCode, string provinceCode, int operationIndex = 0)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'countryCode' when calling LocaleApi->GetProvinceByCode");
            }

            // verify the required parameter 'provinceCode' is set
            if (provinceCode == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'provinceCode' when calling LocaleApi->GetProvinceByCode");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("country_code", Keap.Core.V2.Client.ClientUtils.ParameterToString(countryCode)); // path parameter
            localVarRequestOptions.PathParameters.Add("province_code", Keap.Core.V2.Client.ClientUtils.ParameterToString(provinceCode)); // path parameter

            localVarRequestOptions.Operation = "LocaleApi.GetProvinceByCode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Province>("/v2/locales/countries/{country_code}/provinces/{province_code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProvinceByCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Province Get a province by its code or name
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The ISO 3166-1 alpha-2 code, alpha-3 code, or name of the country to be retrieved</param>
        /// <param name="provinceCode">The ISO 3166-2 code or name of the province to be retrieved</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Province</returns>
        public async System.Threading.Tasks.Task<Province> GetProvinceByCodeAsync(string countryCode, string provinceCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<Province> localVarResponse = await GetProvinceByCodeWithHttpInfoAsync(countryCode, provinceCode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Province Get a province by its code or name
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The ISO 3166-1 alpha-2 code, alpha-3 code, or name of the country to be retrieved</param>
        /// <param name="provinceCode">The ISO 3166-2 code or name of the province to be retrieved</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Province)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Province>> GetProvinceByCodeWithHttpInfoAsync(string countryCode, string provinceCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'countryCode' when calling LocaleApi->GetProvinceByCode");
            }

            // verify the required parameter 'provinceCode' is set
            if (provinceCode == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'provinceCode' when calling LocaleApi->GetProvinceByCode");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("country_code", Keap.Core.V2.Client.ClientUtils.ParameterToString(countryCode)); // path parameter
            localVarRequestOptions.PathParameters.Add("province_code", Keap.Core.V2.Client.ClientUtils.ParameterToString(provinceCode)); // path parameter

            localVarRequestOptions.Operation = "LocaleApi.GetProvinceByCode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Province>("/v2/locales/countries/{country_code}/provinces/{province_code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProvinceByCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Countries Retrieves a list of countries
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListCountriesResponse</returns>
        public ListCountriesResponse ListCountries(int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ListCountriesResponse> localVarResponse = ListCountriesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Countries Retrieves a list of countries
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListCountriesResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<ListCountriesResponse> ListCountriesWithHttpInfo(int operationIndex = 0)
        {
            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "LocaleApi.ListCountries";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListCountriesResponse>("/v2/locales/countries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCountries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Countries Retrieves a list of countries
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCountriesResponse</returns>
        public async System.Threading.Tasks.Task<ListCountriesResponse> ListCountriesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<ListCountriesResponse> localVarResponse = await ListCountriesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Countries Retrieves a list of countries
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCountriesResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ListCountriesResponse>> ListCountriesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "LocaleApi.ListCountries";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListCountriesResponse>("/v2/locales/countries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCountries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a Country&#39;s Province Retrieves a list of provinces for a given country
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListProvincesResponse</returns>
        public ListProvincesResponse ListProvincesForCountry(string countryCode, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ListProvincesResponse> localVarResponse = ListProvincesForCountryWithHttpInfo(countryCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a Country&#39;s Province Retrieves a list of provinces for a given country
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListProvincesResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<ListProvincesResponse> ListProvincesForCountryWithHttpInfo(string countryCode, int operationIndex = 0)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'countryCode' when calling LocaleApi->ListProvincesForCountry");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("country_code", Keap.Core.V2.Client.ClientUtils.ParameterToString(countryCode)); // path parameter

            localVarRequestOptions.Operation = "LocaleApi.ListProvincesForCountry";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListProvincesResponse>("/v2/locales/countries/{country_code}/provinces", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProvincesForCountry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a Country&#39;s Province Retrieves a list of provinces for a given country
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListProvincesResponse</returns>
        public async System.Threading.Tasks.Task<ListProvincesResponse> ListProvincesForCountryAsync(string countryCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<ListProvincesResponse> localVarResponse = await ListProvincesForCountryWithHttpInfoAsync(countryCode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a Country&#39;s Province Retrieves a list of provinces for a given country
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListProvincesResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ListProvincesResponse>> ListProvincesForCountryWithHttpInfoAsync(string countryCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'countryCode' when calling LocaleApi->ListProvincesForCountry");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("country_code", Keap.Core.V2.Client.ClientUtils.ParameterToString(countryCode)); // path parameter

            localVarRequestOptions.Operation = "LocaleApi.ListProvincesForCountry";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListProvincesResponse>("/v2/locales/countries/{country_code}/provinces", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProvincesForCountry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
