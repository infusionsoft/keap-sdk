/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.865894-hf-202510091441
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Keap.Core.V2.Client;
using Keap.Core.V2.Client.Auth;
using Keap.Core.V2.Model;

namespace Keap.Core.V2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductInterestBundlesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Product Interest in an existing Bundle
        /// </summary>
        /// <remarks>
        /// Creates a new Product Interest in an existing Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="addProductInterestRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductInterest</returns>
        ProductInterest AddProductInterest(string id, AddProductInterestRequest addProductInterestRequest, int operationIndex = 0);

        /// <summary>
        /// Create a Product Interest in an existing Bundle
        /// </summary>
        /// <remarks>
        /// Creates a new Product Interest in an existing Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="addProductInterestRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductInterest</returns>
        ApiResponse<ProductInterest> AddProductInterestWithHttpInfo(string id, AddProductInterestRequest addProductInterestRequest, int operationIndex = 0);
        /// <summary>
        /// Create a Product Interest Bundle
        /// </summary>
        /// <remarks>
        /// Creates a new Product Interest Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductInterestBundleRequest">createProductInterestBundleRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductInterestBundle</returns>
        ProductInterestBundle CreateProductInterestBundle(CreateProductInterestBundleRequest createProductInterestBundleRequest, int operationIndex = 0);

        /// <summary>
        /// Create a Product Interest Bundle
        /// </summary>
        /// <remarks>
        /// Creates a new Product Interest Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductInterestBundleRequest">createProductInterestBundleRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductInterestBundle</returns>
        ApiResponse<ProductInterestBundle> CreateProductInterestBundleWithHttpInfo(CreateProductInterestBundleRequest createProductInterestBundleRequest, int operationIndex = 0);
        /// <summary>
        /// Delete a Product Interest Bundle
        /// </summary>
        /// <remarks>
        /// Deletes an existing Product Interest Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteProductInterestBundle(string id, int operationIndex = 0);

        /// <summary>
        /// Delete a Product Interest Bundle
        /// </summary>
        /// <remarks>
        /// Deletes an existing Product Interest Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProductInterestBundleWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get a Product Interest Bundle
        /// </summary>
        /// <remarks>
        /// Gets a single Product Interest Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductInterestBundle</returns>
        ProductInterestBundle GetProductInterestBundle(string id, int operationIndex = 0);

        /// <summary>
        /// Get a Product Interest Bundle
        /// </summary>
        /// <remarks>
        /// Gets a single Product Interest Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductInterestBundle</returns>
        ApiResponse<ProductInterestBundle> GetProductInterestBundleWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// List Product Interest Bundles
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Product Interest Bundles
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListProductInterestBundleResponse</returns>
        ListProductInterestBundleResponse ListProductInterestBundles(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);

        /// <summary>
        /// List Product Interest Bundles
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Product Interest Bundles
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListProductInterestBundleResponse</returns>
        ApiResponse<ListProductInterestBundleResponse> ListProductInterestBundlesWithHttpInfo(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);
        /// <summary>
        /// Delete a Product Interest from an existing Bundle
        /// </summary>
        /// <remarks>
        /// Deletes an existing Product Interest from an existing Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="interestId">interest_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveProductInterest(string id, string interestId, int operationIndex = 0);

        /// <summary>
        /// Delete a Product Interest from an existing Bundle
        /// </summary>
        /// <remarks>
        /// Deletes an existing Product Interest from an existing Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="interestId">interest_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveProductInterestWithHttpInfo(string id, string interestId, int operationIndex = 0);
        /// <summary>
        /// Update a Product Interest in an existing Bundle
        /// </summary>
        /// <remarks>
        /// Updates an existing Product Interest in an existing Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="interestId">interest_id</param>
        /// <param name="updateProductInterestRequest">updateProductInterestRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductInterest</returns>
        ProductInterest UpdateProductInterest(string id, string interestId, UpdateProductInterestRequest updateProductInterestRequest, List<string>? updateMask = default, int operationIndex = 0);

        /// <summary>
        /// Update a Product Interest in an existing Bundle
        /// </summary>
        /// <remarks>
        /// Updates an existing Product Interest in an existing Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="interestId">interest_id</param>
        /// <param name="updateProductInterestRequest">updateProductInterestRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductInterest</returns>
        ApiResponse<ProductInterest> UpdateProductInterestWithHttpInfo(string id, string interestId, UpdateProductInterestRequest updateProductInterestRequest, List<string>? updateMask = default, int operationIndex = 0);
        /// <summary>
        /// Update a Product Interest Bundle
        /// </summary>
        /// <remarks>
        /// Updates an existing Product Interest Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateProductInterestBundleRequest">updateProductInterestBundleRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductInterestBundle</returns>
        ProductInterestBundle UpdateProductInterestBundle(string id, UpdateProductInterestBundleRequest updateProductInterestBundleRequest, List<string>? updateMask = default, int operationIndex = 0);

        /// <summary>
        /// Update a Product Interest Bundle
        /// </summary>
        /// <remarks>
        /// Updates an existing Product Interest Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateProductInterestBundleRequest">updateProductInterestBundleRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductInterestBundle</returns>
        ApiResponse<ProductInterestBundle> UpdateProductInterestBundleWithHttpInfo(string id, UpdateProductInterestBundleRequest updateProductInterestBundleRequest, List<string>? updateMask = default, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductInterestBundlesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a Product Interest in an existing Bundle
        /// </summary>
        /// <remarks>
        /// Creates a new Product Interest in an existing Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="addProductInterestRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductInterest</returns>
        System.Threading.Tasks.Task<ProductInterest> AddProductInterestAsync(string id, AddProductInterestRequest addProductInterestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a Product Interest in an existing Bundle
        /// </summary>
        /// <remarks>
        /// Creates a new Product Interest in an existing Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="addProductInterestRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductInterest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductInterest>> AddProductInterestWithHttpInfoAsync(string id, AddProductInterestRequest addProductInterestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create a Product Interest Bundle
        /// </summary>
        /// <remarks>
        /// Creates a new Product Interest Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductInterestBundleRequest">createProductInterestBundleRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductInterestBundle</returns>
        System.Threading.Tasks.Task<ProductInterestBundle> CreateProductInterestBundleAsync(CreateProductInterestBundleRequest createProductInterestBundleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a Product Interest Bundle
        /// </summary>
        /// <remarks>
        /// Creates a new Product Interest Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductInterestBundleRequest">createProductInterestBundleRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductInterestBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductInterestBundle>> CreateProductInterestBundleWithHttpInfoAsync(CreateProductInterestBundleRequest createProductInterestBundleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete a Product Interest Bundle
        /// </summary>
        /// <remarks>
        /// Deletes an existing Product Interest Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProductInterestBundleAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a Product Interest Bundle
        /// </summary>
        /// <remarks>
        /// Deletes an existing Product Interest Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductInterestBundleWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get a Product Interest Bundle
        /// </summary>
        /// <remarks>
        /// Gets a single Product Interest Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductInterestBundle</returns>
        System.Threading.Tasks.Task<ProductInterestBundle> GetProductInterestBundleAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a Product Interest Bundle
        /// </summary>
        /// <remarks>
        /// Gets a single Product Interest Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductInterestBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductInterestBundle>> GetProductInterestBundleWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Product Interest Bundles
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Product Interest Bundles
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListProductInterestBundleResponse</returns>
        System.Threading.Tasks.Task<ListProductInterestBundleResponse> ListProductInterestBundlesAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Product Interest Bundles
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Product Interest Bundles
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListProductInterestBundleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListProductInterestBundleResponse>> ListProductInterestBundlesWithHttpInfoAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete a Product Interest from an existing Bundle
        /// </summary>
        /// <remarks>
        /// Deletes an existing Product Interest from an existing Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="interestId">interest_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveProductInterestAsync(string id, string interestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a Product Interest from an existing Bundle
        /// </summary>
        /// <remarks>
        /// Deletes an existing Product Interest from an existing Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="interestId">interest_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveProductInterestWithHttpInfoAsync(string id, string interestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update a Product Interest in an existing Bundle
        /// </summary>
        /// <remarks>
        /// Updates an existing Product Interest in an existing Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="interestId">interest_id</param>
        /// <param name="updateProductInterestRequest">updateProductInterestRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductInterest</returns>
        System.Threading.Tasks.Task<ProductInterest> UpdateProductInterestAsync(string id, string interestId, UpdateProductInterestRequest updateProductInterestRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a Product Interest in an existing Bundle
        /// </summary>
        /// <remarks>
        /// Updates an existing Product Interest in an existing Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="interestId">interest_id</param>
        /// <param name="updateProductInterestRequest">updateProductInterestRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductInterest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductInterest>> UpdateProductInterestWithHttpInfoAsync(string id, string interestId, UpdateProductInterestRequest updateProductInterestRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update a Product Interest Bundle
        /// </summary>
        /// <remarks>
        /// Updates an existing Product Interest Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateProductInterestBundleRequest">updateProductInterestBundleRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductInterestBundle</returns>
        System.Threading.Tasks.Task<ProductInterestBundle> UpdateProductInterestBundleAsync(string id, UpdateProductInterestBundleRequest updateProductInterestBundleRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a Product Interest Bundle
        /// </summary>
        /// <remarks>
        /// Updates an existing Product Interest Bundle.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateProductInterestBundleRequest">updateProductInterestBundleRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductInterestBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductInterestBundle>> UpdateProductInterestBundleWithHttpInfoAsync(string id, UpdateProductInterestBundleRequest updateProductInterestBundleRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductInterestBundlesApi : IProductInterestBundlesApiSync, IProductInterestBundlesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductInterestBundlesApi : IProductInterestBundlesApi
    {
        private Keap.Core.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductInterestBundlesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductInterestBundlesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductInterestBundlesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductInterestBundlesApi(string basePath)
        {
            this.Configuration = Keap.Core.V2.Client.Configuration.MergeConfigurations(
                Keap.Core.V2.Client.GlobalConfiguration.Instance,
                new Keap.Core.V2.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductInterestBundlesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductInterestBundlesApi(Keap.Core.V2.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Keap.Core.V2.Client.Configuration.MergeConfigurations(
                Keap.Core.V2.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductInterestBundlesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProductInterestBundlesApi(Keap.Core.V2.Client.ISynchronousClient client, Keap.Core.V2.Client.IAsynchronousClient asyncClient, Keap.Core.V2.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Keap.Core.V2.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Keap.Core.V2.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Keap.Core.V2.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Keap.Core.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a Product Interest in an existing Bundle Creates a new Product Interest in an existing Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="addProductInterestRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductInterest</returns>
        public ProductInterest AddProductInterest(string id, AddProductInterestRequest addProductInterestRequest, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ProductInterest> localVarResponse = AddProductInterestWithHttpInfo(id, addProductInterestRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Product Interest in an existing Bundle Creates a new Product Interest in an existing Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="addProductInterestRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductInterest</returns>
        public Keap.Core.V2.Client.ApiResponse<ProductInterest> AddProductInterestWithHttpInfo(string id, AddProductInterestRequest addProductInterestRequest, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling ProductInterestBundlesApi->AddProductInterest");
            }

            // verify the required parameter 'addProductInterestRequest' is set
            if (addProductInterestRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'addProductInterestRequest' when calling ProductInterestBundlesApi->AddProductInterest");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = addProductInterestRequest;

            localVarRequestOptions.Operation = "ProductInterestBundlesApi.AddProductInterest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductInterest>("/v2/productInterestBundles/{id}/interests", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddProductInterest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Product Interest in an existing Bundle Creates a new Product Interest in an existing Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="addProductInterestRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductInterest</returns>
        public async System.Threading.Tasks.Task<ProductInterest> AddProductInterestAsync(string id, AddProductInterestRequest addProductInterestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<ProductInterest> localVarResponse = await AddProductInterestWithHttpInfoAsync(id, addProductInterestRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Product Interest in an existing Bundle Creates a new Product Interest in an existing Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="addProductInterestRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductInterest)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ProductInterest>> AddProductInterestWithHttpInfoAsync(string id, AddProductInterestRequest addProductInterestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling ProductInterestBundlesApi->AddProductInterest");
            }

            // verify the required parameter 'addProductInterestRequest' is set
            if (addProductInterestRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'addProductInterestRequest' when calling ProductInterestBundlesApi->AddProductInterest");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = addProductInterestRequest;

            localVarRequestOptions.Operation = "ProductInterestBundlesApi.AddProductInterest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductInterest>("/v2/productInterestBundles/{id}/interests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddProductInterest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Product Interest Bundle Creates a new Product Interest Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductInterestBundleRequest">createProductInterestBundleRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductInterestBundle</returns>
        public ProductInterestBundle CreateProductInterestBundle(CreateProductInterestBundleRequest createProductInterestBundleRequest, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ProductInterestBundle> localVarResponse = CreateProductInterestBundleWithHttpInfo(createProductInterestBundleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Product Interest Bundle Creates a new Product Interest Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductInterestBundleRequest">createProductInterestBundleRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductInterestBundle</returns>
        public Keap.Core.V2.Client.ApiResponse<ProductInterestBundle> CreateProductInterestBundleWithHttpInfo(CreateProductInterestBundleRequest createProductInterestBundleRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createProductInterestBundleRequest' is set
            if (createProductInterestBundleRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'createProductInterestBundleRequest' when calling ProductInterestBundlesApi->CreateProductInterestBundle");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createProductInterestBundleRequest;

            localVarRequestOptions.Operation = "ProductInterestBundlesApi.CreateProductInterestBundle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductInterestBundle>("/v2/productInterestBundles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductInterestBundle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Product Interest Bundle Creates a new Product Interest Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductInterestBundleRequest">createProductInterestBundleRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductInterestBundle</returns>
        public async System.Threading.Tasks.Task<ProductInterestBundle> CreateProductInterestBundleAsync(CreateProductInterestBundleRequest createProductInterestBundleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<ProductInterestBundle> localVarResponse = await CreateProductInterestBundleWithHttpInfoAsync(createProductInterestBundleRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Product Interest Bundle Creates a new Product Interest Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductInterestBundleRequest">createProductInterestBundleRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductInterestBundle)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ProductInterestBundle>> CreateProductInterestBundleWithHttpInfoAsync(CreateProductInterestBundleRequest createProductInterestBundleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createProductInterestBundleRequest' is set
            if (createProductInterestBundleRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'createProductInterestBundleRequest' when calling ProductInterestBundlesApi->CreateProductInterestBundle");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createProductInterestBundleRequest;

            localVarRequestOptions.Operation = "ProductInterestBundlesApi.CreateProductInterestBundle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductInterestBundle>("/v2/productInterestBundles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductInterestBundle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Product Interest Bundle Deletes an existing Product Interest Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteProductInterestBundle(string id, int operationIndex = 0)
        {
            DeleteProductInterestBundleWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a Product Interest Bundle Deletes an existing Product Interest Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Core.V2.Client.ApiResponse<Object> DeleteProductInterestBundleWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling ProductInterestBundlesApi->DeleteProductInterestBundle");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ProductInterestBundlesApi.DeleteProductInterestBundle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/productInterestBundles/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductInterestBundle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Product Interest Bundle Deletes an existing Product Interest Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProductInterestBundleAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteProductInterestBundleWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Product Interest Bundle Deletes an existing Product Interest Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Object>> DeleteProductInterestBundleWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling ProductInterestBundlesApi->DeleteProductInterestBundle");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ProductInterestBundlesApi.DeleteProductInterestBundle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/productInterestBundles/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductInterestBundle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Product Interest Bundle Gets a single Product Interest Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductInterestBundle</returns>
        public ProductInterestBundle GetProductInterestBundle(string id, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ProductInterestBundle> localVarResponse = GetProductInterestBundleWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Product Interest Bundle Gets a single Product Interest Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductInterestBundle</returns>
        public Keap.Core.V2.Client.ApiResponse<ProductInterestBundle> GetProductInterestBundleWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling ProductInterestBundlesApi->GetProductInterestBundle");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ProductInterestBundlesApi.GetProductInterestBundle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductInterestBundle>("/v2/productInterestBundles/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductInterestBundle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Product Interest Bundle Gets a single Product Interest Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductInterestBundle</returns>
        public async System.Threading.Tasks.Task<ProductInterestBundle> GetProductInterestBundleAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<ProductInterestBundle> localVarResponse = await GetProductInterestBundleWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Product Interest Bundle Gets a single Product Interest Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductInterestBundle)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ProductInterestBundle>> GetProductInterestBundleWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling ProductInterestBundlesApi->GetProductInterestBundle");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ProductInterestBundlesApi.GetProductInterestBundle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductInterestBundle>("/v2/productInterestBundles/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductInterestBundle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Product Interest Bundles Retrieves a list of Product Interest Bundles
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListProductInterestBundleResponse</returns>
        public ListProductInterestBundleResponse ListProductInterestBundles(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ListProductInterestBundleResponse> localVarResponse = ListProductInterestBundlesWithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Product Interest Bundles Retrieves a list of Product Interest Bundles
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListProductInterestBundleResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<ListProductInterestBundleResponse> ListProductInterestBundlesWithHttpInfo(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "ProductInterestBundlesApi.ListProductInterestBundles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListProductInterestBundleResponse>("/v2/productInterestBundles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProductInterestBundles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Product Interest Bundles Retrieves a list of Product Interest Bundles
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListProductInterestBundleResponse</returns>
        public async System.Threading.Tasks.Task<ListProductInterestBundleResponse> ListProductInterestBundlesAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<ListProductInterestBundleResponse> localVarResponse = await ListProductInterestBundlesWithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Product Interest Bundles Retrieves a list of Product Interest Bundles
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListProductInterestBundleResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ListProductInterestBundleResponse>> ListProductInterestBundlesWithHttpInfoAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "ProductInterestBundlesApi.ListProductInterestBundles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListProductInterestBundleResponse>("/v2/productInterestBundles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProductInterestBundles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Product Interest from an existing Bundle Deletes an existing Product Interest from an existing Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="interestId">interest_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveProductInterest(string id, string interestId, int operationIndex = 0)
        {
            RemoveProductInterestWithHttpInfo(id, interestId);
        }

        /// <summary>
        /// Delete a Product Interest from an existing Bundle Deletes an existing Product Interest from an existing Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="interestId">interest_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Core.V2.Client.ApiResponse<Object> RemoveProductInterestWithHttpInfo(string id, string interestId, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling ProductInterestBundlesApi->RemoveProductInterest");
            }

            // verify the required parameter 'interestId' is set
            if (interestId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'interestId' when calling ProductInterestBundlesApi->RemoveProductInterest");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("interest_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(interestId)); // path parameter

            localVarRequestOptions.Operation = "ProductInterestBundlesApi.RemoveProductInterest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/productInterestBundles/{id}/interests/{interest_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveProductInterest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Product Interest from an existing Bundle Deletes an existing Product Interest from an existing Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="interestId">interest_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveProductInterestAsync(string id, string interestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await RemoveProductInterestWithHttpInfoAsync(id, interestId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Product Interest from an existing Bundle Deletes an existing Product Interest from an existing Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="interestId">interest_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Object>> RemoveProductInterestWithHttpInfoAsync(string id, string interestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling ProductInterestBundlesApi->RemoveProductInterest");
            }

            // verify the required parameter 'interestId' is set
            if (interestId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'interestId' when calling ProductInterestBundlesApi->RemoveProductInterest");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("interest_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(interestId)); // path parameter

            localVarRequestOptions.Operation = "ProductInterestBundlesApi.RemoveProductInterest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/productInterestBundles/{id}/interests/{interest_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveProductInterest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Product Interest in an existing Bundle Updates an existing Product Interest in an existing Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="interestId">interest_id</param>
        /// <param name="updateProductInterestRequest">updateProductInterestRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductInterest</returns>
        public ProductInterest UpdateProductInterest(string id, string interestId, UpdateProductInterestRequest updateProductInterestRequest, List<string>? updateMask = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ProductInterest> localVarResponse = UpdateProductInterestWithHttpInfo(id, interestId, updateProductInterestRequest, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Product Interest in an existing Bundle Updates an existing Product Interest in an existing Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="interestId">interest_id</param>
        /// <param name="updateProductInterestRequest">updateProductInterestRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductInterest</returns>
        public Keap.Core.V2.Client.ApiResponse<ProductInterest> UpdateProductInterestWithHttpInfo(string id, string interestId, UpdateProductInterestRequest updateProductInterestRequest, List<string>? updateMask = default, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling ProductInterestBundlesApi->UpdateProductInterest");
            }

            // verify the required parameter 'interestId' is set
            if (interestId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'interestId' when calling ProductInterestBundlesApi->UpdateProductInterest");
            }

            // verify the required parameter 'updateProductInterestRequest' is set
            if (updateProductInterestRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateProductInterestRequest' when calling ProductInterestBundlesApi->UpdateProductInterest");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("interest_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(interestId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateProductInterestRequest;

            localVarRequestOptions.Operation = "ProductInterestBundlesApi.UpdateProductInterest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<ProductInterest>("/v2/productInterestBundles/{id}/interests/{interest_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductInterest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Product Interest in an existing Bundle Updates an existing Product Interest in an existing Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="interestId">interest_id</param>
        /// <param name="updateProductInterestRequest">updateProductInterestRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductInterest</returns>
        public async System.Threading.Tasks.Task<ProductInterest> UpdateProductInterestAsync(string id, string interestId, UpdateProductInterestRequest updateProductInterestRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<ProductInterest> localVarResponse = await UpdateProductInterestWithHttpInfoAsync(id, interestId, updateProductInterestRequest, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Product Interest in an existing Bundle Updates an existing Product Interest in an existing Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="interestId">interest_id</param>
        /// <param name="updateProductInterestRequest">updateProductInterestRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductInterest)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ProductInterest>> UpdateProductInterestWithHttpInfoAsync(string id, string interestId, UpdateProductInterestRequest updateProductInterestRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling ProductInterestBundlesApi->UpdateProductInterest");
            }

            // verify the required parameter 'interestId' is set
            if (interestId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'interestId' when calling ProductInterestBundlesApi->UpdateProductInterest");
            }

            // verify the required parameter 'updateProductInterestRequest' is set
            if (updateProductInterestRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateProductInterestRequest' when calling ProductInterestBundlesApi->UpdateProductInterest");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("interest_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(interestId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateProductInterestRequest;

            localVarRequestOptions.Operation = "ProductInterestBundlesApi.UpdateProductInterest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ProductInterest>("/v2/productInterestBundles/{id}/interests/{interest_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductInterest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Product Interest Bundle Updates an existing Product Interest Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateProductInterestBundleRequest">updateProductInterestBundleRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductInterestBundle</returns>
        public ProductInterestBundle UpdateProductInterestBundle(string id, UpdateProductInterestBundleRequest updateProductInterestBundleRequest, List<string>? updateMask = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ProductInterestBundle> localVarResponse = UpdateProductInterestBundleWithHttpInfo(id, updateProductInterestBundleRequest, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Product Interest Bundle Updates an existing Product Interest Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateProductInterestBundleRequest">updateProductInterestBundleRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductInterestBundle</returns>
        public Keap.Core.V2.Client.ApiResponse<ProductInterestBundle> UpdateProductInterestBundleWithHttpInfo(string id, UpdateProductInterestBundleRequest updateProductInterestBundleRequest, List<string>? updateMask = default, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling ProductInterestBundlesApi->UpdateProductInterestBundle");
            }

            // verify the required parameter 'updateProductInterestBundleRequest' is set
            if (updateProductInterestBundleRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateProductInterestBundleRequest' when calling ProductInterestBundlesApi->UpdateProductInterestBundle");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateProductInterestBundleRequest;

            localVarRequestOptions.Operation = "ProductInterestBundlesApi.UpdateProductInterestBundle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<ProductInterestBundle>("/v2/productInterestBundles/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductInterestBundle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Product Interest Bundle Updates an existing Product Interest Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateProductInterestBundleRequest">updateProductInterestBundleRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductInterestBundle</returns>
        public async System.Threading.Tasks.Task<ProductInterestBundle> UpdateProductInterestBundleAsync(string id, UpdateProductInterestBundleRequest updateProductInterestBundleRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<ProductInterestBundle> localVarResponse = await UpdateProductInterestBundleWithHttpInfoAsync(id, updateProductInterestBundleRequest, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Product Interest Bundle Updates an existing Product Interest Bundle.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateProductInterestBundleRequest">updateProductInterestBundleRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductInterestBundle)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ProductInterestBundle>> UpdateProductInterestBundleWithHttpInfoAsync(string id, UpdateProductInterestBundleRequest updateProductInterestBundleRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling ProductInterestBundlesApi->UpdateProductInterestBundle");
            }

            // verify the required parameter 'updateProductInterestBundleRequest' is set
            if (updateProductInterestBundleRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateProductInterestBundleRequest' when calling ProductInterestBundlesApi->UpdateProductInterestBundle");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateProductInterestBundleRequest;

            localVarRequestOptions.Operation = "ProductInterestBundlesApi.UpdateProductInterestBundle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ProductInterestBundle>("/v2/productInterestBundles/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductInterestBundle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
