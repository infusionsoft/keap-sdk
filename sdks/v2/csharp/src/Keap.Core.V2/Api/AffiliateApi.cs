/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.862454-hf-202509261459
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Keap.Core.V2.Client;
using Keap.Core.V2.Client.Auth;
using Keap.Core.V2.Model;

namespace Keap.Core.V2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAffiliateApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an Affiliate
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAffiliateRequest">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestAffiliate</returns>
        RestAffiliate AddAffiliate(CreateAffiliateRequest? createAffiliateRequest = default, int operationIndex = 0);

        /// <summary>
        /// Create an Affiliate
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAffiliateRequest">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestAffiliate</returns>
        ApiResponse<RestAffiliate> AddAffiliateWithHttpInfo(CreateAffiliateRequest? createAffiliateRequest = default, int operationIndex = 0);
        /// <summary>
        /// Assign Affiliate to Commission program
        /// </summary>
        /// <remarks>
        /// Assigns an Affiliate to Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AddAffiliateToProgram(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0);

        /// <summary>
        /// Assign Affiliate to Commission program
        /// </summary>
        /// <remarks>
        /// Assigns an Affiliate to Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddAffiliateToProgramWithHttpInfo(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0);
        /// <summary>
        /// Create an Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Creates an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCommissionProgramRequest">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateCommissionProgramResponse</returns>
        AffiliateCommissionProgramResponse AddCommissionProgram(CreateCommissionProgramRequest? createCommissionProgramRequest = default, int operationIndex = 0);

        /// <summary>
        /// Create an Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Creates an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCommissionProgramRequest">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateCommissionProgramResponse</returns>
        ApiResponse<AffiliateCommissionProgramResponse> AddCommissionProgramWithHttpInfo(CreateCommissionProgramRequest? createCommissionProgramRequest = default, int operationIndex = 0);
        /// <summary>
        /// Assign a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Product Commission Program to a Product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createProductCommissionProgramRequest">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductCommissionProgram</returns>
        ProductCommissionProgram AssignProductCommissionProgram(string commissionProgramId, CreateProductCommissionProgramRequest? createProductCommissionProgramRequest = default, int operationIndex = 0);

        /// <summary>
        /// Assign a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Product Commission Program to a Product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createProductCommissionProgramRequest">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductCommissionProgram</returns>
        ApiResponse<ProductCommissionProgram> AssignProductCommissionProgramWithHttpInfo(string commissionProgramId, CreateProductCommissionProgramRequest? createProductCommissionProgramRequest = default, int operationIndex = 0);
        /// <summary>
        /// Assign a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Subscription Commission Program to a Subscription
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createSubscriptionCommissionProgramRequest">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionCommissionProgram</returns>
        SubscriptionCommissionProgram AssignSubscriptionCommissionProgram(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? createSubscriptionCommissionProgramRequest = default, int operationIndex = 0);

        /// <summary>
        /// Assign a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Subscription Commission Program to a Subscription
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createSubscriptionCommissionProgramRequest">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionCommissionProgram</returns>
        ApiResponse<SubscriptionCommissionProgram> AssignSubscriptionCommissionProgramWithHttpInfo(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? createSubscriptionCommissionProgramRequest = default, int operationIndex = 0);
        /// <summary>
        /// Create an Affiliate Custom Field
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Custom Field
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        CustomFieldMetaData CreateAffiliateCustomField(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0);

        /// <summary>
        /// Create an Affiliate Custom Field
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Custom Field
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        ApiResponse<CustomFieldMetaData> CreateAffiliateCustomFieldWithHttpInfo(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0);
        /// <summary>
        /// Create a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Creates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetDefaultCommissionProgramResponse</returns>
        SetDefaultCommissionProgramResponse CreateDefaultCommissionProgram(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default, int operationIndex = 0);

        /// <summary>
        /// Create a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Creates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetDefaultCommissionProgramResponse</returns>
        ApiResponse<SetDefaultCommissionProgramResponse> CreateDefaultCommissionProgramWithHttpInfo(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default, int operationIndex = 0);
        /// <summary>
        /// Create an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrUpdateAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateLink</returns>
        AffiliateLink CreateRedirectLink(CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest, int operationIndex = 0);

        /// <summary>
        /// Create an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrUpdateAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateLink</returns>
        ApiResponse<AffiliateLink> CreateRedirectLinkWithHttpInfo(CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest, int operationIndex = 0);
        /// <summary>
        /// Delete Affiliate
        /// </summary>
        /// <remarks>
        /// Deletes the specified Affiliate
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteAffiliate(string id, int operationIndex = 0);

        /// <summary>
        /// Delete Affiliate
        /// </summary>
        /// <remarks>
        /// Deletes the specified Affiliate
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAffiliateWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Delete a Commission Program
        /// </summary>
        /// <remarks>
        /// Deletes a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteAffiliateCommissionProgram(string commissionProgramId, int operationIndex = 0);

        /// <summary>
        /// Delete a Commission Program
        /// </summary>
        /// <remarks>
        /// Deletes a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAffiliateCommissionProgramWithHttpInfo(string commissionProgramId, int operationIndex = 0);
        /// <summary>
        /// Delete a Custom Field
        /// </summary>
        /// <remarks>
        /// Deletes a Custom Field from Affiliate.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteAffiliateCustomField(string customFieldId, int operationIndex = 0);

        /// <summary>
        /// Delete a Custom Field
        /// </summary>
        /// <remarks>
        /// Deletes a Custom Field from Affiliate.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAffiliateCustomFieldWithHttpInfo(string customFieldId, int operationIndex = 0);
        /// <summary>
        /// Delete an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Deletes an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteRedirectLink(string redirectId, int operationIndex = 0);

        /// <summary>
        /// Delete an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Deletes an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRedirectLinkWithHttpInfo(string redirectId, int operationIndex = 0);
        /// <summary>
        /// Retrieve an Affiliate
        /// </summary>
        /// <remarks>
        /// Retrieves a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestAffiliate</returns>
        RestAffiliate GetAffiliate(string id, int operationIndex = 0);

        /// <summary>
        /// Retrieve an Affiliate
        /// </summary>
        /// <remarks>
        /// Retrieves a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestAffiliate</returns>
        ApiResponse<RestAffiliate> GetAffiliateWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <remarks>
        /// Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateCommissionEarned</returns>
        AffiliateCommissionEarned GetAffiliateCommissionTotal(string affiliateId, int operationIndex = 0);

        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <remarks>
        /// Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateCommissionEarned</returns>
        ApiResponse<AffiliateCommissionEarned> GetAffiliateCommissionTotalWithHttpInfo(string affiliateId, int operationIndex = 0);
        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;affiliateId&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliateId%3D%3D123&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;invoice_id&#x60; - &#x60;affowed_id&#x60; - &#x60;date_earned&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateCommissionsResponse</returns>
        ListAffiliateCommissionsResponse GetAffiliateCommissions(string affiliateId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);

        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;affiliateId&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliateId%3D%3D123&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;invoice_id&#x60; - &#x60;affowed_id&#x60; - &#x60;date_earned&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateCommissionsResponse</returns>
        ApiResponse<ListAffiliateCommissionsResponse> GetAffiliateCommissionsWithHttpInfo(string affiliateId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);
        /// <summary>
        /// Retrieve Affiliate Model
        /// </summary>
        /// <remarks>
        /// Get the custom fields and optional properties for the Affiliate object
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectModel</returns>
        ObjectModel GetAffiliateCustomFields(int operationIndex = 0);

        /// <summary>
        /// Retrieve Affiliate Model
        /// </summary>
        /// <remarks>
        /// Get the custom fields and optional properties for the Affiliate object
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectModel</returns>
        ApiResponse<ObjectModel> GetAffiliateCustomFieldsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Retrieve a Commission Program
        /// </summary>
        /// <remarks>
        /// Retrieves a single Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateProgramV2</returns>
        AffiliateProgramV2 GetCommissionProgram(string commissionProgramId, int operationIndex = 0);

        /// <summary>
        /// Retrieve a Commission Program
        /// </summary>
        /// <remarks>
        /// Retrieves a single Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateProgramV2</returns>
        ApiResponse<AffiliateProgramV2> GetCommissionProgramWithHttpInfo(string commissionProgramId, int operationIndex = 0);
        /// <summary>
        /// Retrieve an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Retrieves information about a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateLink</returns>
        AffiliateLink GetRedirectLink(string redirectId, int operationIndex = 0);

        /// <summary>
        /// Retrieve an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Retrieves information about a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateLink</returns>
        ApiResponse<AffiliateLink> GetRedirectLinkWithHttpInfo(string redirectId, int operationIndex = 0);
        /// <summary>
        /// List Affiliates
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliates
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;affiliate_name&#x60; - (String) &#x60;contact_id&#x60; - (String) &#x60;status&#x60; - (String) &#x60;code&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;id&#x60; - &#x60;create_time&#x60; - &#x60;name&#x60; - &#x60;status&#x60; - &#x60;code&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliatesResponse</returns>
        ListAffiliatesResponse ListAffiliate(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);

        /// <summary>
        /// List Affiliates
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliates
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;affiliate_name&#x60; - (String) &#x60;contact_id&#x60; - (String) &#x60;status&#x60; - (String) &#x60;code&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;id&#x60; - &#x60;create_time&#x60; - &#x60;name&#x60; - &#x60;status&#x60; - &#x60;code&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliatesResponse</returns>
        ApiResponse<ListAffiliatesResponse> ListAffiliateWithHttpInfo(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);
        /// <summary>
        /// List Affiliate Commission Programs
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Commission Programs
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateCommissionProgramsResponse</returns>
        ListAffiliateCommissionProgramsResponse ListAffiliateCommissionPrograms(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);

        /// <summary>
        /// List Affiliate Commission Programs
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Commission Programs
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateCommissionProgramsResponse</returns>
        ApiResponse<ListAffiliateCommissionProgramsResponse> ListAffiliateCommissionProgramsWithHttpInfo(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);
        /// <summary>
        /// List Affiliate Links
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Links
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateLinksResponse</returns>
        ListAffiliateLinksResponse ListAffiliateLinks(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);

        /// <summary>
        /// List Affiliate Links
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Links
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateLinksResponse</returns>
        ApiResponse<ListAffiliateLinksResponse> ListAffiliateLinksWithHttpInfo(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);
        /// <summary>
        /// List Affiliate Payments
        /// </summary>
        /// <remarks>
        /// Retrieves a list of affiliate payments
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60; - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;create_time&#x60; - &#x60;pay_date&#x60; - &#x60;pay_amount&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliatePaymentsResponse</returns>
        ListAffiliatePaymentsResponse ListAffiliatePayments(string affiliateId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);

        /// <summary>
        /// List Affiliate Payments
        /// </summary>
        /// <remarks>
        /// Retrieves a list of affiliate payments
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60; - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;create_time&#x60; - &#x60;pay_date&#x60; - &#x60;pay_amount&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliatePaymentsResponse</returns>
        ApiResponse<ListAffiliatePaymentsResponse> ListAffiliatePaymentsWithHttpInfo(string affiliateId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);
        /// <summary>
        /// List Affiliate Summaries
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Summaries
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) &#x60;affiliate_ids&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;affiliate_id&#x60; - &#x60;amount_earned&#x60; - &#x60;balance&#x60; - &#x60;clawbacks&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateSummariesResponse</returns>
        ListAffiliateSummariesResponse ListSummaries(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);

        /// <summary>
        /// List Affiliate Summaries
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Summaries
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) &#x60;affiliate_ids&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;affiliate_id&#x60; - &#x60;amount_earned&#x60; - &#x60;balance&#x60; - &#x60;clawbacks&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateSummariesResponse</returns>
        ApiResponse<ListAffiliateSummariesResponse> ListSummariesWithHttpInfo(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);
        /// <summary>
        /// Remove an Affiliate from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes an Affiliate from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateRemoveFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveAffiliateFromProgram(string id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest, int operationIndex = 0);

        /// <summary>
        /// Remove an Affiliate from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes an Affiliate from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateRemoveFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveAffiliateFromProgramWithHttpInfo(string id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest, int operationIndex = 0);
        /// <summary>
        /// Remove a Product from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes a Product from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteProgramCommissionRequest">deleteProgramCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveProductCommissionFromCommissions(string commissionId, DeleteProgramCommissionRequest deleteProgramCommissionRequest, int operationIndex = 0);

        /// <summary>
        /// Remove a Product from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes a Product from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteProgramCommissionRequest">deleteProgramCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveProductCommissionFromCommissionsWithHttpInfo(string commissionId, DeleteProgramCommissionRequest deleteProgramCommissionRequest, int operationIndex = 0);
        /// <summary>
        /// Remove a Subscription from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes a Subscription from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveSubscriptionPlanCommissionFromCommissions(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0);

        /// <summary>
        /// Remove a Subscription from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes a Subscription from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveSubscriptionPlanCommissionFromCommissionsWithHttpInfo(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0);
        /// <summary>
        /// Update an Affiliate
        /// </summary>
        /// <remarks>
        /// Updates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateAffiliateRequest">Request to update an affiliate (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestAffiliate</returns>
        RestAffiliate UpdateAffiliate(string id, UpdateAffiliateRequest? updateAffiliateRequest = default, int operationIndex = 0);

        /// <summary>
        /// Update an Affiliate
        /// </summary>
        /// <remarks>
        /// Updates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateAffiliateRequest">Request to update an affiliate (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestAffiliate</returns>
        ApiResponse<RestAffiliate> UpdateAffiliateWithHttpInfo(string id, UpdateAffiliateRequest? updateAffiliateRequest = default, int operationIndex = 0);
        /// <summary>
        /// Update a Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Affiliate object.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        CustomFieldMetaData UpdateAffiliateCustomField(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default, int operationIndex = 0);

        /// <summary>
        /// Update a Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Affiliate object.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        ApiResponse<CustomFieldMetaData> UpdateAffiliateCustomFieldWithHttpInfo(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default, int operationIndex = 0);
        /// <summary>
        /// Update an Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Updates the properties of an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateCommissionProgramRequest">updateCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateCommissionProgramResponse</returns>
        AffiliateCommissionProgramResponse UpdateCommissionProgram(string commissionProgramId, UpdateCommissionProgramRequest updateCommissionProgramRequest, List<string>? updateMask = default, int operationIndex = 0);

        /// <summary>
        /// Update an Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Updates the properties of an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateCommissionProgramRequest">updateCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateCommissionProgramResponse</returns>
        ApiResponse<AffiliateCommissionProgramResponse> UpdateCommissionProgramWithHttpInfo(string commissionProgramId, UpdateCommissionProgramRequest updateCommissionProgramRequest, List<string>? updateMask = default, int operationIndex = 0);
        /// <summary>
        /// Update a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetDefaultCommissionProgramResponse</returns>
        SetDefaultCommissionProgramResponse UpdateDefaultCommissionProgram(string commissionProgramId, List<string>? updateMask = default, UpdateDefaultCommissionProgramRequest? updateDefaultCommissionProgramRequest = default, int operationIndex = 0);

        /// <summary>
        /// Update a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetDefaultCommissionProgramResponse</returns>
        ApiResponse<SetDefaultCommissionProgramResponse> UpdateDefaultCommissionProgramWithHttpInfo(string commissionProgramId, List<string>? updateMask = default, UpdateDefaultCommissionProgramRequest? updateDefaultCommissionProgramRequest = default, int operationIndex = 0);
        /// <summary>
        /// Update a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Product Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductCommissionProgram</returns>
        ProductCommissionProgram UpdateProductCommissionProgram(string commissionProgramId, List<string>? updateMask = default, UpdateProductCommissionProgramRequest? updateProductCommissionProgramRequest = default, int operationIndex = 0);

        /// <summary>
        /// Update a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Product Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductCommissionProgram</returns>
        ApiResponse<ProductCommissionProgram> UpdateProductCommissionProgramWithHttpInfo(string commissionProgramId, List<string>? updateMask = default, UpdateProductCommissionProgramRequest? updateProductCommissionProgramRequest = default, int operationIndex = 0);
        /// <summary>
        /// Update an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Updates an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="createOrUpdateAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateLink</returns>
        AffiliateLink UpdateRedirectLink(string redirectId, CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest, int operationIndex = 0);

        /// <summary>
        /// Update an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Updates an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="createOrUpdateAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateLink</returns>
        ApiResponse<AffiliateLink> UpdateRedirectLinkWithHttpInfo(string redirectId, CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest, int operationIndex = 0);
        /// <summary>
        /// Update a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Subscription Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionCommissionProgram</returns>
        SubscriptionCommissionProgram UpdateSubscriptionCommissionProgram(string commissionProgramId, List<string>? updateMask = default, UpdateSubscriptionCommissionProgramRequest? updateSubscriptionCommissionProgramRequest = default, int operationIndex = 0);

        /// <summary>
        /// Update a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Subscription Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionCommissionProgram</returns>
        ApiResponse<SubscriptionCommissionProgram> UpdateSubscriptionCommissionProgramWithHttpInfo(string commissionProgramId, List<string>? updateMask = default, UpdateSubscriptionCommissionProgramRequest? updateSubscriptionCommissionProgramRequest = default, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAffiliateApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create an Affiliate
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAffiliateRequest">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestAffiliate</returns>
        System.Threading.Tasks.Task<RestAffiliate> AddAffiliateAsync(CreateAffiliateRequest? createAffiliateRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an Affiliate
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAffiliateRequest">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestAffiliate)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestAffiliate>> AddAffiliateWithHttpInfoAsync(CreateAffiliateRequest? createAffiliateRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Assign Affiliate to Commission program
        /// </summary>
        /// <remarks>
        /// Assigns an Affiliate to Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddAffiliateToProgramAsync(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Assign Affiliate to Commission program
        /// </summary>
        /// <remarks>
        /// Assigns an Affiliate to Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddAffiliateToProgramWithHttpInfoAsync(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create an Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Creates an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCommissionProgramRequest">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateCommissionProgramResponse</returns>
        System.Threading.Tasks.Task<AffiliateCommissionProgramResponse> AddCommissionProgramAsync(CreateCommissionProgramRequest? createCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Creates an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCommissionProgramRequest">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateCommissionProgramResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateCommissionProgramResponse>> AddCommissionProgramWithHttpInfoAsync(CreateCommissionProgramRequest? createCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Assign a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Product Commission Program to a Product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createProductCommissionProgramRequest">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductCommissionProgram</returns>
        System.Threading.Tasks.Task<ProductCommissionProgram> AssignProductCommissionProgramAsync(string commissionProgramId, CreateProductCommissionProgramRequest? createProductCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Assign a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Product Commission Program to a Product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createProductCommissionProgramRequest">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductCommissionProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductCommissionProgram>> AssignProductCommissionProgramWithHttpInfoAsync(string commissionProgramId, CreateProductCommissionProgramRequest? createProductCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Assign a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Subscription Commission Program to a Subscription
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createSubscriptionCommissionProgramRequest">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionCommissionProgram</returns>
        System.Threading.Tasks.Task<SubscriptionCommissionProgram> AssignSubscriptionCommissionProgramAsync(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? createSubscriptionCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Assign a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Subscription Commission Program to a Subscription
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createSubscriptionCommissionProgramRequest">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionCommissionProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionCommissionProgram>> AssignSubscriptionCommissionProgramWithHttpInfoAsync(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? createSubscriptionCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create an Affiliate Custom Field
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Custom Field
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        System.Threading.Tasks.Task<CustomFieldMetaData> CreateAffiliateCustomFieldAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an Affiliate Custom Field
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Custom Field
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFieldMetaData>> CreateAffiliateCustomFieldWithHttpInfoAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Creates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetDefaultCommissionProgramResponse</returns>
        System.Threading.Tasks.Task<SetDefaultCommissionProgramResponse> CreateDefaultCommissionProgramAsync(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Creates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetDefaultCommissionProgramResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetDefaultCommissionProgramResponse>> CreateDefaultCommissionProgramWithHttpInfoAsync(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrUpdateAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateLink</returns>
        System.Threading.Tasks.Task<AffiliateLink> CreateRedirectLinkAsync(CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrUpdateAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateLink>> CreateRedirectLinkWithHttpInfoAsync(CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete Affiliate
        /// </summary>
        /// <remarks>
        /// Deletes the specified Affiliate
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAffiliateAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Affiliate
        /// </summary>
        /// <remarks>
        /// Deletes the specified Affiliate
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAffiliateWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete a Commission Program
        /// </summary>
        /// <remarks>
        /// Deletes a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAffiliateCommissionProgramAsync(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a Commission Program
        /// </summary>
        /// <remarks>
        /// Deletes a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAffiliateCommissionProgramWithHttpInfoAsync(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete a Custom Field
        /// </summary>
        /// <remarks>
        /// Deletes a Custom Field from Affiliate.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAffiliateCustomFieldAsync(string customFieldId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a Custom Field
        /// </summary>
        /// <remarks>
        /// Deletes a Custom Field from Affiliate.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAffiliateCustomFieldWithHttpInfoAsync(string customFieldId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Deletes an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRedirectLinkAsync(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Deletes an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRedirectLinkWithHttpInfoAsync(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieve an Affiliate
        /// </summary>
        /// <remarks>
        /// Retrieves a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestAffiliate</returns>
        System.Threading.Tasks.Task<RestAffiliate> GetAffiliateAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve an Affiliate
        /// </summary>
        /// <remarks>
        /// Retrieves a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestAffiliate)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestAffiliate>> GetAffiliateWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <remarks>
        /// Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateCommissionEarned</returns>
        System.Threading.Tasks.Task<AffiliateCommissionEarned> GetAffiliateCommissionTotalAsync(string affiliateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <remarks>
        /// Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateCommissionEarned)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateCommissionEarned>> GetAffiliateCommissionTotalWithHttpInfoAsync(string affiliateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;affiliateId&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliateId%3D%3D123&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;invoice_id&#x60; - &#x60;affowed_id&#x60; - &#x60;date_earned&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateCommissionsResponse</returns>
        System.Threading.Tasks.Task<ListAffiliateCommissionsResponse> GetAffiliateCommissionsAsync(string affiliateId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;affiliateId&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliateId%3D%3D123&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;invoice_id&#x60; - &#x60;affowed_id&#x60; - &#x60;date_earned&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateCommissionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAffiliateCommissionsResponse>> GetAffiliateCommissionsWithHttpInfoAsync(string affiliateId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieve Affiliate Model
        /// </summary>
        /// <remarks>
        /// Get the custom fields and optional properties for the Affiliate object
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectModel</returns>
        System.Threading.Tasks.Task<ObjectModel> GetAffiliateCustomFieldsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve Affiliate Model
        /// </summary>
        /// <remarks>
        /// Get the custom fields and optional properties for the Affiliate object
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectModel>> GetAffiliateCustomFieldsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieve a Commission Program
        /// </summary>
        /// <remarks>
        /// Retrieves a single Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateProgramV2</returns>
        System.Threading.Tasks.Task<AffiliateProgramV2> GetCommissionProgramAsync(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve a Commission Program
        /// </summary>
        /// <remarks>
        /// Retrieves a single Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateProgramV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateProgramV2>> GetCommissionProgramWithHttpInfoAsync(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieve an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Retrieves information about a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateLink</returns>
        System.Threading.Tasks.Task<AffiliateLink> GetRedirectLinkAsync(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Retrieves information about a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateLink>> GetRedirectLinkWithHttpInfoAsync(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Affiliates
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliates
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;affiliate_name&#x60; - (String) &#x60;contact_id&#x60; - (String) &#x60;status&#x60; - (String) &#x60;code&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;id&#x60; - &#x60;create_time&#x60; - &#x60;name&#x60; - &#x60;status&#x60; - &#x60;code&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliatesResponse</returns>
        System.Threading.Tasks.Task<ListAffiliatesResponse> ListAffiliateAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Affiliates
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliates
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;affiliate_name&#x60; - (String) &#x60;contact_id&#x60; - (String) &#x60;status&#x60; - (String) &#x60;code&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;id&#x60; - &#x60;create_time&#x60; - &#x60;name&#x60; - &#x60;status&#x60; - &#x60;code&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliatesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAffiliatesResponse>> ListAffiliateWithHttpInfoAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Affiliate Commission Programs
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Commission Programs
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateCommissionProgramsResponse</returns>
        System.Threading.Tasks.Task<ListAffiliateCommissionProgramsResponse> ListAffiliateCommissionProgramsAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Affiliate Commission Programs
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Commission Programs
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateCommissionProgramsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAffiliateCommissionProgramsResponse>> ListAffiliateCommissionProgramsWithHttpInfoAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Affiliate Links
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Links
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateLinksResponse</returns>
        System.Threading.Tasks.Task<ListAffiliateLinksResponse> ListAffiliateLinksAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Affiliate Links
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Links
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateLinksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAffiliateLinksResponse>> ListAffiliateLinksWithHttpInfoAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Affiliate Payments
        /// </summary>
        /// <remarks>
        /// Retrieves a list of affiliate payments
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60; - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;create_time&#x60; - &#x60;pay_date&#x60; - &#x60;pay_amount&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliatePaymentsResponse</returns>
        System.Threading.Tasks.Task<ListAffiliatePaymentsResponse> ListAffiliatePaymentsAsync(string affiliateId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Affiliate Payments
        /// </summary>
        /// <remarks>
        /// Retrieves a list of affiliate payments
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60; - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;create_time&#x60; - &#x60;pay_date&#x60; - &#x60;pay_amount&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliatePaymentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAffiliatePaymentsResponse>> ListAffiliatePaymentsWithHttpInfoAsync(string affiliateId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Affiliate Summaries
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Summaries
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) &#x60;affiliate_ids&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;affiliate_id&#x60; - &#x60;amount_earned&#x60; - &#x60;balance&#x60; - &#x60;clawbacks&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateSummariesResponse</returns>
        System.Threading.Tasks.Task<ListAffiliateSummariesResponse> ListSummariesAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Affiliate Summaries
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Summaries
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) &#x60;affiliate_ids&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;affiliate_id&#x60; - &#x60;amount_earned&#x60; - &#x60;balance&#x60; - &#x60;clawbacks&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateSummariesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAffiliateSummariesResponse>> ListSummariesWithHttpInfoAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Remove an Affiliate from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes an Affiliate from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateRemoveFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAffiliateFromProgramAsync(string id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove an Affiliate from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes an Affiliate from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateRemoveFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAffiliateFromProgramWithHttpInfoAsync(string id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Remove a Product from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes a Product from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteProgramCommissionRequest">deleteProgramCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveProductCommissionFromCommissionsAsync(string commissionId, DeleteProgramCommissionRequest deleteProgramCommissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove a Product from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes a Product from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteProgramCommissionRequest">deleteProgramCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveProductCommissionFromCommissionsWithHttpInfoAsync(string commissionId, DeleteProgramCommissionRequest deleteProgramCommissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Remove a Subscription from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes a Subscription from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveSubscriptionPlanCommissionFromCommissionsAsync(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove a Subscription from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes a Subscription from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveSubscriptionPlanCommissionFromCommissionsWithHttpInfoAsync(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update an Affiliate
        /// </summary>
        /// <remarks>
        /// Updates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateAffiliateRequest">Request to update an affiliate (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestAffiliate</returns>
        System.Threading.Tasks.Task<RestAffiliate> UpdateAffiliateAsync(string id, UpdateAffiliateRequest? updateAffiliateRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an Affiliate
        /// </summary>
        /// <remarks>
        /// Updates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateAffiliateRequest">Request to update an affiliate (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestAffiliate)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestAffiliate>> UpdateAffiliateWithHttpInfoAsync(string id, UpdateAffiliateRequest? updateAffiliateRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update a Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Affiliate object.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        System.Threading.Tasks.Task<CustomFieldMetaData> UpdateAffiliateCustomFieldAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Affiliate object.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFieldMetaData>> UpdateAffiliateCustomFieldWithHttpInfoAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update an Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Updates the properties of an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateCommissionProgramRequest">updateCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateCommissionProgramResponse</returns>
        System.Threading.Tasks.Task<AffiliateCommissionProgramResponse> UpdateCommissionProgramAsync(string commissionProgramId, UpdateCommissionProgramRequest updateCommissionProgramRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Updates the properties of an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateCommissionProgramRequest">updateCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateCommissionProgramResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateCommissionProgramResponse>> UpdateCommissionProgramWithHttpInfoAsync(string commissionProgramId, UpdateCommissionProgramRequest updateCommissionProgramRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetDefaultCommissionProgramResponse</returns>
        System.Threading.Tasks.Task<SetDefaultCommissionProgramResponse> UpdateDefaultCommissionProgramAsync(string commissionProgramId, List<string>? updateMask = default, UpdateDefaultCommissionProgramRequest? updateDefaultCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetDefaultCommissionProgramResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetDefaultCommissionProgramResponse>> UpdateDefaultCommissionProgramWithHttpInfoAsync(string commissionProgramId, List<string>? updateMask = default, UpdateDefaultCommissionProgramRequest? updateDefaultCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Product Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductCommissionProgram</returns>
        System.Threading.Tasks.Task<ProductCommissionProgram> UpdateProductCommissionProgramAsync(string commissionProgramId, List<string>? updateMask = default, UpdateProductCommissionProgramRequest? updateProductCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Product Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductCommissionProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductCommissionProgram>> UpdateProductCommissionProgramWithHttpInfoAsync(string commissionProgramId, List<string>? updateMask = default, UpdateProductCommissionProgramRequest? updateProductCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Updates an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="createOrUpdateAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateLink</returns>
        System.Threading.Tasks.Task<AffiliateLink> UpdateRedirectLinkAsync(string redirectId, CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Updates an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="createOrUpdateAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateLink>> UpdateRedirectLinkWithHttpInfoAsync(string redirectId, CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Subscription Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionCommissionProgram</returns>
        System.Threading.Tasks.Task<SubscriptionCommissionProgram> UpdateSubscriptionCommissionProgramAsync(string commissionProgramId, List<string>? updateMask = default, UpdateSubscriptionCommissionProgramRequest? updateSubscriptionCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Subscription Commission Program
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionCommissionProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionCommissionProgram>> UpdateSubscriptionCommissionProgramWithHttpInfoAsync(string commissionProgramId, List<string>? updateMask = default, UpdateSubscriptionCommissionProgramRequest? updateSubscriptionCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAffiliateApi : IAffiliateApiSync, IAffiliateApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AffiliateApi : IAffiliateApi
    {
        private Keap.Core.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AffiliateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AffiliateApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AffiliateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AffiliateApi(string basePath)
        {
            this.Configuration = Keap.Core.V2.Client.Configuration.MergeConfigurations(
                Keap.Core.V2.Client.GlobalConfiguration.Instance,
                new Keap.Core.V2.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AffiliateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AffiliateApi(Keap.Core.V2.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Keap.Core.V2.Client.Configuration.MergeConfigurations(
                Keap.Core.V2.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AffiliateApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AffiliateApi(Keap.Core.V2.Client.ISynchronousClient client, Keap.Core.V2.Client.IAsynchronousClient asyncClient, Keap.Core.V2.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Keap.Core.V2.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Keap.Core.V2.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Keap.Core.V2.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Keap.Core.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an Affiliate Creates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAffiliateRequest">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestAffiliate</returns>
        public RestAffiliate AddAffiliate(CreateAffiliateRequest? createAffiliateRequest = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<RestAffiliate> localVarResponse = AddAffiliateWithHttpInfo(createAffiliateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Creates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAffiliateRequest">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestAffiliate</returns>
        public Keap.Core.V2.Client.ApiResponse<RestAffiliate> AddAffiliateWithHttpInfo(CreateAffiliateRequest? createAffiliateRequest = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createAffiliateRequest;

            localVarRequestOptions.Operation = "AffiliateApi.AddAffiliate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RestAffiliate>("/v2/affiliates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAffiliate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Creates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAffiliateRequest">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestAffiliate</returns>
        public async System.Threading.Tasks.Task<RestAffiliate> AddAffiliateAsync(CreateAffiliateRequest? createAffiliateRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<RestAffiliate> localVarResponse = await AddAffiliateWithHttpInfoAsync(createAffiliateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Creates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAffiliateRequest">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestAffiliate)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<RestAffiliate>> AddAffiliateWithHttpInfoAsync(CreateAffiliateRequest? createAffiliateRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createAffiliateRequest;

            localVarRequestOptions.Operation = "AffiliateApi.AddAffiliate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestAffiliate>("/v2/affiliates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAffiliate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign Affiliate to Commission program Assigns an Affiliate to Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AddAffiliateToProgram(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0)
        {
            AddAffiliateToProgramWithHttpInfo(id, affiliateAddToProgramRequest);
        }

        /// <summary>
        /// Assign Affiliate to Commission program Assigns an Affiliate to Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Core.V2.Client.ApiResponse<Object> AddAffiliateToProgramWithHttpInfo(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->AddAffiliateToProgram");
            }

            // verify the required parameter 'affiliateAddToProgramRequest' is set
            if (affiliateAddToProgramRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'affiliateAddToProgramRequest' when calling AffiliateApi->AddAffiliateToProgram");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = affiliateAddToProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.AddAffiliateToProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/affiliates/{id}:assignToProgram", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAffiliateToProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign Affiliate to Commission program Assigns an Affiliate to Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddAffiliateToProgramAsync(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await AddAffiliateToProgramWithHttpInfoAsync(id, affiliateAddToProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Assign Affiliate to Commission program Assigns an Affiliate to Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Object>> AddAffiliateToProgramWithHttpInfoAsync(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->AddAffiliateToProgram");
            }

            // verify the required parameter 'affiliateAddToProgramRequest' is set
            if (affiliateAddToProgramRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'affiliateAddToProgramRequest' when calling AffiliateApi->AddAffiliateToProgram");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = affiliateAddToProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.AddAffiliateToProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/affiliates/{id}:assignToProgram", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAffiliateToProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Commission Program Creates an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCommissionProgramRequest">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateCommissionProgramResponse</returns>
        public AffiliateCommissionProgramResponse AddCommissionProgram(CreateCommissionProgramRequest? createCommissionProgramRequest = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<AffiliateCommissionProgramResponse> localVarResponse = AddCommissionProgramWithHttpInfo(createCommissionProgramRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Commission Program Creates an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCommissionProgramRequest">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateCommissionProgramResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<AffiliateCommissionProgramResponse> AddCommissionProgramWithHttpInfo(CreateCommissionProgramRequest? createCommissionProgramRequest = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.AddCommissionProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AffiliateCommissionProgramResponse>("/v2/affiliates/commissionPrograms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddCommissionProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Commission Program Creates an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCommissionProgramRequest">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateCommissionProgramResponse</returns>
        public async System.Threading.Tasks.Task<AffiliateCommissionProgramResponse> AddCommissionProgramAsync(CreateCommissionProgramRequest? createCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<AffiliateCommissionProgramResponse> localVarResponse = await AddCommissionProgramWithHttpInfoAsync(createCommissionProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Commission Program Creates an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCommissionProgramRequest">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateCommissionProgramResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<AffiliateCommissionProgramResponse>> AddCommissionProgramWithHttpInfoAsync(CreateCommissionProgramRequest? createCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.AddCommissionProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AffiliateCommissionProgramResponse>("/v2/affiliates/commissionPrograms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddCommissionProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a Product Commission Program Assigns a Product Commission Program to a Product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createProductCommissionProgramRequest">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductCommissionProgram</returns>
        public ProductCommissionProgram AssignProductCommissionProgram(string commissionProgramId, CreateProductCommissionProgramRequest? createProductCommissionProgramRequest = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ProductCommissionProgram> localVarResponse = AssignProductCommissionProgramWithHttpInfo(commissionProgramId, createProductCommissionProgramRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign a Product Commission Program Assigns a Product Commission Program to a Product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createProductCommissionProgramRequest">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductCommissionProgram</returns>
        public Keap.Core.V2.Client.ApiResponse<ProductCommissionProgram> AssignProductCommissionProgramWithHttpInfo(string commissionProgramId, CreateProductCommissionProgramRequest? createProductCommissionProgramRequest = default, int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->AssignProductCommissionProgram");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            localVarRequestOptions.Data = createProductCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.AssignProductCommissionProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductCommissionProgram>("/v2/affiliates/commissionPrograms/productCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignProductCommissionProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a Product Commission Program Assigns a Product Commission Program to a Product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createProductCommissionProgramRequest">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductCommissionProgram</returns>
        public async System.Threading.Tasks.Task<ProductCommissionProgram> AssignProductCommissionProgramAsync(string commissionProgramId, CreateProductCommissionProgramRequest? createProductCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<ProductCommissionProgram> localVarResponse = await AssignProductCommissionProgramWithHttpInfoAsync(commissionProgramId, createProductCommissionProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign a Product Commission Program Assigns a Product Commission Program to a Product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createProductCommissionProgramRequest">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductCommissionProgram)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ProductCommissionProgram>> AssignProductCommissionProgramWithHttpInfoAsync(string commissionProgramId, CreateProductCommissionProgramRequest? createProductCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->AssignProductCommissionProgram");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            localVarRequestOptions.Data = createProductCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.AssignProductCommissionProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductCommissionProgram>("/v2/affiliates/commissionPrograms/productCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignProductCommissionProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a Subscription Commission Program Assigns a Subscription Commission Program to a Subscription
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createSubscriptionCommissionProgramRequest">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionCommissionProgram</returns>
        public SubscriptionCommissionProgram AssignSubscriptionCommissionProgram(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? createSubscriptionCommissionProgramRequest = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<SubscriptionCommissionProgram> localVarResponse = AssignSubscriptionCommissionProgramWithHttpInfo(commissionProgramId, createSubscriptionCommissionProgramRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign a Subscription Commission Program Assigns a Subscription Commission Program to a Subscription
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createSubscriptionCommissionProgramRequest">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionCommissionProgram</returns>
        public Keap.Core.V2.Client.ApiResponse<SubscriptionCommissionProgram> AssignSubscriptionCommissionProgramWithHttpInfo(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? createSubscriptionCommissionProgramRequest = default, int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->AssignSubscriptionCommissionProgram");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            localVarRequestOptions.Data = createSubscriptionCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.AssignSubscriptionCommissionProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionCommissionProgram>("/v2/affiliates/commissionPrograms/subscriptionCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignSubscriptionCommissionProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a Subscription Commission Program Assigns a Subscription Commission Program to a Subscription
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createSubscriptionCommissionProgramRequest">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionCommissionProgram</returns>
        public async System.Threading.Tasks.Task<SubscriptionCommissionProgram> AssignSubscriptionCommissionProgramAsync(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? createSubscriptionCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<SubscriptionCommissionProgram> localVarResponse = await AssignSubscriptionCommissionProgramWithHttpInfoAsync(commissionProgramId, createSubscriptionCommissionProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign a Subscription Commission Program Assigns a Subscription Commission Program to a Subscription
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createSubscriptionCommissionProgramRequest">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionCommissionProgram)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<SubscriptionCommissionProgram>> AssignSubscriptionCommissionProgramWithHttpInfoAsync(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? createSubscriptionCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->AssignSubscriptionCommissionProgram");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            localVarRequestOptions.Data = createSubscriptionCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.AssignSubscriptionCommissionProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubscriptionCommissionProgram>("/v2/affiliates/commissionPrograms/subscriptionCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignSubscriptionCommissionProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Custom Field Creates a single Affiliate Custom Field
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        public CustomFieldMetaData CreateAffiliateCustomField(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<CustomFieldMetaData> localVarResponse = CreateAffiliateCustomFieldWithHttpInfo(createCustomFieldRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Custom Field Creates a single Affiliate Custom Field
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        public Keap.Core.V2.Client.ApiResponse<CustomFieldMetaData> CreateAffiliateCustomFieldWithHttpInfo(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createCustomFieldRequest' is set
            if (createCustomFieldRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'createCustomFieldRequest' when calling AffiliateApi->CreateAffiliateCustomField");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCustomFieldRequest;

            localVarRequestOptions.Operation = "AffiliateApi.CreateAffiliateCustomField";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomFieldMetaData>("/v2/affiliates/model/customFields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAffiliateCustomField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Custom Field Creates a single Affiliate Custom Field
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        public async System.Threading.Tasks.Task<CustomFieldMetaData> CreateAffiliateCustomFieldAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<CustomFieldMetaData> localVarResponse = await CreateAffiliateCustomFieldWithHttpInfoAsync(createCustomFieldRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Custom Field Creates a single Affiliate Custom Field
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<CustomFieldMetaData>> CreateAffiliateCustomFieldWithHttpInfoAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createCustomFieldRequest' is set
            if (createCustomFieldRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'createCustomFieldRequest' when calling AffiliateApi->CreateAffiliateCustomField");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCustomFieldRequest;

            localVarRequestOptions.Operation = "AffiliateApi.CreateAffiliateCustomField";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomFieldMetaData>("/v2/affiliates/model/customFields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAffiliateCustomField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Default Commission Program Creates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetDefaultCommissionProgramResponse</returns>
        public SetDefaultCommissionProgramResponse CreateDefaultCommissionProgram(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<SetDefaultCommissionProgramResponse> localVarResponse = CreateDefaultCommissionProgramWithHttpInfo(commissionProgramId, createDefaultCommissionProgramRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Default Commission Program Creates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetDefaultCommissionProgramResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<SetDefaultCommissionProgramResponse> CreateDefaultCommissionProgramWithHttpInfo(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default, int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->CreateDefaultCommissionProgram");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            localVarRequestOptions.Data = createDefaultCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.CreateDefaultCommissionProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SetDefaultCommissionProgramResponse>("/v2/affiliates/commissionPrograms/defaultCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDefaultCommissionProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Default Commission Program Creates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetDefaultCommissionProgramResponse</returns>
        public async System.Threading.Tasks.Task<SetDefaultCommissionProgramResponse> CreateDefaultCommissionProgramAsync(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<SetDefaultCommissionProgramResponse> localVarResponse = await CreateDefaultCommissionProgramWithHttpInfoAsync(commissionProgramId, createDefaultCommissionProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Default Commission Program Creates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetDefaultCommissionProgramResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<SetDefaultCommissionProgramResponse>> CreateDefaultCommissionProgramWithHttpInfoAsync(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->CreateDefaultCommissionProgram");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            localVarRequestOptions.Data = createDefaultCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.CreateDefaultCommissionProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetDefaultCommissionProgramResponse>("/v2/affiliates/commissionPrograms/defaultCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDefaultCommissionProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Link Creates a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrUpdateAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateLink</returns>
        public AffiliateLink CreateRedirectLink(CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<AffiliateLink> localVarResponse = CreateRedirectLinkWithHttpInfo(createOrUpdateAffiliateLinkRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Link Creates a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrUpdateAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateLink</returns>
        public Keap.Core.V2.Client.ApiResponse<AffiliateLink> CreateRedirectLinkWithHttpInfo(CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createOrUpdateAffiliateLinkRequest' is set
            if (createOrUpdateAffiliateLinkRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'createOrUpdateAffiliateLinkRequest' when calling AffiliateApi->CreateRedirectLink");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOrUpdateAffiliateLinkRequest;

            localVarRequestOptions.Operation = "AffiliateApi.CreateRedirectLink";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AffiliateLink>("/v2/affiliates/redirects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRedirectLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Link Creates a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrUpdateAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateLink</returns>
        public async System.Threading.Tasks.Task<AffiliateLink> CreateRedirectLinkAsync(CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<AffiliateLink> localVarResponse = await CreateRedirectLinkWithHttpInfoAsync(createOrUpdateAffiliateLinkRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Link Creates a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrUpdateAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateLink)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<AffiliateLink>> CreateRedirectLinkWithHttpInfoAsync(CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createOrUpdateAffiliateLinkRequest' is set
            if (createOrUpdateAffiliateLinkRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'createOrUpdateAffiliateLinkRequest' when calling AffiliateApi->CreateRedirectLink");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOrUpdateAffiliateLinkRequest;

            localVarRequestOptions.Operation = "AffiliateApi.CreateRedirectLink";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AffiliateLink>("/v2/affiliates/redirects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRedirectLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Affiliate Deletes the specified Affiliate
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteAffiliate(string id, int operationIndex = 0)
        {
            DeleteAffiliateWithHttpInfo(id);
        }

        /// <summary>
        /// Delete Affiliate Deletes the specified Affiliate
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Core.V2.Client.ApiResponse<Object> DeleteAffiliateWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->DeleteAffiliate");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.DeleteAffiliate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/affiliates/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAffiliate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Affiliate Deletes the specified Affiliate
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAffiliateAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteAffiliateWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Affiliate Deletes the specified Affiliate
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Object>> DeleteAffiliateWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->DeleteAffiliate");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.DeleteAffiliate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/affiliates/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAffiliate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Commission Program Deletes a Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteAffiliateCommissionProgram(string commissionProgramId, int operationIndex = 0)
        {
            DeleteAffiliateCommissionProgramWithHttpInfo(commissionProgramId);
        }

        /// <summary>
        /// Delete a Commission Program Deletes a Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Core.V2.Client.ApiResponse<Object> DeleteAffiliateCommissionProgramWithHttpInfo(string commissionProgramId, int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->DeleteAffiliateCommissionProgram");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.DeleteAffiliateCommissionProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/affiliates/commissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAffiliateCommissionProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Commission Program Deletes a Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAffiliateCommissionProgramAsync(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteAffiliateCommissionProgramWithHttpInfoAsync(commissionProgramId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Commission Program Deletes a Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Object>> DeleteAffiliateCommissionProgramWithHttpInfoAsync(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->DeleteAffiliateCommissionProgram");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.DeleteAffiliateCommissionProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/affiliates/commissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAffiliateCommissionProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Custom Field Deletes a Custom Field from Affiliate.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteAffiliateCustomField(string customFieldId, int operationIndex = 0)
        {
            DeleteAffiliateCustomFieldWithHttpInfo(customFieldId);
        }

        /// <summary>
        /// Delete a Custom Field Deletes a Custom Field from Affiliate.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Core.V2.Client.ApiResponse<Object> DeleteAffiliateCustomFieldWithHttpInfo(string customFieldId, int operationIndex = 0)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling AffiliateApi->DeleteAffiliateCustomField");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.DeleteAffiliateCustomField";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/affiliates/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAffiliateCustomField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Custom Field Deletes a Custom Field from Affiliate.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAffiliateCustomFieldAsync(string customFieldId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteAffiliateCustomFieldWithHttpInfoAsync(customFieldId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Custom Field Deletes a Custom Field from Affiliate.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Object>> DeleteAffiliateCustomFieldWithHttpInfoAsync(string customFieldId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling AffiliateApi->DeleteAffiliateCustomField");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.DeleteAffiliateCustomField";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/affiliates/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAffiliateCustomField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Affiliate Link Deletes an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteRedirectLink(string redirectId, int operationIndex = 0)
        {
            DeleteRedirectLinkWithHttpInfo(redirectId);
        }

        /// <summary>
        /// Delete an Affiliate Link Deletes an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Core.V2.Client.ApiResponse<Object> DeleteRedirectLinkWithHttpInfo(string redirectId, int operationIndex = 0)
        {
            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'redirectId' when calling AffiliateApi->DeleteRedirectLink");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redirect_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(redirectId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.DeleteRedirectLink";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/affiliates/redirects/{redirect_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRedirectLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Affiliate Link Deletes an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRedirectLinkAsync(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteRedirectLinkWithHttpInfoAsync(redirectId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an Affiliate Link Deletes an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Object>> DeleteRedirectLinkWithHttpInfoAsync(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'redirectId' when calling AffiliateApi->DeleteRedirectLink");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redirect_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(redirectId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.DeleteRedirectLink";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/affiliates/redirects/{redirect_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRedirectLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Affiliate Retrieves a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestAffiliate</returns>
        public RestAffiliate GetAffiliate(string id, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<RestAffiliate> localVarResponse = GetAffiliateWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Affiliate Retrieves a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestAffiliate</returns>
        public Keap.Core.V2.Client.ApiResponse<RestAffiliate> GetAffiliateWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->GetAffiliate");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.GetAffiliate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RestAffiliate>("/v2/affiliates/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Affiliate Retrieves a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestAffiliate</returns>
        public async System.Threading.Tasks.Task<RestAffiliate> GetAffiliateAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<RestAffiliate> localVarResponse = await GetAffiliateWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Affiliate Retrieves a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestAffiliate)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<RestAffiliate>> GetAffiliateWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->GetAffiliate");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.GetAffiliate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RestAffiliate>("/v2/affiliates/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateCommissionEarned</returns>
        public AffiliateCommissionEarned GetAffiliateCommissionTotal(string affiliateId, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<AffiliateCommissionEarned> localVarResponse = GetAffiliateCommissionTotalWithHttpInfo(affiliateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateCommissionEarned</returns>
        public Keap.Core.V2.Client.ApiResponse<AffiliateCommissionEarned> GetAffiliateCommissionTotalWithHttpInfo(string affiliateId, int operationIndex = 0)
        {
            // verify the required parameter 'affiliateId' is set
            if (affiliateId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'affiliateId' when calling AffiliateApi->GetAffiliateCommissionTotal");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("affiliate_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(affiliateId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.GetAffiliateCommissionTotal";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AffiliateCommissionEarned>("/v2/affiliates/{affiliate_id}/commissionTotal", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateCommissionTotal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateCommissionEarned</returns>
        public async System.Threading.Tasks.Task<AffiliateCommissionEarned> GetAffiliateCommissionTotalAsync(string affiliateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<AffiliateCommissionEarned> localVarResponse = await GetAffiliateCommissionTotalWithHttpInfoAsync(affiliateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateCommissionEarned)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<AffiliateCommissionEarned>> GetAffiliateCommissionTotalWithHttpInfoAsync(string affiliateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'affiliateId' is set
            if (affiliateId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'affiliateId' when calling AffiliateApi->GetAffiliateCommissionTotal");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("affiliate_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(affiliateId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.GetAffiliateCommissionTotal";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AffiliateCommissionEarned>("/v2/affiliates/{affiliate_id}/commissionTotal", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateCommissionTotal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;affiliateId&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliateId%3D%3D123&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;invoice_id&#x60; - &#x60;affowed_id&#x60; - &#x60;date_earned&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateCommissionsResponse</returns>
        public ListAffiliateCommissionsResponse GetAffiliateCommissions(string affiliateId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ListAffiliateCommissionsResponse> localVarResponse = GetAffiliateCommissionsWithHttpInfo(affiliateId, filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;affiliateId&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliateId%3D%3D123&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;invoice_id&#x60; - &#x60;affowed_id&#x60; - &#x60;date_earned&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateCommissionsResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<ListAffiliateCommissionsResponse> GetAffiliateCommissionsWithHttpInfo(string affiliateId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            // verify the required parameter 'affiliateId' is set
            if (affiliateId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'affiliateId' when calling AffiliateApi->GetAffiliateCommissions");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("affiliate_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(affiliateId)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "AffiliateApi.GetAffiliateCommissions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListAffiliateCommissionsResponse>("/v2/affiliates/{affiliate_id}:commissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateCommissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;affiliateId&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliateId%3D%3D123&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;invoice_id&#x60; - &#x60;affowed_id&#x60; - &#x60;date_earned&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateCommissionsResponse</returns>
        public async System.Threading.Tasks.Task<ListAffiliateCommissionsResponse> GetAffiliateCommissionsAsync(string affiliateId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<ListAffiliateCommissionsResponse> localVarResponse = await GetAffiliateCommissionsWithHttpInfoAsync(affiliateId, filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;affiliateId&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliateId%3D%3D123&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;invoice_id&#x60; - &#x60;affowed_id&#x60; - &#x60;date_earned&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateCommissionsResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ListAffiliateCommissionsResponse>> GetAffiliateCommissionsWithHttpInfoAsync(string affiliateId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'affiliateId' is set
            if (affiliateId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'affiliateId' when calling AffiliateApi->GetAffiliateCommissions");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("affiliate_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(affiliateId)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "AffiliateApi.GetAffiliateCommissions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListAffiliateCommissionsResponse>("/v2/affiliates/{affiliate_id}:commissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateCommissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Affiliate Model Get the custom fields and optional properties for the Affiliate object
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectModel</returns>
        public ObjectModel GetAffiliateCustomFields(int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ObjectModel> localVarResponse = GetAffiliateCustomFieldsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Affiliate Model Get the custom fields and optional properties for the Affiliate object
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectModel</returns>
        public Keap.Core.V2.Client.ApiResponse<ObjectModel> GetAffiliateCustomFieldsWithHttpInfo(int operationIndex = 0)
        {
            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AffiliateApi.GetAffiliateCustomFields";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ObjectModel>("/v2/affiliates/model", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateCustomFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Affiliate Model Get the custom fields and optional properties for the Affiliate object
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectModel</returns>
        public async System.Threading.Tasks.Task<ObjectModel> GetAffiliateCustomFieldsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<ObjectModel> localVarResponse = await GetAffiliateCustomFieldsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Affiliate Model Get the custom fields and optional properties for the Affiliate object
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectModel)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ObjectModel>> GetAffiliateCustomFieldsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AffiliateApi.GetAffiliateCustomFields";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ObjectModel>("/v2/affiliates/model", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateCustomFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Commission Program Retrieves a single Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateProgramV2</returns>
        public AffiliateProgramV2 GetCommissionProgram(string commissionProgramId, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<AffiliateProgramV2> localVarResponse = GetCommissionProgramWithHttpInfo(commissionProgramId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Commission Program Retrieves a single Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateProgramV2</returns>
        public Keap.Core.V2.Client.ApiResponse<AffiliateProgramV2> GetCommissionProgramWithHttpInfo(string commissionProgramId, int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->GetCommissionProgram");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.GetCommissionProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AffiliateProgramV2>("/v2/affiliates/commissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCommissionProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Commission Program Retrieves a single Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateProgramV2</returns>
        public async System.Threading.Tasks.Task<AffiliateProgramV2> GetCommissionProgramAsync(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<AffiliateProgramV2> localVarResponse = await GetCommissionProgramWithHttpInfoAsync(commissionProgramId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Commission Program Retrieves a single Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateProgramV2)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<AffiliateProgramV2>> GetCommissionProgramWithHttpInfoAsync(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->GetCommissionProgram");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.GetCommissionProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AffiliateProgramV2>("/v2/affiliates/commissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCommissionProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Affiliate Link Retrieves information about a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateLink</returns>
        public AffiliateLink GetRedirectLink(string redirectId, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<AffiliateLink> localVarResponse = GetRedirectLinkWithHttpInfo(redirectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Affiliate Link Retrieves information about a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateLink</returns>
        public Keap.Core.V2.Client.ApiResponse<AffiliateLink> GetRedirectLinkWithHttpInfo(string redirectId, int operationIndex = 0)
        {
            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'redirectId' when calling AffiliateApi->GetRedirectLink");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redirect_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(redirectId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.GetRedirectLink";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AffiliateLink>("/v2/affiliates/redirects/{redirect_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRedirectLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Affiliate Link Retrieves information about a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateLink</returns>
        public async System.Threading.Tasks.Task<AffiliateLink> GetRedirectLinkAsync(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<AffiliateLink> localVarResponse = await GetRedirectLinkWithHttpInfoAsync(redirectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Affiliate Link Retrieves information about a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateLink)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<AffiliateLink>> GetRedirectLinkWithHttpInfoAsync(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'redirectId' when calling AffiliateApi->GetRedirectLink");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redirect_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(redirectId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.GetRedirectLink";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AffiliateLink>("/v2/affiliates/redirects/{redirect_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRedirectLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliates Retrieves a list of Affiliates
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;affiliate_name&#x60; - (String) &#x60;contact_id&#x60; - (String) &#x60;status&#x60; - (String) &#x60;code&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;id&#x60; - &#x60;create_time&#x60; - &#x60;name&#x60; - &#x60;status&#x60; - &#x60;code&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliatesResponse</returns>
        public ListAffiliatesResponse ListAffiliate(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ListAffiliatesResponse> localVarResponse = ListAffiliateWithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliates Retrieves a list of Affiliates
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;affiliate_name&#x60; - (String) &#x60;contact_id&#x60; - (String) &#x60;status&#x60; - (String) &#x60;code&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;id&#x60; - &#x60;create_time&#x60; - &#x60;name&#x60; - &#x60;status&#x60; - &#x60;code&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliatesResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<ListAffiliatesResponse> ListAffiliateWithHttpInfo(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "AffiliateApi.ListAffiliate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListAffiliatesResponse>("/v2/affiliates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAffiliate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliates Retrieves a list of Affiliates
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;affiliate_name&#x60; - (String) &#x60;contact_id&#x60; - (String) &#x60;status&#x60; - (String) &#x60;code&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;id&#x60; - &#x60;create_time&#x60; - &#x60;name&#x60; - &#x60;status&#x60; - &#x60;code&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliatesResponse</returns>
        public async System.Threading.Tasks.Task<ListAffiliatesResponse> ListAffiliateAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<ListAffiliatesResponse> localVarResponse = await ListAffiliateWithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliates Retrieves a list of Affiliates
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;affiliate_name&#x60; - (String) &#x60;contact_id&#x60; - (String) &#x60;status&#x60; - (String) &#x60;code&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;id&#x60; - &#x60;create_time&#x60; - &#x60;name&#x60; - &#x60;status&#x60; - &#x60;code&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliatesResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ListAffiliatesResponse>> ListAffiliateWithHttpInfoAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "AffiliateApi.ListAffiliate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListAffiliatesResponse>("/v2/affiliates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAffiliate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliate Commission Programs Retrieves a list of Affiliate Commission Programs
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateCommissionProgramsResponse</returns>
        public ListAffiliateCommissionProgramsResponse ListAffiliateCommissionPrograms(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ListAffiliateCommissionProgramsResponse> localVarResponse = ListAffiliateCommissionProgramsWithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliate Commission Programs Retrieves a list of Affiliate Commission Programs
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateCommissionProgramsResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<ListAffiliateCommissionProgramsResponse> ListAffiliateCommissionProgramsWithHttpInfo(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "AffiliateApi.ListAffiliateCommissionPrograms";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListAffiliateCommissionProgramsResponse>("/v2/affiliates/commissionPrograms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAffiliateCommissionPrograms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliate Commission Programs Retrieves a list of Affiliate Commission Programs
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateCommissionProgramsResponse</returns>
        public async System.Threading.Tasks.Task<ListAffiliateCommissionProgramsResponse> ListAffiliateCommissionProgramsAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<ListAffiliateCommissionProgramsResponse> localVarResponse = await ListAffiliateCommissionProgramsWithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliate Commission Programs Retrieves a list of Affiliate Commission Programs
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateCommissionProgramsResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ListAffiliateCommissionProgramsResponse>> ListAffiliateCommissionProgramsWithHttpInfoAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "AffiliateApi.ListAffiliateCommissionPrograms";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListAffiliateCommissionProgramsResponse>("/v2/affiliates/commissionPrograms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAffiliateCommissionPrograms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliate Links Retrieves a list of Affiliate Links
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateLinksResponse</returns>
        public ListAffiliateLinksResponse ListAffiliateLinks(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ListAffiliateLinksResponse> localVarResponse = ListAffiliateLinksWithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliate Links Retrieves a list of Affiliate Links
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateLinksResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<ListAffiliateLinksResponse> ListAffiliateLinksWithHttpInfo(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "AffiliateApi.ListAffiliateLinks";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListAffiliateLinksResponse>("/v2/affiliates/redirects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAffiliateLinks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliate Links Retrieves a list of Affiliate Links
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateLinksResponse</returns>
        public async System.Threading.Tasks.Task<ListAffiliateLinksResponse> ListAffiliateLinksAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<ListAffiliateLinksResponse> localVarResponse = await ListAffiliateLinksWithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliate Links Retrieves a list of Affiliate Links
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateLinksResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ListAffiliateLinksResponse>> ListAffiliateLinksWithHttpInfoAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "AffiliateApi.ListAffiliateLinks";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListAffiliateLinksResponse>("/v2/affiliates/redirects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAffiliateLinks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliate Payments Retrieves a list of affiliate payments
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60; - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;create_time&#x60; - &#x60;pay_date&#x60; - &#x60;pay_amount&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliatePaymentsResponse</returns>
        public ListAffiliatePaymentsResponse ListAffiliatePayments(string affiliateId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ListAffiliatePaymentsResponse> localVarResponse = ListAffiliatePaymentsWithHttpInfo(affiliateId, filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliate Payments Retrieves a list of affiliate payments
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60; - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;create_time&#x60; - &#x60;pay_date&#x60; - &#x60;pay_amount&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliatePaymentsResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<ListAffiliatePaymentsResponse> ListAffiliatePaymentsWithHttpInfo(string affiliateId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            // verify the required parameter 'affiliateId' is set
            if (affiliateId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'affiliateId' when calling AffiliateApi->ListAffiliatePayments");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("affiliate_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(affiliateId)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "AffiliateApi.ListAffiliatePayments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListAffiliatePaymentsResponse>("/v2/affiliates/{affiliate_id}/payments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAffiliatePayments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliate Payments Retrieves a list of affiliate payments
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60; - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;create_time&#x60; - &#x60;pay_date&#x60; - &#x60;pay_amount&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliatePaymentsResponse</returns>
        public async System.Threading.Tasks.Task<ListAffiliatePaymentsResponse> ListAffiliatePaymentsAsync(string affiliateId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<ListAffiliatePaymentsResponse> localVarResponse = await ListAffiliatePaymentsWithHttpInfoAsync(affiliateId, filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliate Payments Retrieves a list of affiliate payments
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60; - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;create_time&#x60; - &#x60;pay_date&#x60; - &#x60;pay_amount&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliatePaymentsResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ListAffiliatePaymentsResponse>> ListAffiliatePaymentsWithHttpInfoAsync(string affiliateId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'affiliateId' is set
            if (affiliateId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'affiliateId' when calling AffiliateApi->ListAffiliatePayments");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("affiliate_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(affiliateId)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "AffiliateApi.ListAffiliatePayments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListAffiliatePaymentsResponse>("/v2/affiliates/{affiliate_id}/payments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAffiliatePayments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliate Summaries Retrieves a list of Affiliate Summaries
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) &#x60;affiliate_ids&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;affiliate_id&#x60; - &#x60;amount_earned&#x60; - &#x60;balance&#x60; - &#x60;clawbacks&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateSummariesResponse</returns>
        public ListAffiliateSummariesResponse ListSummaries(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ListAffiliateSummariesResponse> localVarResponse = ListSummariesWithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliate Summaries Retrieves a list of Affiliate Summaries
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) &#x60;affiliate_ids&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;affiliate_id&#x60; - &#x60;amount_earned&#x60; - &#x60;balance&#x60; - &#x60;clawbacks&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateSummariesResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<ListAffiliateSummariesResponse> ListSummariesWithHttpInfo(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "AffiliateApi.ListSummaries";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListAffiliateSummariesResponse>("/v2/affiliates/summaries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSummaries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliate Summaries Retrieves a list of Affiliate Summaries
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) &#x60;affiliate_ids&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;affiliate_id&#x60; - &#x60;amount_earned&#x60; - &#x60;balance&#x60; - &#x60;clawbacks&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateSummariesResponse</returns>
        public async System.Threading.Tasks.Task<ListAffiliateSummariesResponse> ListSummariesAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<ListAffiliateSummariesResponse> localVarResponse = await ListSummariesWithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliate Summaries Retrieves a list of Affiliate Summaries
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) &#x60;affiliate_ids&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;affiliate_id&#x60; - &#x60;amount_earned&#x60; - &#x60;balance&#x60; - &#x60;clawbacks&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateSummariesResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ListAffiliateSummariesResponse>> ListSummariesWithHttpInfoAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "AffiliateApi.ListSummaries";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListAffiliateSummariesResponse>("/v2/affiliates/summaries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSummaries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an Affiliate from a Commission Program Removes an Affiliate from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateRemoveFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveAffiliateFromProgram(string id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest, int operationIndex = 0)
        {
            RemoveAffiliateFromProgramWithHttpInfo(id, affiliateRemoveFromProgramRequest);
        }

        /// <summary>
        /// Remove an Affiliate from a Commission Program Removes an Affiliate from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateRemoveFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Core.V2.Client.ApiResponse<Object> RemoveAffiliateFromProgramWithHttpInfo(string id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->RemoveAffiliateFromProgram");
            }

            // verify the required parameter 'affiliateRemoveFromProgramRequest' is set
            if (affiliateRemoveFromProgramRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'affiliateRemoveFromProgramRequest' when calling AffiliateApi->RemoveAffiliateFromProgram");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = affiliateRemoveFromProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.RemoveAffiliateFromProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/affiliates/{id}:removeFromProgram", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAffiliateFromProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an Affiliate from a Commission Program Removes an Affiliate from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateRemoveFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAffiliateFromProgramAsync(string id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await RemoveAffiliateFromProgramWithHttpInfoAsync(id, affiliateRemoveFromProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove an Affiliate from a Commission Program Removes an Affiliate from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateRemoveFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Object>> RemoveAffiliateFromProgramWithHttpInfoAsync(string id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->RemoveAffiliateFromProgram");
            }

            // verify the required parameter 'affiliateRemoveFromProgramRequest' is set
            if (affiliateRemoveFromProgramRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'affiliateRemoveFromProgramRequest' when calling AffiliateApi->RemoveAffiliateFromProgram");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = affiliateRemoveFromProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.RemoveAffiliateFromProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/affiliates/{id}:removeFromProgram", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAffiliateFromProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a Product from a Commission Program Removes a Product from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteProgramCommissionRequest">deleteProgramCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveProductCommissionFromCommissions(string commissionId, DeleteProgramCommissionRequest deleteProgramCommissionRequest, int operationIndex = 0)
        {
            RemoveProductCommissionFromCommissionsWithHttpInfo(commissionId, deleteProgramCommissionRequest);
        }

        /// <summary>
        /// Remove a Product from a Commission Program Removes a Product from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteProgramCommissionRequest">deleteProgramCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Core.V2.Client.ApiResponse<Object> RemoveProductCommissionFromCommissionsWithHttpInfo(string commissionId, DeleteProgramCommissionRequest deleteProgramCommissionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'commissionId' is set
            if (commissionId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionId' when calling AffiliateApi->RemoveProductCommissionFromCommissions");
            }

            // verify the required parameter 'deleteProgramCommissionRequest' is set
            if (deleteProgramCommissionRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'deleteProgramCommissionRequest' when calling AffiliateApi->RemoveProductCommissionFromCommissions");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionId)); // path parameter
            localVarRequestOptions.Data = deleteProgramCommissionRequest;

            localVarRequestOptions.Operation = "AffiliateApi.RemoveProductCommissionFromCommissions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/affiliates/commissionPrograms/{commission_id}:removeProductCommission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveProductCommissionFromCommissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a Product from a Commission Program Removes a Product from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteProgramCommissionRequest">deleteProgramCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveProductCommissionFromCommissionsAsync(string commissionId, DeleteProgramCommissionRequest deleteProgramCommissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await RemoveProductCommissionFromCommissionsWithHttpInfoAsync(commissionId, deleteProgramCommissionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a Product from a Commission Program Removes a Product from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteProgramCommissionRequest">deleteProgramCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Object>> RemoveProductCommissionFromCommissionsWithHttpInfoAsync(string commissionId, DeleteProgramCommissionRequest deleteProgramCommissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'commissionId' is set
            if (commissionId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionId' when calling AffiliateApi->RemoveProductCommissionFromCommissions");
            }

            // verify the required parameter 'deleteProgramCommissionRequest' is set
            if (deleteProgramCommissionRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'deleteProgramCommissionRequest' when calling AffiliateApi->RemoveProductCommissionFromCommissions");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionId)); // path parameter
            localVarRequestOptions.Data = deleteProgramCommissionRequest;

            localVarRequestOptions.Operation = "AffiliateApi.RemoveProductCommissionFromCommissions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/affiliates/commissionPrograms/{commission_id}:removeProductCommission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveProductCommissionFromCommissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a Subscription from a Commission Program Removes a Subscription from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveSubscriptionPlanCommissionFromCommissions(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0)
        {
            RemoveSubscriptionPlanCommissionFromCommissionsWithHttpInfo(commissionId, deleteSubscriptionPlanCommissionRequest);
        }

        /// <summary>
        /// Remove a Subscription from a Commission Program Removes a Subscription from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Core.V2.Client.ApiResponse<Object> RemoveSubscriptionPlanCommissionFromCommissionsWithHttpInfo(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'commissionId' is set
            if (commissionId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionId' when calling AffiliateApi->RemoveSubscriptionPlanCommissionFromCommissions");
            }

            // verify the required parameter 'deleteSubscriptionPlanCommissionRequest' is set
            if (deleteSubscriptionPlanCommissionRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'deleteSubscriptionPlanCommissionRequest' when calling AffiliateApi->RemoveSubscriptionPlanCommissionFromCommissions");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionId)); // path parameter
            localVarRequestOptions.Data = deleteSubscriptionPlanCommissionRequest;

            localVarRequestOptions.Operation = "AffiliateApi.RemoveSubscriptionPlanCommissionFromCommissions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/affiliates/commissionPrograms/{commission_id}:removeSubscriptionCommission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSubscriptionPlanCommissionFromCommissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a Subscription from a Commission Program Removes a Subscription from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveSubscriptionPlanCommissionFromCommissionsAsync(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await RemoveSubscriptionPlanCommissionFromCommissionsWithHttpInfoAsync(commissionId, deleteSubscriptionPlanCommissionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a Subscription from a Commission Program Removes a Subscription from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Object>> RemoveSubscriptionPlanCommissionFromCommissionsWithHttpInfoAsync(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'commissionId' is set
            if (commissionId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionId' when calling AffiliateApi->RemoveSubscriptionPlanCommissionFromCommissions");
            }

            // verify the required parameter 'deleteSubscriptionPlanCommissionRequest' is set
            if (deleteSubscriptionPlanCommissionRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'deleteSubscriptionPlanCommissionRequest' when calling AffiliateApi->RemoveSubscriptionPlanCommissionFromCommissions");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionId)); // path parameter
            localVarRequestOptions.Data = deleteSubscriptionPlanCommissionRequest;

            localVarRequestOptions.Operation = "AffiliateApi.RemoveSubscriptionPlanCommissionFromCommissions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/affiliates/commissionPrograms/{commission_id}:removeSubscriptionCommission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSubscriptionPlanCommissionFromCommissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Affiliate Updates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateAffiliateRequest">Request to update an affiliate (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestAffiliate</returns>
        public RestAffiliate UpdateAffiliate(string id, UpdateAffiliateRequest? updateAffiliateRequest = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<RestAffiliate> localVarResponse = UpdateAffiliateWithHttpInfo(id, updateAffiliateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Affiliate Updates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateAffiliateRequest">Request to update an affiliate (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestAffiliate</returns>
        public Keap.Core.V2.Client.ApiResponse<RestAffiliate> UpdateAffiliateWithHttpInfo(string id, UpdateAffiliateRequest? updateAffiliateRequest = default, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->UpdateAffiliate");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateAffiliateRequest;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateAffiliate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<RestAffiliate>("/v2/affiliates/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAffiliate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Affiliate Updates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateAffiliateRequest">Request to update an affiliate (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestAffiliate</returns>
        public async System.Threading.Tasks.Task<RestAffiliate> UpdateAffiliateAsync(string id, UpdateAffiliateRequest? updateAffiliateRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<RestAffiliate> localVarResponse = await UpdateAffiliateWithHttpInfoAsync(id, updateAffiliateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Affiliate Updates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateAffiliateRequest">Request to update an affiliate (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestAffiliate)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<RestAffiliate>> UpdateAffiliateWithHttpInfoAsync(string id, UpdateAffiliateRequest? updateAffiliateRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->UpdateAffiliate");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateAffiliateRequest;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateAffiliate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<RestAffiliate>("/v2/affiliates/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAffiliate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Custom Field Updates a custom field of the specified type and options to the Affiliate object.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        public CustomFieldMetaData UpdateAffiliateCustomField(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<CustomFieldMetaData> localVarResponse = UpdateAffiliateCustomFieldWithHttpInfo(customFieldId, updateCustomFieldMetaDataRequest, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Custom Field Updates a custom field of the specified type and options to the Affiliate object.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        public Keap.Core.V2.Client.ApiResponse<CustomFieldMetaData> UpdateAffiliateCustomFieldWithHttpInfo(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default, int operationIndex = 0)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling AffiliateApi->UpdateAffiliateCustomField");
            }

            // verify the required parameter 'updateCustomFieldMetaDataRequest' is set
            if (updateCustomFieldMetaDataRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateCustomFieldMetaDataRequest' when calling AffiliateApi->UpdateAffiliateCustomField");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateCustomFieldMetaDataRequest;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateAffiliateCustomField";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<CustomFieldMetaData>("/v2/affiliates/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAffiliateCustomField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Custom Field Updates a custom field of the specified type and options to the Affiliate object.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        public async System.Threading.Tasks.Task<CustomFieldMetaData> UpdateAffiliateCustomFieldAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<CustomFieldMetaData> localVarResponse = await UpdateAffiliateCustomFieldWithHttpInfoAsync(customFieldId, updateCustomFieldMetaDataRequest, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Custom Field Updates a custom field of the specified type and options to the Affiliate object.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<CustomFieldMetaData>> UpdateAffiliateCustomFieldWithHttpInfoAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling AffiliateApi->UpdateAffiliateCustomField");
            }

            // verify the required parameter 'updateCustomFieldMetaDataRequest' is set
            if (updateCustomFieldMetaDataRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateCustomFieldMetaDataRequest' when calling AffiliateApi->UpdateAffiliateCustomField");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateCustomFieldMetaDataRequest;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateAffiliateCustomField";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CustomFieldMetaData>("/v2/affiliates/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAffiliateCustomField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Affiliate Commission Program Updates the properties of an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateCommissionProgramRequest">updateCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateCommissionProgramResponse</returns>
        public AffiliateCommissionProgramResponse UpdateCommissionProgram(string commissionProgramId, UpdateCommissionProgramRequest updateCommissionProgramRequest, List<string>? updateMask = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<AffiliateCommissionProgramResponse> localVarResponse = UpdateCommissionProgramWithHttpInfo(commissionProgramId, updateCommissionProgramRequest, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Affiliate Commission Program Updates the properties of an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateCommissionProgramRequest">updateCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateCommissionProgramResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<AffiliateCommissionProgramResponse> UpdateCommissionProgramWithHttpInfo(string commissionProgramId, UpdateCommissionProgramRequest updateCommissionProgramRequest, List<string>? updateMask = default, int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->UpdateCommissionProgram");
            }

            // verify the required parameter 'updateCommissionProgramRequest' is set
            if (updateCommissionProgramRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateCommissionProgramRequest' when calling AffiliateApi->UpdateCommissionProgram");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateCommissionProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<AffiliateCommissionProgramResponse>("/v2/affiliates/commissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCommissionProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Affiliate Commission Program Updates the properties of an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateCommissionProgramRequest">updateCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateCommissionProgramResponse</returns>
        public async System.Threading.Tasks.Task<AffiliateCommissionProgramResponse> UpdateCommissionProgramAsync(string commissionProgramId, UpdateCommissionProgramRequest updateCommissionProgramRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<AffiliateCommissionProgramResponse> localVarResponse = await UpdateCommissionProgramWithHttpInfoAsync(commissionProgramId, updateCommissionProgramRequest, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Affiliate Commission Program Updates the properties of an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateCommissionProgramRequest">updateCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateCommissionProgramResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<AffiliateCommissionProgramResponse>> UpdateCommissionProgramWithHttpInfoAsync(string commissionProgramId, UpdateCommissionProgramRequest updateCommissionProgramRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->UpdateCommissionProgram");
            }

            // verify the required parameter 'updateCommissionProgramRequest' is set
            if (updateCommissionProgramRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateCommissionProgramRequest' when calling AffiliateApi->UpdateCommissionProgram");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateCommissionProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<AffiliateCommissionProgramResponse>("/v2/affiliates/commissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCommissionProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Default Commission Program Updates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetDefaultCommissionProgramResponse</returns>
        public SetDefaultCommissionProgramResponse UpdateDefaultCommissionProgram(string commissionProgramId, List<string>? updateMask = default, UpdateDefaultCommissionProgramRequest? updateDefaultCommissionProgramRequest = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<SetDefaultCommissionProgramResponse> localVarResponse = UpdateDefaultCommissionProgramWithHttpInfo(commissionProgramId, updateMask, updateDefaultCommissionProgramRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Default Commission Program Updates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetDefaultCommissionProgramResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<SetDefaultCommissionProgramResponse> UpdateDefaultCommissionProgramWithHttpInfo(string commissionProgramId, List<string>? updateMask = default, UpdateDefaultCommissionProgramRequest? updateDefaultCommissionProgramRequest = default, int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->UpdateDefaultCommissionProgram");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateDefaultCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateDefaultCommissionProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<SetDefaultCommissionProgramResponse>("/v2/affiliates/commissionPrograms/defaultCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDefaultCommissionProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Default Commission Program Updates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetDefaultCommissionProgramResponse</returns>
        public async System.Threading.Tasks.Task<SetDefaultCommissionProgramResponse> UpdateDefaultCommissionProgramAsync(string commissionProgramId, List<string>? updateMask = default, UpdateDefaultCommissionProgramRequest? updateDefaultCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<SetDefaultCommissionProgramResponse> localVarResponse = await UpdateDefaultCommissionProgramWithHttpInfoAsync(commissionProgramId, updateMask, updateDefaultCommissionProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Default Commission Program Updates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetDefaultCommissionProgramResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<SetDefaultCommissionProgramResponse>> UpdateDefaultCommissionProgramWithHttpInfoAsync(string commissionProgramId, List<string>? updateMask = default, UpdateDefaultCommissionProgramRequest? updateDefaultCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->UpdateDefaultCommissionProgram");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateDefaultCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateDefaultCommissionProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<SetDefaultCommissionProgramResponse>("/v2/affiliates/commissionPrograms/defaultCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDefaultCommissionProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Product Commission Program Updates a Product Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductCommissionProgram</returns>
        public ProductCommissionProgram UpdateProductCommissionProgram(string commissionProgramId, List<string>? updateMask = default, UpdateProductCommissionProgramRequest? updateProductCommissionProgramRequest = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ProductCommissionProgram> localVarResponse = UpdateProductCommissionProgramWithHttpInfo(commissionProgramId, updateMask, updateProductCommissionProgramRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Product Commission Program Updates a Product Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductCommissionProgram</returns>
        public Keap.Core.V2.Client.ApiResponse<ProductCommissionProgram> UpdateProductCommissionProgramWithHttpInfo(string commissionProgramId, List<string>? updateMask = default, UpdateProductCommissionProgramRequest? updateProductCommissionProgramRequest = default, int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->UpdateProductCommissionProgram");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateProductCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateProductCommissionProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<ProductCommissionProgram>("/v2/affiliates/commissionPrograms/productCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductCommissionProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Product Commission Program Updates a Product Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductCommissionProgram</returns>
        public async System.Threading.Tasks.Task<ProductCommissionProgram> UpdateProductCommissionProgramAsync(string commissionProgramId, List<string>? updateMask = default, UpdateProductCommissionProgramRequest? updateProductCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<ProductCommissionProgram> localVarResponse = await UpdateProductCommissionProgramWithHttpInfoAsync(commissionProgramId, updateMask, updateProductCommissionProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Product Commission Program Updates a Product Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductCommissionProgram)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ProductCommissionProgram>> UpdateProductCommissionProgramWithHttpInfoAsync(string commissionProgramId, List<string>? updateMask = default, UpdateProductCommissionProgramRequest? updateProductCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->UpdateProductCommissionProgram");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateProductCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateProductCommissionProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ProductCommissionProgram>("/v2/affiliates/commissionPrograms/productCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductCommissionProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Affiliate Link Updates an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="createOrUpdateAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateLink</returns>
        public AffiliateLink UpdateRedirectLink(string redirectId, CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<AffiliateLink> localVarResponse = UpdateRedirectLinkWithHttpInfo(redirectId, createOrUpdateAffiliateLinkRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Affiliate Link Updates an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="createOrUpdateAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateLink</returns>
        public Keap.Core.V2.Client.ApiResponse<AffiliateLink> UpdateRedirectLinkWithHttpInfo(string redirectId, CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest, int operationIndex = 0)
        {
            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'redirectId' when calling AffiliateApi->UpdateRedirectLink");
            }

            // verify the required parameter 'createOrUpdateAffiliateLinkRequest' is set
            if (createOrUpdateAffiliateLinkRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'createOrUpdateAffiliateLinkRequest' when calling AffiliateApi->UpdateRedirectLink");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redirect_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(redirectId)); // path parameter
            localVarRequestOptions.Data = createOrUpdateAffiliateLinkRequest;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateRedirectLink";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<AffiliateLink>("/v2/affiliates/redirects/{redirect_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRedirectLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Affiliate Link Updates an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="createOrUpdateAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateLink</returns>
        public async System.Threading.Tasks.Task<AffiliateLink> UpdateRedirectLinkAsync(string redirectId, CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<AffiliateLink> localVarResponse = await UpdateRedirectLinkWithHttpInfoAsync(redirectId, createOrUpdateAffiliateLinkRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Affiliate Link Updates an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="createOrUpdateAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateLink)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<AffiliateLink>> UpdateRedirectLinkWithHttpInfoAsync(string redirectId, CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'redirectId' when calling AffiliateApi->UpdateRedirectLink");
            }

            // verify the required parameter 'createOrUpdateAffiliateLinkRequest' is set
            if (createOrUpdateAffiliateLinkRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'createOrUpdateAffiliateLinkRequest' when calling AffiliateApi->UpdateRedirectLink");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redirect_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(redirectId)); // path parameter
            localVarRequestOptions.Data = createOrUpdateAffiliateLinkRequest;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateRedirectLink";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<AffiliateLink>("/v2/affiliates/redirects/{redirect_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRedirectLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Subscription Commission Program Updates a Subscription Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionCommissionProgram</returns>
        public SubscriptionCommissionProgram UpdateSubscriptionCommissionProgram(string commissionProgramId, List<string>? updateMask = default, UpdateSubscriptionCommissionProgramRequest? updateSubscriptionCommissionProgramRequest = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<SubscriptionCommissionProgram> localVarResponse = UpdateSubscriptionCommissionProgramWithHttpInfo(commissionProgramId, updateMask, updateSubscriptionCommissionProgramRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Subscription Commission Program Updates a Subscription Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionCommissionProgram</returns>
        public Keap.Core.V2.Client.ApiResponse<SubscriptionCommissionProgram> UpdateSubscriptionCommissionProgramWithHttpInfo(string commissionProgramId, List<string>? updateMask = default, UpdateSubscriptionCommissionProgramRequest? updateSubscriptionCommissionProgramRequest = default, int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->UpdateSubscriptionCommissionProgram");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateSubscriptionCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateSubscriptionCommissionProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<SubscriptionCommissionProgram>("/v2/affiliates/commissionPrograms/subscriptionCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscriptionCommissionProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Subscription Commission Program Updates a Subscription Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionCommissionProgram</returns>
        public async System.Threading.Tasks.Task<SubscriptionCommissionProgram> UpdateSubscriptionCommissionProgramAsync(string commissionProgramId, List<string>? updateMask = default, UpdateSubscriptionCommissionProgramRequest? updateSubscriptionCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<SubscriptionCommissionProgram> localVarResponse = await UpdateSubscriptionCommissionProgramWithHttpInfoAsync(commissionProgramId, updateMask, updateSubscriptionCommissionProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Subscription Commission Program Updates a Subscription Commission Program
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="updateSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionCommissionProgram)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<SubscriptionCommissionProgram>> UpdateSubscriptionCommissionProgramWithHttpInfoAsync(string commissionProgramId, List<string>? updateMask = default, UpdateSubscriptionCommissionProgramRequest? updateSubscriptionCommissionProgramRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->UpdateSubscriptionCommissionProgram");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateSubscriptionCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateSubscriptionCommissionProgram";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<SubscriptionCommissionProgram>("/v2/affiliates/commissionPrograms/subscriptionCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscriptionCommissionProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
