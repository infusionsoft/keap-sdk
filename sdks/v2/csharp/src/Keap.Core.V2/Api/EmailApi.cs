/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.843039-hf-202508121547
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Keap.Core.V2.Client;
using Keap.Core.V2.Client.Auth;
using Keap.Core.V2.Model;

namespace Keap.Core.V2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an Email Record
        /// </summary>
        /// <remarks>
        /// Creates a Record of an Email sent to a Contact
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailSentRequest">emailWithContent</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailSentWithContent</returns>
        EmailSentWithContent CreateEmail(CreateEmailSentRequest createEmailSentRequest, int operationIndex = 0);

        /// <summary>
        /// Create an Email Record
        /// </summary>
        /// <remarks>
        /// Creates a Record of an Email sent to a Contact
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailSentRequest">emailWithContent</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailSentWithContent</returns>
        ApiResponse<EmailSentWithContent> CreateEmailWithHttpInfo(CreateEmailSentRequest createEmailSentRequest, int operationIndex = 0);
        /// <summary>
        /// Create a set of Email Records
        /// </summary>
        /// <remarks>
        /// Creates a set of Records of Emails sent to Contacts, maximum 1000 per transaction.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailsSentRequest">Email records to persist, with content. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailsSentList</returns>
        EmailsSentList CreateEmails(CreateEmailsSentRequest? createEmailsSentRequest = default, int operationIndex = 0);

        /// <summary>
        /// Create a set of Email Records
        /// </summary>
        /// <remarks>
        /// Creates a set of Records of Emails sent to Contacts, maximum 1000 per transaction.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailsSentRequest">Email records to persist, with content. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailsSentList</returns>
        ApiResponse<EmailsSentList> CreateEmailsWithHttpInfo(CreateEmailsSentRequest? createEmailsSentRequest = default, int operationIndex = 0);
        /// <summary>
        /// Delete an Email Record
        /// </summary>
        /// <remarks>
        /// Deletes a specific Email Record
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteEmail(string id, int operationIndex = 0);

        /// <summary>
        /// Delete an Email Record
        /// </summary>
        /// <remarks>
        /// Deletes a specific Email Record
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEmailWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Remove a set of Email Records
        /// </summary>
        /// <remarks>
        /// Removes a set of Email Records
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteEmailsRequest">deleteEmailsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteEmailsResponse</returns>
        DeleteEmailsResponse DeleteEmails(DeleteEmailsRequest deleteEmailsRequest, int operationIndex = 0);

        /// <summary>
        /// Remove a set of Email Records
        /// </summary>
        /// <remarks>
        /// Removes a set of Email Records
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteEmailsRequest">deleteEmailsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteEmailsResponse</returns>
        ApiResponse<DeleteEmailsResponse> DeleteEmailsWithHttpInfo(DeleteEmailsRequest deleteEmailsRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve an Email
        /// </summary>
        /// <remarks>
        /// Retrieves a single Email that has been sent
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailSentWithContent</returns>
        EmailSentWithContent GetEmail(string id, int operationIndex = 0);

        /// <summary>
        /// Retrieve an Email
        /// </summary>
        /// <remarks>
        /// Retrieves a single Email that has been sent
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailSentWithContent</returns>
        ApiResponse<EmailSentWithContent> GetEmailWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Retrieve an email template
        /// </summary>
        /// <remarks>
        /// Retrieve an email template
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTemplateId">email_template_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailTemplate</returns>
        EmailTemplate GetEmailTemplate(string emailTemplateId, int operationIndex = 0);

        /// <summary>
        /// Retrieve an email template
        /// </summary>
        /// <remarks>
        /// Retrieve an email template
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTemplateId">email_template_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailTemplate</returns>
        ApiResponse<EmailTemplate> GetEmailTemplateWithHttpInfo(string emailTemplateId, int operationIndex = 0);
        /// <summary>
        /// Send an Email
        /// </summary>
        /// <remarks>
        /// Sends an Email to a list of Contacts
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailSendRequest">emailSendRequest (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SendEmail(EmailSendRequest? emailSendRequest = default, int operationIndex = 0);

        /// <summary>
        /// Send an Email
        /// </summary>
        /// <remarks>
        /// Sends an Email to a list of Contacts
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailSendRequest">emailSendRequest (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendEmailWithHttpInfo(EmailSendRequest? emailSendRequest = default, int operationIndex = 0);
        /// <summary>
        /// Send an email based on a template
        /// </summary>
        /// <remarks>
        /// Send an email based on a template
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailSendTemplateRequest">Use a template to send an email to a list of contacts  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SendEmailTemplate(EmailSendTemplateRequest? emailSendTemplateRequest = default, int operationIndex = 0);

        /// <summary>
        /// Send an email based on a template
        /// </summary>
        /// <remarks>
        /// Send an email based on a template
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailSendTemplateRequest">Use a template to send an email to a list of contacts  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendEmailTemplateWithHttpInfo(EmailSendTemplateRequest? emailSendTemplateRequest = default, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create an Email Record
        /// </summary>
        /// <remarks>
        /// Creates a Record of an Email sent to a Contact
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailSentRequest">emailWithContent</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSentWithContent</returns>
        System.Threading.Tasks.Task<EmailSentWithContent> CreateEmailAsync(CreateEmailSentRequest createEmailSentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an Email Record
        /// </summary>
        /// <remarks>
        /// Creates a Record of an Email sent to a Contact
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailSentRequest">emailWithContent</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSentWithContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSentWithContent>> CreateEmailWithHttpInfoAsync(CreateEmailSentRequest createEmailSentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create a set of Email Records
        /// </summary>
        /// <remarks>
        /// Creates a set of Records of Emails sent to Contacts, maximum 1000 per transaction.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailsSentRequest">Email records to persist, with content. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailsSentList</returns>
        System.Threading.Tasks.Task<EmailsSentList> CreateEmailsAsync(CreateEmailsSentRequest? createEmailsSentRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a set of Email Records
        /// </summary>
        /// <remarks>
        /// Creates a set of Records of Emails sent to Contacts, maximum 1000 per transaction.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailsSentRequest">Email records to persist, with content. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailsSentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailsSentList>> CreateEmailsWithHttpInfoAsync(CreateEmailsSentRequest? createEmailsSentRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete an Email Record
        /// </summary>
        /// <remarks>
        /// Deletes a specific Email Record
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEmailAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an Email Record
        /// </summary>
        /// <remarks>
        /// Deletes a specific Email Record
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmailWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Remove a set of Email Records
        /// </summary>
        /// <remarks>
        /// Removes a set of Email Records
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteEmailsRequest">deleteEmailsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteEmailsResponse</returns>
        System.Threading.Tasks.Task<DeleteEmailsResponse> DeleteEmailsAsync(DeleteEmailsRequest deleteEmailsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove a set of Email Records
        /// </summary>
        /// <remarks>
        /// Removes a set of Email Records
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteEmailsRequest">deleteEmailsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteEmailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteEmailsResponse>> DeleteEmailsWithHttpInfoAsync(DeleteEmailsRequest deleteEmailsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieve an Email
        /// </summary>
        /// <remarks>
        /// Retrieves a single Email that has been sent
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSentWithContent</returns>
        System.Threading.Tasks.Task<EmailSentWithContent> GetEmailAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve an Email
        /// </summary>
        /// <remarks>
        /// Retrieves a single Email that has been sent
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSentWithContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSentWithContent>> GetEmailWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieve an email template
        /// </summary>
        /// <remarks>
        /// Retrieve an email template
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTemplateId">email_template_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailTemplate</returns>
        System.Threading.Tasks.Task<EmailTemplate> GetEmailTemplateAsync(string emailTemplateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve an email template
        /// </summary>
        /// <remarks>
        /// Retrieve an email template
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTemplateId">email_template_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailTemplate>> GetEmailTemplateWithHttpInfoAsync(string emailTemplateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Send an Email
        /// </summary>
        /// <remarks>
        /// Sends an Email to a list of Contacts
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailSendRequest">emailSendRequest (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendEmailAsync(EmailSendRequest? emailSendRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send an Email
        /// </summary>
        /// <remarks>
        /// Sends an Email to a list of Contacts
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailSendRequest">emailSendRequest (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendEmailWithHttpInfoAsync(EmailSendRequest? emailSendRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Send an email based on a template
        /// </summary>
        /// <remarks>
        /// Send an email based on a template
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailSendTemplateRequest">Use a template to send an email to a list of contacts  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendEmailTemplateAsync(EmailSendTemplateRequest? emailSendTemplateRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send an email based on a template
        /// </summary>
        /// <remarks>
        /// Send an email based on a template
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailSendTemplateRequest">Use a template to send an email to a list of contacts  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendEmailTemplateWithHttpInfoAsync(EmailSendTemplateRequest? emailSendTemplateRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailApi : IEmailApiSync, IEmailApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmailApi : IEmailApi
    {
        private Keap.Core.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailApi(string basePath)
        {
            this.Configuration = Keap.Core.V2.Client.Configuration.MergeConfigurations(
                Keap.Core.V2.Client.GlobalConfiguration.Instance,
                new Keap.Core.V2.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmailApi(Keap.Core.V2.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Keap.Core.V2.Client.Configuration.MergeConfigurations(
                Keap.Core.V2.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EmailApi(Keap.Core.V2.Client.ISynchronousClient client, Keap.Core.V2.Client.IAsynchronousClient asyncClient, Keap.Core.V2.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Keap.Core.V2.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Keap.Core.V2.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Keap.Core.V2.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Keap.Core.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an Email Record Creates a Record of an Email sent to a Contact
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailSentRequest">emailWithContent</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailSentWithContent</returns>
        public EmailSentWithContent CreateEmail(CreateEmailSentRequest createEmailSentRequest, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<EmailSentWithContent> localVarResponse = CreateEmailWithHttpInfo(createEmailSentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Email Record Creates a Record of an Email sent to a Contact
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailSentRequest">emailWithContent</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailSentWithContent</returns>
        public Keap.Core.V2.Client.ApiResponse<EmailSentWithContent> CreateEmailWithHttpInfo(CreateEmailSentRequest createEmailSentRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createEmailSentRequest' is set
            if (createEmailSentRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'createEmailSentRequest' when calling EmailApi->CreateEmail");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEmailSentRequest;

            localVarRequestOptions.Operation = "EmailApi.CreateEmail";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<EmailSentWithContent>("/v2/emails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Email Record Creates a Record of an Email sent to a Contact
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailSentRequest">emailWithContent</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSentWithContent</returns>
        public async System.Threading.Tasks.Task<EmailSentWithContent> CreateEmailAsync(CreateEmailSentRequest createEmailSentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<EmailSentWithContent> localVarResponse = await CreateEmailWithHttpInfoAsync(createEmailSentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Email Record Creates a Record of an Email sent to a Contact
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailSentRequest">emailWithContent</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSentWithContent)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<EmailSentWithContent>> CreateEmailWithHttpInfoAsync(CreateEmailSentRequest createEmailSentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createEmailSentRequest' is set
            if (createEmailSentRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'createEmailSentRequest' when calling EmailApi->CreateEmail");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEmailSentRequest;

            localVarRequestOptions.Operation = "EmailApi.CreateEmail";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EmailSentWithContent>("/v2/emails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a set of Email Records Creates a set of Records of Emails sent to Contacts, maximum 1000 per transaction.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailsSentRequest">Email records to persist, with content. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailsSentList</returns>
        public EmailsSentList CreateEmails(CreateEmailsSentRequest? createEmailsSentRequest = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<EmailsSentList> localVarResponse = CreateEmailsWithHttpInfo(createEmailsSentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a set of Email Records Creates a set of Records of Emails sent to Contacts, maximum 1000 per transaction.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailsSentRequest">Email records to persist, with content. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailsSentList</returns>
        public Keap.Core.V2.Client.ApiResponse<EmailsSentList> CreateEmailsWithHttpInfo(CreateEmailsSentRequest? createEmailsSentRequest = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEmailsSentRequest;

            localVarRequestOptions.Operation = "EmailApi.CreateEmails";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<EmailsSentList>("/v2/emails:batchAdd", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEmails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a set of Email Records Creates a set of Records of Emails sent to Contacts, maximum 1000 per transaction.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailsSentRequest">Email records to persist, with content. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailsSentList</returns>
        public async System.Threading.Tasks.Task<EmailsSentList> CreateEmailsAsync(CreateEmailsSentRequest? createEmailsSentRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<EmailsSentList> localVarResponse = await CreateEmailsWithHttpInfoAsync(createEmailsSentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a set of Email Records Creates a set of Records of Emails sent to Contacts, maximum 1000 per transaction.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailsSentRequest">Email records to persist, with content. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailsSentList)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<EmailsSentList>> CreateEmailsWithHttpInfoAsync(CreateEmailsSentRequest? createEmailsSentRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEmailsSentRequest;

            localVarRequestOptions.Operation = "EmailApi.CreateEmails";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EmailsSentList>("/v2/emails:batchAdd", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEmails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Email Record Deletes a specific Email Record
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteEmail(string id, int operationIndex = 0)
        {
            DeleteEmailWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an Email Record Deletes a specific Email Record
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Core.V2.Client.ApiResponse<Object> DeleteEmailWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling EmailApi->DeleteEmail");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EmailApi.DeleteEmail";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/emails/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Email Record Deletes a specific Email Record
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEmailAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteEmailWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an Email Record Deletes a specific Email Record
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Object>> DeleteEmailWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling EmailApi->DeleteEmail");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EmailApi.DeleteEmail";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/emails/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a set of Email Records Removes a set of Email Records
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteEmailsRequest">deleteEmailsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteEmailsResponse</returns>
        public DeleteEmailsResponse DeleteEmails(DeleteEmailsRequest deleteEmailsRequest, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<DeleteEmailsResponse> localVarResponse = DeleteEmailsWithHttpInfo(deleteEmailsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a set of Email Records Removes a set of Email Records
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteEmailsRequest">deleteEmailsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteEmailsResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<DeleteEmailsResponse> DeleteEmailsWithHttpInfo(DeleteEmailsRequest deleteEmailsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'deleteEmailsRequest' is set
            if (deleteEmailsRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'deleteEmailsRequest' when calling EmailApi->DeleteEmails");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteEmailsRequest;

            localVarRequestOptions.Operation = "EmailApi.DeleteEmails";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DeleteEmailsResponse>("/v2/emails:batchRemove", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEmails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a set of Email Records Removes a set of Email Records
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteEmailsRequest">deleteEmailsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteEmailsResponse</returns>
        public async System.Threading.Tasks.Task<DeleteEmailsResponse> DeleteEmailsAsync(DeleteEmailsRequest deleteEmailsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<DeleteEmailsResponse> localVarResponse = await DeleteEmailsWithHttpInfoAsync(deleteEmailsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a set of Email Records Removes a set of Email Records
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteEmailsRequest">deleteEmailsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteEmailsResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<DeleteEmailsResponse>> DeleteEmailsWithHttpInfoAsync(DeleteEmailsRequest deleteEmailsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'deleteEmailsRequest' is set
            if (deleteEmailsRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'deleteEmailsRequest' when calling EmailApi->DeleteEmails");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteEmailsRequest;

            localVarRequestOptions.Operation = "EmailApi.DeleteEmails";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DeleteEmailsResponse>("/v2/emails:batchRemove", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEmails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Email Retrieves a single Email that has been sent
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailSentWithContent</returns>
        public EmailSentWithContent GetEmail(string id, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<EmailSentWithContent> localVarResponse = GetEmailWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Email Retrieves a single Email that has been sent
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailSentWithContent</returns>
        public Keap.Core.V2.Client.ApiResponse<EmailSentWithContent> GetEmailWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling EmailApi->GetEmail");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EmailApi.GetEmail";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<EmailSentWithContent>("/v2/emails/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Email Retrieves a single Email that has been sent
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSentWithContent</returns>
        public async System.Threading.Tasks.Task<EmailSentWithContent> GetEmailAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<EmailSentWithContent> localVarResponse = await GetEmailWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Email Retrieves a single Email that has been sent
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSentWithContent)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<EmailSentWithContent>> GetEmailWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling EmailApi->GetEmail");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EmailApi.GetEmail";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailSentWithContent>("/v2/emails/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an email template Retrieve an email template
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTemplateId">email_template_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailTemplate</returns>
        public EmailTemplate GetEmailTemplate(string emailTemplateId, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<EmailTemplate> localVarResponse = GetEmailTemplateWithHttpInfo(emailTemplateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an email template Retrieve an email template
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTemplateId">email_template_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailTemplate</returns>
        public Keap.Core.V2.Client.ApiResponse<EmailTemplate> GetEmailTemplateWithHttpInfo(string emailTemplateId, int operationIndex = 0)
        {
            // verify the required parameter 'emailTemplateId' is set
            if (emailTemplateId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'emailTemplateId' when calling EmailApi->GetEmailTemplate");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("email_template_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(emailTemplateId)); // path parameter

            localVarRequestOptions.Operation = "EmailApi.GetEmailTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<EmailTemplate>("/v2/emails/templates/{email_template_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an email template Retrieve an email template
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTemplateId">email_template_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailTemplate</returns>
        public async System.Threading.Tasks.Task<EmailTemplate> GetEmailTemplateAsync(string emailTemplateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<EmailTemplate> localVarResponse = await GetEmailTemplateWithHttpInfoAsync(emailTemplateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an email template Retrieve an email template
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTemplateId">email_template_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailTemplate)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<EmailTemplate>> GetEmailTemplateWithHttpInfoAsync(string emailTemplateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'emailTemplateId' is set
            if (emailTemplateId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'emailTemplateId' when calling EmailApi->GetEmailTemplate");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("email_template_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(emailTemplateId)); // path parameter

            localVarRequestOptions.Operation = "EmailApi.GetEmailTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailTemplate>("/v2/emails/templates/{email_template_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send an Email Sends an Email to a list of Contacts
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailSendRequest">emailSendRequest (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SendEmail(EmailSendRequest? emailSendRequest = default, int operationIndex = 0)
        {
            SendEmailWithHttpInfo(emailSendRequest);
        }

        /// <summary>
        /// Send an Email Sends an Email to a list of Contacts
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailSendRequest">emailSendRequest (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Core.V2.Client.ApiResponse<Object> SendEmailWithHttpInfo(EmailSendRequest? emailSendRequest = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = emailSendRequest;

            localVarRequestOptions.Operation = "EmailApi.SendEmail";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/emails:send", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send an Email Sends an Email to a list of Contacts
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailSendRequest">emailSendRequest (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendEmailAsync(EmailSendRequest? emailSendRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await SendEmailWithHttpInfoAsync(emailSendRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Send an Email Sends an Email to a list of Contacts
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailSendRequest">emailSendRequest (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Object>> SendEmailWithHttpInfoAsync(EmailSendRequest? emailSendRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = emailSendRequest;

            localVarRequestOptions.Operation = "EmailApi.SendEmail";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/emails:send", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send an email based on a template Send an email based on a template
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailSendTemplateRequest">Use a template to send an email to a list of contacts  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SendEmailTemplate(EmailSendTemplateRequest? emailSendTemplateRequest = default, int operationIndex = 0)
        {
            SendEmailTemplateWithHttpInfo(emailSendTemplateRequest);
        }

        /// <summary>
        /// Send an email based on a template Send an email based on a template
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailSendTemplateRequest">Use a template to send an email to a list of contacts  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Core.V2.Client.ApiResponse<Object> SendEmailTemplateWithHttpInfo(EmailSendTemplateRequest? emailSendTemplateRequest = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = emailSendTemplateRequest;

            localVarRequestOptions.Operation = "EmailApi.SendEmailTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/emails/templates:send", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendEmailTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send an email based on a template Send an email based on a template
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailSendTemplateRequest">Use a template to send an email to a list of contacts  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendEmailTemplateAsync(EmailSendTemplateRequest? emailSendTemplateRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await SendEmailTemplateWithHttpInfoAsync(emailSendTemplateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Send an email based on a template Send an email based on a template
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailSendTemplateRequest">Use a template to send an email to a list of contacts  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Object>> SendEmailTemplateWithHttpInfoAsync(EmailSendTemplateRequest? emailSendTemplateRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = emailSendTemplateRequest;

            localVarRequestOptions.Operation = "EmailApi.SendEmailTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/emails/templates:send", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendEmailTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
