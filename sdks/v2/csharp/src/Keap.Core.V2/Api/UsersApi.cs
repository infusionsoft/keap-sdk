/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.865894-hf-202510091441
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Keap.Core.V2.Client;
using Keap.Core.V2.Client.Auth;
using Keap.Core.V2.Model;

namespace Keap.Core.V2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// Retrieves a specific User
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User GetUserById(string userId, int operationIndex = 0);

        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// Retrieves a specific User
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserByIdWithHttpInfo(string userId, int operationIndex = 0);
        /// <summary>
        /// Retrieve User Info
        /// </summary>
        /// <remarks>
        /// Retrieves information for the current authenticated end-user, as outlined by the [OpenID Connect specification](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUserInfoResponse</returns>
        GetUserInfoResponse GetUserInfo(int operationIndex = 0);

        /// <summary>
        /// Retrieve User Info
        /// </summary>
        /// <remarks>
        /// Retrieves information for the current authenticated end-user, as outlined by the [OpenID Connect specification](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUserInfoResponse</returns>
        ApiResponse<GetUserInfoResponse> GetUserInfoWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get User email signature
        /// </summary>
        /// <remarks>
        /// Retrieves a HTML snippet that contains the user&#39;s email signature.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string GetUserSignature(string userId, int operationIndex = 0);

        /// <summary>
        /// Get User email signature
        /// </summary>
        /// <remarks>
        /// Retrieves a HTML snippet that contains the user&#39;s email signature.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetUserSignatureWithHttpInfo(string userId, int operationIndex = 0);
        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// Retrieves a list of users
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;email&#x60; - (String) &#x60;given_name&#x60; - (Boolean) &#x60;include_inactive&#x60; - (Boolean) &#x60;include_partners&#x60; - (Set[String]) &#x60;user_ids&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;given_name%3D%3DMary&#x60; - &#x60;filter&#x3D;user_ids%3D%3D123%3Bgiven_name%3D%3DSmith&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;date_created&#x60; - &#x60;email&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListUsersPaginatedResponse</returns>
        ListUsersPaginatedResponse ListPaginatedUsers(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);

        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// Retrieves a list of users
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;email&#x60; - (String) &#x60;given_name&#x60; - (Boolean) &#x60;include_inactive&#x60; - (Boolean) &#x60;include_partners&#x60; - (Set[String]) &#x60;user_ids&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;given_name%3D%3DMary&#x60; - &#x60;filter&#x3D;user_ids%3D%3D123%3Bgiven_name%3D%3DSmith&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;date_created&#x60; - &#x60;email&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListUsersPaginatedResponse</returns>
        ApiResponse<ListUsersPaginatedResponse> ListPaginatedUsersWithHttpInfo(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);
        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Updates information on a specific User
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="updateUserRequest">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User UpdateUser(string userId, List<string>? updateMask = default, UpdateUserRequest? updateUserRequest = default, int operationIndex = 0);

        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Updates information on a specific User
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="updateUserRequest">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UpdateUserWithHttpInfo(string userId, List<string>? updateMask = default, UpdateUserRequest? updateUserRequest = default, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// Retrieves a specific User
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserByIdAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// Retrieves a specific User
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserByIdWithHttpInfoAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieve User Info
        /// </summary>
        /// <remarks>
        /// Retrieves information for the current authenticated end-user, as outlined by the [OpenID Connect specification](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserInfoResponse</returns>
        System.Threading.Tasks.Task<GetUserInfoResponse> GetUserInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve User Info
        /// </summary>
        /// <remarks>
        /// Retrieves information for the current authenticated end-user, as outlined by the [OpenID Connect specification](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUserInfoResponse>> GetUserInfoWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get User email signature
        /// </summary>
        /// <remarks>
        /// Retrieves a HTML snippet that contains the user&#39;s email signature.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetUserSignatureAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User email signature
        /// </summary>
        /// <remarks>
        /// Retrieves a HTML snippet that contains the user&#39;s email signature.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetUserSignatureWithHttpInfoAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// Retrieves a list of users
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;email&#x60; - (String) &#x60;given_name&#x60; - (Boolean) &#x60;include_inactive&#x60; - (Boolean) &#x60;include_partners&#x60; - (Set[String]) &#x60;user_ids&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;given_name%3D%3DMary&#x60; - &#x60;filter&#x3D;user_ids%3D%3D123%3Bgiven_name%3D%3DSmith&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;date_created&#x60; - &#x60;email&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListUsersPaginatedResponse</returns>
        System.Threading.Tasks.Task<ListUsersPaginatedResponse> ListPaginatedUsersAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// Retrieves a list of users
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;email&#x60; - (String) &#x60;given_name&#x60; - (Boolean) &#x60;include_inactive&#x60; - (Boolean) &#x60;include_partners&#x60; - (Set[String]) &#x60;user_ids&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;given_name%3D%3DMary&#x60; - &#x60;filter&#x3D;user_ids%3D%3D123%3Bgiven_name%3D%3DSmith&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;date_created&#x60; - &#x60;email&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListUsersPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListUsersPaginatedResponse>> ListPaginatedUsersWithHttpInfoAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Updates information on a specific User
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="updateUserRequest">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UpdateUserAsync(string userId, List<string>? updateMask = default, UpdateUserRequest? updateUserRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Updates information on a specific User
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="updateUserRequest">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UpdateUserWithHttpInfoAsync(string userId, List<string>? updateMask = default, UpdateUserRequest? updateUserRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private Keap.Core.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(string basePath)
        {
            this.Configuration = Keap.Core.V2.Client.Configuration.MergeConfigurations(
                Keap.Core.V2.Client.GlobalConfiguration.Instance,
                new Keap.Core.V2.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Keap.Core.V2.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Keap.Core.V2.Client.Configuration.MergeConfigurations(
                Keap.Core.V2.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersApi(Keap.Core.V2.Client.ISynchronousClient client, Keap.Core.V2.Client.IAsynchronousClient asyncClient, Keap.Core.V2.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Keap.Core.V2.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Keap.Core.V2.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Keap.Core.V2.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Keap.Core.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get User Retrieves a specific User
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User GetUserById(string userId, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<User> localVarResponse = GetUserByIdWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Retrieves a specific User
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public Keap.Core.V2.Client.ApiResponse<User> GetUserByIdWithHttpInfo(string userId, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'userId' when calling UsersApi->GetUserById");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.GetUserById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<User>("/v2/users/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Retrieves a specific User
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserByIdAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<User> localVarResponse = await GetUserByIdWithHttpInfoAsync(userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Retrieves a specific User
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<User>> GetUserByIdWithHttpInfoAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'userId' when calling UsersApi->GetUserById");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.GetUserById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/v2/users/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve User Info Retrieves information for the current authenticated end-user, as outlined by the [OpenID Connect specification](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUserInfoResponse</returns>
        public GetUserInfoResponse GetUserInfo(int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<GetUserInfoResponse> localVarResponse = GetUserInfoWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve User Info Retrieves information for the current authenticated end-user, as outlined by the [OpenID Connect specification](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUserInfoResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<GetUserInfoResponse> GetUserInfoWithHttpInfo(int operationIndex = 0)
        {
            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UsersApi.GetUserInfo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetUserInfoResponse>("/v2/oauth/connect/userinfo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve User Info Retrieves information for the current authenticated end-user, as outlined by the [OpenID Connect specification](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetUserInfoResponse> GetUserInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<GetUserInfoResponse> localVarResponse = await GetUserInfoWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve User Info Retrieves information for the current authenticated end-user, as outlined by the [OpenID Connect specification](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserInfoResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<GetUserInfoResponse>> GetUserInfoWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UsersApi.GetUserInfo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetUserInfoResponse>("/v2/oauth/connect/userinfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User email signature Retrieves a HTML snippet that contains the user&#39;s email signature.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string GetUserSignature(string userId, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<string> localVarResponse = GetUserSignatureWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User email signature Retrieves a HTML snippet that contains the user&#39;s email signature.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Keap.Core.V2.Client.ApiResponse<string> GetUserSignatureWithHttpInfo(string userId, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'userId' when calling UsersApi->GetUserSignature");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.GetUserSignature";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/v2/users/{user_id}/signature", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserSignature", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User email signature Retrieves a HTML snippet that contains the user&#39;s email signature.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetUserSignatureAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<string> localVarResponse = await GetUserSignatureWithHttpInfoAsync(userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User email signature Retrieves a HTML snippet that contains the user&#39;s email signature.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<string>> GetUserSignatureWithHttpInfoAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'userId' when calling UsersApi->GetUserSignature");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.GetUserSignature";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v2/users/{user_id}/signature", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserSignature", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Users Retrieves a list of users
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;email&#x60; - (String) &#x60;given_name&#x60; - (Boolean) &#x60;include_inactive&#x60; - (Boolean) &#x60;include_partners&#x60; - (Set[String]) &#x60;user_ids&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;given_name%3D%3DMary&#x60; - &#x60;filter&#x3D;user_ids%3D%3D123%3Bgiven_name%3D%3DSmith&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;date_created&#x60; - &#x60;email&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListUsersPaginatedResponse</returns>
        public ListUsersPaginatedResponse ListPaginatedUsers(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ListUsersPaginatedResponse> localVarResponse = ListPaginatedUsersWithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Users Retrieves a list of users
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;email&#x60; - (String) &#x60;given_name&#x60; - (Boolean) &#x60;include_inactive&#x60; - (Boolean) &#x60;include_partners&#x60; - (Set[String]) &#x60;user_ids&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;given_name%3D%3DMary&#x60; - &#x60;filter&#x3D;user_ids%3D%3D123%3Bgiven_name%3D%3DSmith&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;date_created&#x60; - &#x60;email&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListUsersPaginatedResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<ListUsersPaginatedResponse> ListPaginatedUsersWithHttpInfo(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "UsersApi.ListPaginatedUsers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListUsersPaginatedResponse>("/v2/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPaginatedUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Users Retrieves a list of users
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;email&#x60; - (String) &#x60;given_name&#x60; - (Boolean) &#x60;include_inactive&#x60; - (Boolean) &#x60;include_partners&#x60; - (Set[String]) &#x60;user_ids&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;given_name%3D%3DMary&#x60; - &#x60;filter&#x3D;user_ids%3D%3D123%3Bgiven_name%3D%3DSmith&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;date_created&#x60; - &#x60;email&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListUsersPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<ListUsersPaginatedResponse> ListPaginatedUsersAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<ListUsersPaginatedResponse> localVarResponse = await ListPaginatedUsersWithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Users Retrieves a list of users
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;email&#x60; - (String) &#x60;given_name&#x60; - (Boolean) &#x60;include_inactive&#x60; - (Boolean) &#x60;include_partners&#x60; - (Set[String]) &#x60;user_ids&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;given_name%3D%3DMary&#x60; - &#x60;filter&#x3D;user_ids%3D%3D123%3Bgiven_name%3D%3DSmith&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;date_created&#x60; - &#x60;email&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListUsersPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ListUsersPaginatedResponse>> ListPaginatedUsersWithHttpInfoAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "UsersApi.ListPaginatedUsers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListUsersPaginatedResponse>("/v2/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPaginatedUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User Updates information on a specific User
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="updateUserRequest">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User UpdateUser(string userId, List<string>? updateMask = default, UpdateUserRequest? updateUserRequest = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<User> localVarResponse = UpdateUserWithHttpInfo(userId, updateMask, updateUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update User Updates information on a specific User
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="updateUserRequest">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public Keap.Core.V2.Client.ApiResponse<User> UpdateUserWithHttpInfo(string userId, List<string>? updateMask = default, UpdateUserRequest? updateUserRequest = default, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UpdateUser");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateUserRequest;

            localVarRequestOptions.Operation = "UsersApi.UpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<User>("/v2/users/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User Updates information on a specific User
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="updateUserRequest">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UpdateUserAsync(string userId, List<string>? updateMask = default, UpdateUserRequest? updateUserRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<User> localVarResponse = await UpdateUserWithHttpInfoAsync(userId, updateMask, updateUserRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update User Updates information on a specific User
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="updateUserRequest">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<User>> UpdateUserWithHttpInfoAsync(string userId, List<string>? updateMask = default, UpdateUserRequest? updateUserRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UpdateUser");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateUserRequest;

            localVarRequestOptions.Operation = "UsersApi.UpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<User>("/v2/users/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
