/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.863963
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Keap.Core.V2.Client;
using Keap.Core.V2.Client.Auth;
using Keap.Core.V2.Model;

namespace Keap.Core.V2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionPlansApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Subscription Plan
        /// </summary>
        /// <remarks>
        /// Creates a Subscription Plan
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="createSubscriptionPlanRequest">createSubscriptionPlanRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionPlan</returns>
        SubscriptionPlan CreateSubscriptionPlans(string productId, CreateSubscriptionPlanRequest createSubscriptionPlanRequest, int operationIndex = 0);

        /// <summary>
        /// Create Subscription Plan
        /// </summary>
        /// <remarks>
        /// Creates a Subscription Plan
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="createSubscriptionPlanRequest">createSubscriptionPlanRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionPlan</returns>
        ApiResponse<SubscriptionPlan> CreateSubscriptionPlansWithHttpInfo(string productId, CreateSubscriptionPlanRequest createSubscriptionPlanRequest, int operationIndex = 0);
        /// <summary>
        /// Delete Subscription Plan
        /// </summary>
        /// <remarks>
        /// Deletes a Subscription Plan
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteSubscriptionPlan(string productId, string subscriptionPlanId, int operationIndex = 0);

        /// <summary>
        /// Delete Subscription Plan
        /// </summary>
        /// <remarks>
        /// Deletes a Subscription Plan
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSubscriptionPlanWithHttpInfo(string productId, string subscriptionPlanId, int operationIndex = 0);
        /// <summary>
        /// Get Subscription Plan
        /// </summary>
        /// <remarks>
        /// Retrieves a Subscription Plan
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionPlan</returns>
        SubscriptionPlan FetchSubscriptionPlan(string productId, string subscriptionPlanId, int operationIndex = 0);

        /// <summary>
        /// Get Subscription Plan
        /// </summary>
        /// <remarks>
        /// Retrieves a Subscription Plan
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionPlan</returns>
        ApiResponse<SubscriptionPlan> FetchSubscriptionPlanWithHttpInfo(string productId, string subscriptionPlanId, int operationIndex = 0);
        /// <summary>
        /// List Subscription Plans
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Subscription Plans
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (Boolean) &#x60;active&#x60;: true or false - (BillingCycle) &#x60;cycle_type&#x60;: DAILY, WEEKLY, MONTHLY, YEARLY You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;active%3D%3Dtrue&#x60; - &#x60;filter&#x3D;cycle_type%3D%3DDAILY&#x60; - &#x60;filter&#x3D;active%3D%3Dfalse%3Bcycle_type%3D%3DWEEKLY&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;id&#x60; - &#x60;product_id&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSubscriptionPlansResponse</returns>
        ListSubscriptionPlansResponse ListSubscriptionPlans(string productId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);

        /// <summary>
        /// List Subscription Plans
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Subscription Plans
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (Boolean) &#x60;active&#x60;: true or false - (BillingCycle) &#x60;cycle_type&#x60;: DAILY, WEEKLY, MONTHLY, YEARLY You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;active%3D%3Dtrue&#x60; - &#x60;filter&#x3D;cycle_type%3D%3DDAILY&#x60; - &#x60;filter&#x3D;active%3D%3Dfalse%3Bcycle_type%3D%3DWEEKLY&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;id&#x60; - &#x60;product_id&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSubscriptionPlansResponse</returns>
        ApiResponse<ListSubscriptionPlansResponse> ListSubscriptionPlansWithHttpInfo(string productId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);
        /// <summary>
        /// Update Subscription Plan
        /// </summary>
        /// <remarks>
        /// Updates a Subscription Plan
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="updateSubscriptionPlanRequest">updateSubscriptionPlanRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionPlan</returns>
        SubscriptionPlan UpdateSubscriptionPlan(string productId, string subscriptionPlanId, UpdateSubscriptionPlanRequest updateSubscriptionPlanRequest, List<string>? updateMask = default, int operationIndex = 0);

        /// <summary>
        /// Update Subscription Plan
        /// </summary>
        /// <remarks>
        /// Updates a Subscription Plan
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="updateSubscriptionPlanRequest">updateSubscriptionPlanRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionPlan</returns>
        ApiResponse<SubscriptionPlan> UpdateSubscriptionPlanWithHttpInfo(string productId, string subscriptionPlanId, UpdateSubscriptionPlanRequest updateSubscriptionPlanRequest, List<string>? updateMask = default, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionPlansApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Subscription Plan
        /// </summary>
        /// <remarks>
        /// Creates a Subscription Plan
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="createSubscriptionPlanRequest">createSubscriptionPlanRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionPlan</returns>
        System.Threading.Tasks.Task<SubscriptionPlan> CreateSubscriptionPlansAsync(string productId, CreateSubscriptionPlanRequest createSubscriptionPlanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Subscription Plan
        /// </summary>
        /// <remarks>
        /// Creates a Subscription Plan
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="createSubscriptionPlanRequest">createSubscriptionPlanRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionPlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionPlan>> CreateSubscriptionPlansWithHttpInfoAsync(string productId, CreateSubscriptionPlanRequest createSubscriptionPlanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete Subscription Plan
        /// </summary>
        /// <remarks>
        /// Deletes a Subscription Plan
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSubscriptionPlanAsync(string productId, string subscriptionPlanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Subscription Plan
        /// </summary>
        /// <remarks>
        /// Deletes a Subscription Plan
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubscriptionPlanWithHttpInfoAsync(string productId, string subscriptionPlanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Subscription Plan
        /// </summary>
        /// <remarks>
        /// Retrieves a Subscription Plan
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionPlan</returns>
        System.Threading.Tasks.Task<SubscriptionPlan> FetchSubscriptionPlanAsync(string productId, string subscriptionPlanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Subscription Plan
        /// </summary>
        /// <remarks>
        /// Retrieves a Subscription Plan
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionPlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionPlan>> FetchSubscriptionPlanWithHttpInfoAsync(string productId, string subscriptionPlanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Subscription Plans
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Subscription Plans
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (Boolean) &#x60;active&#x60;: true or false - (BillingCycle) &#x60;cycle_type&#x60;: DAILY, WEEKLY, MONTHLY, YEARLY You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;active%3D%3Dtrue&#x60; - &#x60;filter&#x3D;cycle_type%3D%3DDAILY&#x60; - &#x60;filter&#x3D;active%3D%3Dfalse%3Bcycle_type%3D%3DWEEKLY&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;id&#x60; - &#x60;product_id&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSubscriptionPlansResponse</returns>
        System.Threading.Tasks.Task<ListSubscriptionPlansResponse> ListSubscriptionPlansAsync(string productId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Subscription Plans
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Subscription Plans
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (Boolean) &#x60;active&#x60;: true or false - (BillingCycle) &#x60;cycle_type&#x60;: DAILY, WEEKLY, MONTHLY, YEARLY You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;active%3D%3Dtrue&#x60; - &#x60;filter&#x3D;cycle_type%3D%3DDAILY&#x60; - &#x60;filter&#x3D;active%3D%3Dfalse%3Bcycle_type%3D%3DWEEKLY&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;id&#x60; - &#x60;product_id&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSubscriptionPlansResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSubscriptionPlansResponse>> ListSubscriptionPlansWithHttpInfoAsync(string productId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update Subscription Plan
        /// </summary>
        /// <remarks>
        /// Updates a Subscription Plan
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="updateSubscriptionPlanRequest">updateSubscriptionPlanRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionPlan</returns>
        System.Threading.Tasks.Task<SubscriptionPlan> UpdateSubscriptionPlanAsync(string productId, string subscriptionPlanId, UpdateSubscriptionPlanRequest updateSubscriptionPlanRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Subscription Plan
        /// </summary>
        /// <remarks>
        /// Updates a Subscription Plan
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="updateSubscriptionPlanRequest">updateSubscriptionPlanRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionPlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionPlan>> UpdateSubscriptionPlanWithHttpInfoAsync(string productId, string subscriptionPlanId, UpdateSubscriptionPlanRequest updateSubscriptionPlanRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionPlansApi : ISubscriptionPlansApiSync, ISubscriptionPlansApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscriptionPlansApi : ISubscriptionPlansApi
    {
        private Keap.Core.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPlansApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscriptionPlansApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPlansApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscriptionPlansApi(string basePath)
        {
            this.Configuration = Keap.Core.V2.Client.Configuration.MergeConfigurations(
                Keap.Core.V2.Client.GlobalConfiguration.Instance,
                new Keap.Core.V2.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPlansApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubscriptionPlansApi(Keap.Core.V2.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Keap.Core.V2.Client.Configuration.MergeConfigurations(
                Keap.Core.V2.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPlansApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SubscriptionPlansApi(Keap.Core.V2.Client.ISynchronousClient client, Keap.Core.V2.Client.IAsynchronousClient asyncClient, Keap.Core.V2.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Keap.Core.V2.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Keap.Core.V2.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Keap.Core.V2.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Keap.Core.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Subscription Plan Creates a Subscription Plan
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="createSubscriptionPlanRequest">createSubscriptionPlanRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionPlan</returns>
        public SubscriptionPlan CreateSubscriptionPlans(string productId, CreateSubscriptionPlanRequest createSubscriptionPlanRequest, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<SubscriptionPlan> localVarResponse = CreateSubscriptionPlansWithHttpInfo(productId, createSubscriptionPlanRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Subscription Plan Creates a Subscription Plan
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="createSubscriptionPlanRequest">createSubscriptionPlanRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionPlan</returns>
        public Keap.Core.V2.Client.ApiResponse<SubscriptionPlan> CreateSubscriptionPlansWithHttpInfo(string productId, CreateSubscriptionPlanRequest createSubscriptionPlanRequest, int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling SubscriptionPlansApi->CreateSubscriptionPlans");
            }

            // verify the required parameter 'createSubscriptionPlanRequest' is set
            if (createSubscriptionPlanRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'createSubscriptionPlanRequest' when calling SubscriptionPlansApi->CreateSubscriptionPlans");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.Data = createSubscriptionPlanRequest;

            localVarRequestOptions.Operation = "SubscriptionPlansApi.CreateSubscriptionPlans";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionPlan>("/v2/products/{product_id}/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscriptionPlans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Subscription Plan Creates a Subscription Plan
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="createSubscriptionPlanRequest">createSubscriptionPlanRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionPlan</returns>
        public async System.Threading.Tasks.Task<SubscriptionPlan> CreateSubscriptionPlansAsync(string productId, CreateSubscriptionPlanRequest createSubscriptionPlanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<SubscriptionPlan> localVarResponse = await CreateSubscriptionPlansWithHttpInfoAsync(productId, createSubscriptionPlanRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Subscription Plan Creates a Subscription Plan
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="createSubscriptionPlanRequest">createSubscriptionPlanRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionPlan)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<SubscriptionPlan>> CreateSubscriptionPlansWithHttpInfoAsync(string productId, CreateSubscriptionPlanRequest createSubscriptionPlanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling SubscriptionPlansApi->CreateSubscriptionPlans");
            }

            // verify the required parameter 'createSubscriptionPlanRequest' is set
            if (createSubscriptionPlanRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'createSubscriptionPlanRequest' when calling SubscriptionPlansApi->CreateSubscriptionPlans");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.Data = createSubscriptionPlanRequest;

            localVarRequestOptions.Operation = "SubscriptionPlansApi.CreateSubscriptionPlans";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubscriptionPlan>("/v2/products/{product_id}/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscriptionPlans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Subscription Plan Deletes a Subscription Plan
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteSubscriptionPlan(string productId, string subscriptionPlanId, int operationIndex = 0)
        {
            DeleteSubscriptionPlanWithHttpInfo(productId, subscriptionPlanId);
        }

        /// <summary>
        /// Delete Subscription Plan Deletes a Subscription Plan
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Core.V2.Client.ApiResponse<Object> DeleteSubscriptionPlanWithHttpInfo(string productId, string subscriptionPlanId, int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling SubscriptionPlansApi->DeleteSubscriptionPlan");
            }

            // verify the required parameter 'subscriptionPlanId' is set
            if (subscriptionPlanId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'subscriptionPlanId' when calling SubscriptionPlansApi->DeleteSubscriptionPlan");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_plan_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(subscriptionPlanId)); // path parameter

            localVarRequestOptions.Operation = "SubscriptionPlansApi.DeleteSubscriptionPlan";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/products/{product_id}/subscriptions/{subscription_plan_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSubscriptionPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Subscription Plan Deletes a Subscription Plan
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSubscriptionPlanAsync(string productId, string subscriptionPlanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteSubscriptionPlanWithHttpInfoAsync(productId, subscriptionPlanId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Subscription Plan Deletes a Subscription Plan
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Object>> DeleteSubscriptionPlanWithHttpInfoAsync(string productId, string subscriptionPlanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling SubscriptionPlansApi->DeleteSubscriptionPlan");
            }

            // verify the required parameter 'subscriptionPlanId' is set
            if (subscriptionPlanId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'subscriptionPlanId' when calling SubscriptionPlansApi->DeleteSubscriptionPlan");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_plan_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(subscriptionPlanId)); // path parameter

            localVarRequestOptions.Operation = "SubscriptionPlansApi.DeleteSubscriptionPlan";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/products/{product_id}/subscriptions/{subscription_plan_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSubscriptionPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Subscription Plan Retrieves a Subscription Plan
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionPlan</returns>
        public SubscriptionPlan FetchSubscriptionPlan(string productId, string subscriptionPlanId, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<SubscriptionPlan> localVarResponse = FetchSubscriptionPlanWithHttpInfo(productId, subscriptionPlanId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscription Plan Retrieves a Subscription Plan
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionPlan</returns>
        public Keap.Core.V2.Client.ApiResponse<SubscriptionPlan> FetchSubscriptionPlanWithHttpInfo(string productId, string subscriptionPlanId, int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling SubscriptionPlansApi->FetchSubscriptionPlan");
            }

            // verify the required parameter 'subscriptionPlanId' is set
            if (subscriptionPlanId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'subscriptionPlanId' when calling SubscriptionPlansApi->FetchSubscriptionPlan");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_plan_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(subscriptionPlanId)); // path parameter

            localVarRequestOptions.Operation = "SubscriptionPlansApi.FetchSubscriptionPlan";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionPlan>("/v2/products/{product_id}/subscriptions/{subscription_plan_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchSubscriptionPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Subscription Plan Retrieves a Subscription Plan
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionPlan</returns>
        public async System.Threading.Tasks.Task<SubscriptionPlan> FetchSubscriptionPlanAsync(string productId, string subscriptionPlanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<SubscriptionPlan> localVarResponse = await FetchSubscriptionPlanWithHttpInfoAsync(productId, subscriptionPlanId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscription Plan Retrieves a Subscription Plan
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionPlan)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<SubscriptionPlan>> FetchSubscriptionPlanWithHttpInfoAsync(string productId, string subscriptionPlanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling SubscriptionPlansApi->FetchSubscriptionPlan");
            }

            // verify the required parameter 'subscriptionPlanId' is set
            if (subscriptionPlanId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'subscriptionPlanId' when calling SubscriptionPlansApi->FetchSubscriptionPlan");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_plan_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(subscriptionPlanId)); // path parameter

            localVarRequestOptions.Operation = "SubscriptionPlansApi.FetchSubscriptionPlan";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionPlan>("/v2/products/{product_id}/subscriptions/{subscription_plan_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchSubscriptionPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Subscription Plans Retrieves a list of Subscription Plans
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (Boolean) &#x60;active&#x60;: true or false - (BillingCycle) &#x60;cycle_type&#x60;: DAILY, WEEKLY, MONTHLY, YEARLY You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;active%3D%3Dtrue&#x60; - &#x60;filter&#x3D;cycle_type%3D%3DDAILY&#x60; - &#x60;filter&#x3D;active%3D%3Dfalse%3Bcycle_type%3D%3DWEEKLY&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;id&#x60; - &#x60;product_id&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSubscriptionPlansResponse</returns>
        public ListSubscriptionPlansResponse ListSubscriptionPlans(string productId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ListSubscriptionPlansResponse> localVarResponse = ListSubscriptionPlansWithHttpInfo(productId, filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Subscription Plans Retrieves a list of Subscription Plans
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (Boolean) &#x60;active&#x60;: true or false - (BillingCycle) &#x60;cycle_type&#x60;: DAILY, WEEKLY, MONTHLY, YEARLY You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;active%3D%3Dtrue&#x60; - &#x60;filter&#x3D;cycle_type%3D%3DDAILY&#x60; - &#x60;filter&#x3D;active%3D%3Dfalse%3Bcycle_type%3D%3DWEEKLY&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;id&#x60; - &#x60;product_id&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSubscriptionPlansResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<ListSubscriptionPlansResponse> ListSubscriptionPlansWithHttpInfo(string productId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling SubscriptionPlansApi->ListSubscriptionPlans");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "SubscriptionPlansApi.ListSubscriptionPlans";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListSubscriptionPlansResponse>("/v2/products/{product_id}/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubscriptionPlans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Subscription Plans Retrieves a list of Subscription Plans
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (Boolean) &#x60;active&#x60;: true or false - (BillingCycle) &#x60;cycle_type&#x60;: DAILY, WEEKLY, MONTHLY, YEARLY You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;active%3D%3Dtrue&#x60; - &#x60;filter&#x3D;cycle_type%3D%3DDAILY&#x60; - &#x60;filter&#x3D;active%3D%3Dfalse%3Bcycle_type%3D%3DWEEKLY&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;id&#x60; - &#x60;product_id&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSubscriptionPlansResponse</returns>
        public async System.Threading.Tasks.Task<ListSubscriptionPlansResponse> ListSubscriptionPlansAsync(string productId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<ListSubscriptionPlansResponse> localVarResponse = await ListSubscriptionPlansWithHttpInfoAsync(productId, filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Subscription Plans Retrieves a list of Subscription Plans
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (Boolean) &#x60;active&#x60;: true or false - (BillingCycle) &#x60;cycle_type&#x60;: DAILY, WEEKLY, MONTHLY, YEARLY You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;active%3D%3Dtrue&#x60; - &#x60;filter&#x3D;cycle_type%3D%3DDAILY&#x60; - &#x60;filter&#x3D;active%3D%3Dfalse%3Bcycle_type%3D%3DWEEKLY&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;id&#x60; - &#x60;product_id&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60;  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSubscriptionPlansResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ListSubscriptionPlansResponse>> ListSubscriptionPlansWithHttpInfoAsync(string productId, string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling SubscriptionPlansApi->ListSubscriptionPlans");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "SubscriptionPlansApi.ListSubscriptionPlans";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListSubscriptionPlansResponse>("/v2/products/{product_id}/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubscriptionPlans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Subscription Plan Updates a Subscription Plan
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="updateSubscriptionPlanRequest">updateSubscriptionPlanRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionPlan</returns>
        public SubscriptionPlan UpdateSubscriptionPlan(string productId, string subscriptionPlanId, UpdateSubscriptionPlanRequest updateSubscriptionPlanRequest, List<string>? updateMask = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<SubscriptionPlan> localVarResponse = UpdateSubscriptionPlanWithHttpInfo(productId, subscriptionPlanId, updateSubscriptionPlanRequest, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Subscription Plan Updates a Subscription Plan
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="updateSubscriptionPlanRequest">updateSubscriptionPlanRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionPlan</returns>
        public Keap.Core.V2.Client.ApiResponse<SubscriptionPlan> UpdateSubscriptionPlanWithHttpInfo(string productId, string subscriptionPlanId, UpdateSubscriptionPlanRequest updateSubscriptionPlanRequest, List<string>? updateMask = default, int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling SubscriptionPlansApi->UpdateSubscriptionPlan");
            }

            // verify the required parameter 'subscriptionPlanId' is set
            if (subscriptionPlanId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'subscriptionPlanId' when calling SubscriptionPlansApi->UpdateSubscriptionPlan");
            }

            // verify the required parameter 'updateSubscriptionPlanRequest' is set
            if (updateSubscriptionPlanRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateSubscriptionPlanRequest' when calling SubscriptionPlansApi->UpdateSubscriptionPlan");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_plan_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(subscriptionPlanId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateSubscriptionPlanRequest;

            localVarRequestOptions.Operation = "SubscriptionPlansApi.UpdateSubscriptionPlan";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<SubscriptionPlan>("/v2/products/{product_id}/subscriptions/{subscription_plan_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscriptionPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Subscription Plan Updates a Subscription Plan
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="updateSubscriptionPlanRequest">updateSubscriptionPlanRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionPlan</returns>
        public async System.Threading.Tasks.Task<SubscriptionPlan> UpdateSubscriptionPlanAsync(string productId, string subscriptionPlanId, UpdateSubscriptionPlanRequest updateSubscriptionPlanRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<SubscriptionPlan> localVarResponse = await UpdateSubscriptionPlanWithHttpInfoAsync(productId, subscriptionPlanId, updateSubscriptionPlanRequest, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Subscription Plan Updates a Subscription Plan
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="subscriptionPlanId">subscription_plan_id</param>
        /// <param name="updateSubscriptionPlanRequest">updateSubscriptionPlanRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionPlan)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<SubscriptionPlan>> UpdateSubscriptionPlanWithHttpInfoAsync(string productId, string subscriptionPlanId, UpdateSubscriptionPlanRequest updateSubscriptionPlanRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling SubscriptionPlansApi->UpdateSubscriptionPlan");
            }

            // verify the required parameter 'subscriptionPlanId' is set
            if (subscriptionPlanId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'subscriptionPlanId' when calling SubscriptionPlansApi->UpdateSubscriptionPlan");
            }

            // verify the required parameter 'updateSubscriptionPlanRequest' is set
            if (updateSubscriptionPlanRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateSubscriptionPlanRequest' when calling SubscriptionPlansApi->UpdateSubscriptionPlan");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_plan_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(subscriptionPlanId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateSubscriptionPlanRequest;

            localVarRequestOptions.Operation = "SubscriptionPlansApi.UpdateSubscriptionPlan";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<SubscriptionPlan>("/v2/products/{product_id}/subscriptions/{subscription_plan_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscriptionPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
