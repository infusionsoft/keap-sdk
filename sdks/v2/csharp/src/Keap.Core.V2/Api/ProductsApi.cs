/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.863963
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Keap.Core.V2.Client;
using Keap.Core.V2.Client.Auth;
using Keap.Core.V2.Model;

namespace Keap.Core.V2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adjust Inventory of a Product
        /// </summary>
        /// <remarks>
        /// Increase or decrease the quantity of the Product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductInventoryRequest">updateProductInventoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Product</returns>
        RestV2Product AdjustInventory(string productId, UpdateProductInventoryRequest updateProductInventoryRequest, int operationIndex = 0);

        /// <summary>
        /// Adjust Inventory of a Product
        /// </summary>
        /// <remarks>
        /// Increase or decrease the quantity of the Product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductInventoryRequest">updateProductInventoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Product</returns>
        ApiResponse<RestV2Product> AdjustInventoryWithHttpInfo(string productId, UpdateProductInventoryRequest updateProductInventoryRequest, int operationIndex = 0);
        /// <summary>
        /// Create a Product
        /// </summary>
        /// <remarks>
        /// Creates a new product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductRequest">createProductRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Product</returns>
        RestV2Product CreateProduct(CreateProductRequest createProductRequest, int operationIndex = 0);

        /// <summary>
        /// Create a Product
        /// </summary>
        /// <remarks>
        /// Creates a new product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductRequest">createProductRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Product</returns>
        ApiResponse<RestV2Product> CreateProductWithHttpInfo(CreateProductRequest createProductRequest, int operationIndex = 0);
        /// <summary>
        /// Create the Product Image
        /// </summary>
        /// <remarks>
        /// Creates the Product Image file and uploads it to the specified Product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="file">File to upload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CreateProductImage(string productId, System.IO.Stream file, int operationIndex = 0);

        /// <summary>
        /// Create the Product Image
        /// </summary>
        /// <remarks>
        /// Creates the Product Image file and uploads it to the specified Product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="file">File to upload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateProductImageWithHttpInfo(string productId, System.IO.Stream file, int operationIndex = 0);
        /// <summary>
        /// Delete a Product
        /// </summary>
        /// <remarks>
        /// Deletes a single product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteProduct(string productId, int operationIndex = 0);

        /// <summary>
        /// Delete a Product
        /// </summary>
        /// <remarks>
        /// Deletes a single product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProductWithHttpInfo(string productId, int operationIndex = 0);
        /// <summary>
        /// Delete the Product Image
        /// </summary>
        /// <remarks>
        /// Deletes the Product Image from the specified Product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteProductImage(string productId, int operationIndex = 0);

        /// <summary>
        /// Delete the Product Image
        /// </summary>
        /// <remarks>
        /// Deletes the Product Image from the specified Product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProductImageWithHttpInfo(string productId, int operationIndex = 0);
        /// <summary>
        /// Get a Product
        /// </summary>
        /// <remarks>
        /// Gets a single Product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Product</returns>
        RestV2Product GetProduct(string productId, int operationIndex = 0);

        /// <summary>
        /// Get a Product
        /// </summary>
        /// <remarks>
        /// Gets a single Product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Product</returns>
        ApiResponse<RestV2Product> GetProductWithHttpInfo(string productId, int operationIndex = 0);
        /// <summary>
        /// List Products
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Products
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListProductsResponse</returns>
        ListProductsResponse ListProducts(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);

        /// <summary>
        /// List Products
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Products
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListProductsResponse</returns>
        ApiResponse<ListProductsResponse> ListProductsWithHttpInfo(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0);
        /// <summary>
        /// Update a Product
        /// </summary>
        /// <remarks>
        /// Updates a product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductRequest">updateProductRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Product</returns>
        RestV2Product UpdateProduct(string productId, UpdateProductRequest updateProductRequest, List<string>? updateMask = default, int operationIndex = 0);

        /// <summary>
        /// Update a Product
        /// </summary>
        /// <remarks>
        /// Updates a product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductRequest">updateProductRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Product</returns>
        ApiResponse<RestV2Product> UpdateProductWithHttpInfo(string productId, UpdateProductRequest updateProductRequest, List<string>? updateMask = default, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Adjust Inventory of a Product
        /// </summary>
        /// <remarks>
        /// Increase or decrease the quantity of the Product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductInventoryRequest">updateProductInventoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Product</returns>
        System.Threading.Tasks.Task<RestV2Product> AdjustInventoryAsync(string productId, UpdateProductInventoryRequest updateProductInventoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Adjust Inventory of a Product
        /// </summary>
        /// <remarks>
        /// Increase or decrease the quantity of the Product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductInventoryRequest">updateProductInventoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestV2Product>> AdjustInventoryWithHttpInfoAsync(string productId, UpdateProductInventoryRequest updateProductInventoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create a Product
        /// </summary>
        /// <remarks>
        /// Creates a new product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductRequest">createProductRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Product</returns>
        System.Threading.Tasks.Task<RestV2Product> CreateProductAsync(CreateProductRequest createProductRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a Product
        /// </summary>
        /// <remarks>
        /// Creates a new product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductRequest">createProductRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestV2Product>> CreateProductWithHttpInfoAsync(CreateProductRequest createProductRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create the Product Image
        /// </summary>
        /// <remarks>
        /// Creates the Product Image file and uploads it to the specified Product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="file">File to upload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateProductImageAsync(string productId, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create the Product Image
        /// </summary>
        /// <remarks>
        /// Creates the Product Image file and uploads it to the specified Product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="file">File to upload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateProductImageWithHttpInfoAsync(string productId, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete a Product
        /// </summary>
        /// <remarks>
        /// Deletes a single product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProductAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a Product
        /// </summary>
        /// <remarks>
        /// Deletes a single product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductWithHttpInfoAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete the Product Image
        /// </summary>
        /// <remarks>
        /// Deletes the Product Image from the specified Product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProductImageAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete the Product Image
        /// </summary>
        /// <remarks>
        /// Deletes the Product Image from the specified Product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductImageWithHttpInfoAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get a Product
        /// </summary>
        /// <remarks>
        /// Gets a single Product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Product</returns>
        System.Threading.Tasks.Task<RestV2Product> GetProductAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a Product
        /// </summary>
        /// <remarks>
        /// Gets a single Product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestV2Product>> GetProductWithHttpInfoAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Products
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Products
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListProductsResponse</returns>
        System.Threading.Tasks.Task<ListProductsResponse> ListProductsAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Products
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Products
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListProductsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListProductsResponse>> ListProductsWithHttpInfoAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update a Product
        /// </summary>
        /// <remarks>
        /// Updates a product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductRequest">updateProductRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Product</returns>
        System.Threading.Tasks.Task<RestV2Product> UpdateProductAsync(string productId, UpdateProductRequest updateProductRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a Product
        /// </summary>
        /// <remarks>
        /// Updates a product
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductRequest">updateProductRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestV2Product>> UpdateProductWithHttpInfoAsync(string productId, UpdateProductRequest updateProductRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductsApi : IProductsApiSync, IProductsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductsApi : IProductsApi
    {
        private Keap.Core.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductsApi(string basePath)
        {
            this.Configuration = Keap.Core.V2.Client.Configuration.MergeConfigurations(
                Keap.Core.V2.Client.GlobalConfiguration.Instance,
                new Keap.Core.V2.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductsApi(Keap.Core.V2.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Keap.Core.V2.Client.Configuration.MergeConfigurations(
                Keap.Core.V2.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProductsApi(Keap.Core.V2.Client.ISynchronousClient client, Keap.Core.V2.Client.IAsynchronousClient asyncClient, Keap.Core.V2.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Keap.Core.V2.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Keap.Core.V2.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Keap.Core.V2.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Keap.Core.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Adjust Inventory of a Product Increase or decrease the quantity of the Product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductInventoryRequest">updateProductInventoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Product</returns>
        public RestV2Product AdjustInventory(string productId, UpdateProductInventoryRequest updateProductInventoryRequest, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<RestV2Product> localVarResponse = AdjustInventoryWithHttpInfo(productId, updateProductInventoryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adjust Inventory of a Product Increase or decrease the quantity of the Product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductInventoryRequest">updateProductInventoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Product</returns>
        public Keap.Core.V2.Client.ApiResponse<RestV2Product> AdjustInventoryWithHttpInfo(string productId, UpdateProductInventoryRequest updateProductInventoryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->AdjustInventory");
            }

            // verify the required parameter 'updateProductInventoryRequest' is set
            if (updateProductInventoryRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateProductInventoryRequest' when calling ProductsApi->AdjustInventory");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.Data = updateProductInventoryRequest;

            localVarRequestOptions.Operation = "ProductsApi.AdjustInventory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RestV2Product>("/v2/products/{product_id}:adjustInventory", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdjustInventory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adjust Inventory of a Product Increase or decrease the quantity of the Product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductInventoryRequest">updateProductInventoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Product</returns>
        public async System.Threading.Tasks.Task<RestV2Product> AdjustInventoryAsync(string productId, UpdateProductInventoryRequest updateProductInventoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<RestV2Product> localVarResponse = await AdjustInventoryWithHttpInfoAsync(productId, updateProductInventoryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adjust Inventory of a Product Increase or decrease the quantity of the Product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductInventoryRequest">updateProductInventoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Product)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<RestV2Product>> AdjustInventoryWithHttpInfoAsync(string productId, UpdateProductInventoryRequest updateProductInventoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->AdjustInventory");
            }

            // verify the required parameter 'updateProductInventoryRequest' is set
            if (updateProductInventoryRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateProductInventoryRequest' when calling ProductsApi->AdjustInventory");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.Data = updateProductInventoryRequest;

            localVarRequestOptions.Operation = "ProductsApi.AdjustInventory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestV2Product>("/v2/products/{product_id}:adjustInventory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdjustInventory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Product Creates a new product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductRequest">createProductRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Product</returns>
        public RestV2Product CreateProduct(CreateProductRequest createProductRequest, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<RestV2Product> localVarResponse = CreateProductWithHttpInfo(createProductRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Product Creates a new product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductRequest">createProductRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Product</returns>
        public Keap.Core.V2.Client.ApiResponse<RestV2Product> CreateProductWithHttpInfo(CreateProductRequest createProductRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createProductRequest' is set
            if (createProductRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'createProductRequest' when calling ProductsApi->CreateProduct");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createProductRequest;

            localVarRequestOptions.Operation = "ProductsApi.CreateProduct";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RestV2Product>("/v2/products", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Product Creates a new product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductRequest">createProductRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Product</returns>
        public async System.Threading.Tasks.Task<RestV2Product> CreateProductAsync(CreateProductRequest createProductRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<RestV2Product> localVarResponse = await CreateProductWithHttpInfoAsync(createProductRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Product Creates a new product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductRequest">createProductRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Product)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<RestV2Product>> CreateProductWithHttpInfoAsync(CreateProductRequest createProductRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createProductRequest' is set
            if (createProductRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'createProductRequest' when calling ProductsApi->CreateProduct");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createProductRequest;

            localVarRequestOptions.Operation = "ProductsApi.CreateProduct";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestV2Product>("/v2/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create the Product Image Creates the Product Image file and uploads it to the specified Product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="file">File to upload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CreateProductImage(string productId, System.IO.Stream file, int operationIndex = 0)
        {
            CreateProductImageWithHttpInfo(productId, file);
        }

        /// <summary>
        /// Create the Product Image Creates the Product Image file and uploads it to the specified Product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="file">File to upload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Core.V2.Client.ApiResponse<Object> CreateProductImageWithHttpInfo(string productId, System.IO.Stream file, int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->CreateProductImage");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'file' when calling ProductsApi->CreateProductImage");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "ProductsApi.CreateProductImage";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/products/{product_id}/images", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create the Product Image Creates the Product Image file and uploads it to the specified Product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="file">File to upload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateProductImageAsync(string productId, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await CreateProductImageWithHttpInfoAsync(productId, file, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create the Product Image Creates the Product Image file and uploads it to the specified Product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="file">File to upload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Object>> CreateProductImageWithHttpInfoAsync(string productId, System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->CreateProductImage");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'file' when calling ProductsApi->CreateProductImage");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "ProductsApi.CreateProductImage";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/products/{product_id}/images", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Product Deletes a single product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteProduct(string productId, int operationIndex = 0)
        {
            DeleteProductWithHttpInfo(productId);
        }

        /// <summary>
        /// Delete a Product Deletes a single product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Core.V2.Client.ApiResponse<Object> DeleteProductWithHttpInfo(string productId, int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->DeleteProduct");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter

            localVarRequestOptions.Operation = "ProductsApi.DeleteProduct";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/products/{product_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Product Deletes a single product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProductAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteProductWithHttpInfoAsync(productId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Product Deletes a single product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Object>> DeleteProductWithHttpInfoAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->DeleteProduct");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter

            localVarRequestOptions.Operation = "ProductsApi.DeleteProduct";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/products/{product_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the Product Image Deletes the Product Image from the specified Product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteProductImage(string productId, int operationIndex = 0)
        {
            DeleteProductImageWithHttpInfo(productId);
        }

        /// <summary>
        /// Delete the Product Image Deletes the Product Image from the specified Product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Core.V2.Client.ApiResponse<Object> DeleteProductImageWithHttpInfo(string productId, int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->DeleteProductImage");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter

            localVarRequestOptions.Operation = "ProductsApi.DeleteProductImage";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/products/{product_id}/images", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the Product Image Deletes the Product Image from the specified Product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProductImageAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteProductImageWithHttpInfoAsync(productId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete the Product Image Deletes the Product Image from the specified Product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Object>> DeleteProductImageWithHttpInfoAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->DeleteProductImage");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter

            localVarRequestOptions.Operation = "ProductsApi.DeleteProductImage";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/products/{product_id}/images", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Product Gets a single Product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Product</returns>
        public RestV2Product GetProduct(string productId, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<RestV2Product> localVarResponse = GetProductWithHttpInfo(productId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Product Gets a single Product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Product</returns>
        public Keap.Core.V2.Client.ApiResponse<RestV2Product> GetProductWithHttpInfo(string productId, int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetProduct");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter

            localVarRequestOptions.Operation = "ProductsApi.GetProduct";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RestV2Product>("/v2/products/{product_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Product Gets a single Product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Product</returns>
        public async System.Threading.Tasks.Task<RestV2Product> GetProductAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<RestV2Product> localVarResponse = await GetProductWithHttpInfoAsync(productId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Product Gets a single Product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Product)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<RestV2Product>> GetProductWithHttpInfoAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetProduct");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter

            localVarRequestOptions.Operation = "ProductsApi.GetProduct";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RestV2Product>("/v2/products/{product_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Products Retrieves a list of Products
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListProductsResponse</returns>
        public ListProductsResponse ListProducts(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ListProductsResponse> localVarResponse = ListProductsWithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Products Retrieves a list of Products
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListProductsResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<ListProductsResponse> ListProductsWithHttpInfo(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "ProductsApi.ListProducts";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListProductsResponse>("/v2/products", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Products Retrieves a list of Products
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListProductsResponse</returns>
        public async System.Threading.Tasks.Task<ListProductsResponse> ListProductsAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<ListProductsResponse> localVarResponse = await ListProductsWithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Products Retrieves a list of Products
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListProductsResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ListProductsResponse>> ListProductsWithHttpInfoAsync(string? filter = default, string? orderBy = default, int? pageSize = default, string? pageToken = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "ProductsApi.ListProducts";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListProductsResponse>("/v2/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Product Updates a product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductRequest">updateProductRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Product</returns>
        public RestV2Product UpdateProduct(string productId, UpdateProductRequest updateProductRequest, List<string>? updateMask = default, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<RestV2Product> localVarResponse = UpdateProductWithHttpInfo(productId, updateProductRequest, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Product Updates a product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductRequest">updateProductRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Product</returns>
        public Keap.Core.V2.Client.ApiResponse<RestV2Product> UpdateProductWithHttpInfo(string productId, UpdateProductRequest updateProductRequest, List<string>? updateMask = default, int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdateProduct");
            }

            // verify the required parameter 'updateProductRequest' is set
            if (updateProductRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateProductRequest' when calling ProductsApi->UpdateProduct");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateProductRequest;

            localVarRequestOptions.Operation = "ProductsApi.UpdateProduct";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<RestV2Product>("/v2/products/{product_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Product Updates a product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductRequest">updateProductRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Product</returns>
        public async System.Threading.Tasks.Task<RestV2Product> UpdateProductAsync(string productId, UpdateProductRequest updateProductRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Keap.Core.V2.Client.ApiResponse<RestV2Product> localVarResponse = await UpdateProductWithHttpInfoAsync(productId, updateProductRequest, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Product Updates a product
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductRequest">updateProductRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Product)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<RestV2Product>> UpdateProductWithHttpInfoAsync(string productId, UpdateProductRequest updateProductRequest, List<string>? updateMask = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdateProduct");
            }

            // verify the required parameter 'updateProductRequest' is set
            if (updateProductRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateProductRequest' when calling ProductsApi->UpdateProduct");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateProductRequest;

            localVarRequestOptions.Operation = "ProductsApi.UpdateProduct";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<RestV2Product>("/v2/products/{product_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
