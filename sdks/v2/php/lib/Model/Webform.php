<?php
/**
 * Webform
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Keap\Core\V2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.867851
 * Contact: api@keap.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Keap\Core\V2\Model;

use \ArrayAccess;
use \Keap\Core\V2\ObjectSerializer;

/**
 * Webform Class Doc Comment
 *
 * @category Class
 * @package  Keap\Core\V2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Webform implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Webform';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'create_time' => 'string',
        'custom_slug' => 'string',
        'duplicate_check_option' => 'string',
        'exit_option' => 'string',
        'funnel_id' => 'string',
        'id' => 'string',
        'name' => 'string',
        'pretty_webform_url' => 'string',
        'thank_you_page_url' => 'string',
        'update_time' => 'string',
        'webform_type' => 'string',
        'webform_url' => 'string',
        'xid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'create_time' => null,
        'custom_slug' => null,
        'duplicate_check_option' => null,
        'exit_option' => null,
        'funnel_id' => null,
        'id' => null,
        'name' => null,
        'pretty_webform_url' => null,
        'thank_you_page_url' => null,
        'update_time' => null,
        'webform_type' => null,
        'webform_url' => null,
        'xid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'create_time' => false,
        'custom_slug' => false,
        'duplicate_check_option' => false,
        'exit_option' => false,
        'funnel_id' => false,
        'id' => false,
        'name' => false,
        'pretty_webform_url' => false,
        'thank_you_page_url' => false,
        'update_time' => false,
        'webform_type' => false,
        'webform_url' => false,
        'xid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create_time' => 'create_time',
        'custom_slug' => 'custom_slug',
        'duplicate_check_option' => 'duplicate_check_option',
        'exit_option' => 'exit_option',
        'funnel_id' => 'funnel_id',
        'id' => 'id',
        'name' => 'name',
        'pretty_webform_url' => 'pretty_webform_url',
        'thank_you_page_url' => 'thank_you_page_url',
        'update_time' => 'update_time',
        'webform_type' => 'webform_type',
        'webform_url' => 'webform_url',
        'xid' => 'xid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create_time' => 'setCreateTime',
        'custom_slug' => 'setCustomSlug',
        'duplicate_check_option' => 'setDuplicateCheckOption',
        'exit_option' => 'setExitOption',
        'funnel_id' => 'setFunnelId',
        'id' => 'setId',
        'name' => 'setName',
        'pretty_webform_url' => 'setPrettyWebformUrl',
        'thank_you_page_url' => 'setThankYouPageUrl',
        'update_time' => 'setUpdateTime',
        'webform_type' => 'setWebformType',
        'webform_url' => 'setWebformUrl',
        'xid' => 'setXid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create_time' => 'getCreateTime',
        'custom_slug' => 'getCustomSlug',
        'duplicate_check_option' => 'getDuplicateCheckOption',
        'exit_option' => 'getExitOption',
        'funnel_id' => 'getFunnelId',
        'id' => 'getId',
        'name' => 'getName',
        'pretty_webform_url' => 'getPrettyWebformUrl',
        'thank_you_page_url' => 'getThankYouPageUrl',
        'update_time' => 'getUpdateTime',
        'webform_type' => 'getWebformType',
        'webform_url' => 'getWebformUrl',
        'xid' => 'getXid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DUPLICATE_CHECK_OPTION_EMAIL = 'EMAIL';
    public const DUPLICATE_CHECK_OPTION_EMAIL_AND_NAME = 'EMAIL_AND_NAME';
    public const DUPLICATE_CHECK_OPTION_EMAIL_AND_NAME_AND_COMPANY = 'EMAIL_AND_NAME_AND_COMPANY';
    public const DUPLICATE_CHECK_OPTION_NO_CHECK = 'NO_CHECK';
    public const EXIT_OPTION_REDIRECT = 'REDIRECT';
    public const EXIT_OPTION_FUNNEL_LINK = 'FUNNEL_LINK';
    public const EXIT_OPTION_HOSTED = 'HOSTED';
    public const EXIT_OPTION_LANDING_PAGE = 'LANDING_PAGE';
    public const EXIT_OPTION_WEB_FORM = 'WEB_FORM';
    public const EXIT_OPTION_SURVEY = 'SURVEY';
    public const EXIT_OPTION_UPDATE = 'UPDATE';
    public const EXIT_OPTION_UPDATE_OPT_OUT = 'UPDATE_OPT_OUT';
    public const EXIT_OPTION_OPT_OUT = 'OPT_OUT';
    public const EXIT_OPTION_CONFIRM = 'CONFIRM';
    public const EXIT_OPTION_MESSAGE = 'MESSAGE';
    public const EXIT_OPTION_AUTHORING_MESSAGE = 'AUTHORING_MESSAGE';
    public const EXIT_OPTION_MANUAL = 'MANUAL';
    public const EXIT_OPTION_CLOSE = 'CLOSE';
    public const EXIT_OPTION_DISPLAY_TEXT_AND_BUTTON = 'DISPLAY_TEXT_AND_BUTTON';
    public const EXIT_OPTION_ERROR = 'ERROR';
    public const EXIT_OPTION_HOSTED_PAGE = 'HOSTED_PAGE';
    public const WEBFORM_TYPE_LEGACY = 'LEGACY';
    public const WEBFORM_TYPE_STANDALONE = 'STANDALONE';
    public const WEBFORM_TYPE_FUNNEL = 'FUNNEL';
    public const WEBFORM_TYPE_LANDING_PAGE = 'LANDING_PAGE';
    public const WEBFORM_TYPE_SURVEY = 'SURVEY';
    public const WEBFORM_TYPE_INTERNAL = 'INTERNAL';
    public const WEBFORM_TYPE_TWITTER = 'TWITTER';
    public const WEBFORM_TYPE_UNKNOWN = 'UNKNOWN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDuplicateCheckOptionAllowableValues()
    {
        return [
            self::DUPLICATE_CHECK_OPTION_EMAIL,
            self::DUPLICATE_CHECK_OPTION_EMAIL_AND_NAME,
            self::DUPLICATE_CHECK_OPTION_EMAIL_AND_NAME_AND_COMPANY,
            self::DUPLICATE_CHECK_OPTION_NO_CHECK,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExitOptionAllowableValues()
    {
        return [
            self::EXIT_OPTION_REDIRECT,
            self::EXIT_OPTION_FUNNEL_LINK,
            self::EXIT_OPTION_HOSTED,
            self::EXIT_OPTION_LANDING_PAGE,
            self::EXIT_OPTION_WEB_FORM,
            self::EXIT_OPTION_SURVEY,
            self::EXIT_OPTION_UPDATE,
            self::EXIT_OPTION_UPDATE_OPT_OUT,
            self::EXIT_OPTION_OPT_OUT,
            self::EXIT_OPTION_CONFIRM,
            self::EXIT_OPTION_MESSAGE,
            self::EXIT_OPTION_AUTHORING_MESSAGE,
            self::EXIT_OPTION_MANUAL,
            self::EXIT_OPTION_CLOSE,
            self::EXIT_OPTION_DISPLAY_TEXT_AND_BUTTON,
            self::EXIT_OPTION_ERROR,
            self::EXIT_OPTION_HOSTED_PAGE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebformTypeAllowableValues()
    {
        return [
            self::WEBFORM_TYPE_LEGACY,
            self::WEBFORM_TYPE_STANDALONE,
            self::WEBFORM_TYPE_FUNNEL,
            self::WEBFORM_TYPE_LANDING_PAGE,
            self::WEBFORM_TYPE_SURVEY,
            self::WEBFORM_TYPE_INTERNAL,
            self::WEBFORM_TYPE_TWITTER,
            self::WEBFORM_TYPE_UNKNOWN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('create_time', $data ?? [], null);
        $this->setIfExists('custom_slug', $data ?? [], null);
        $this->setIfExists('duplicate_check_option', $data ?? [], null);
        $this->setIfExists('exit_option', $data ?? [], null);
        $this->setIfExists('funnel_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('pretty_webform_url', $data ?? [], null);
        $this->setIfExists('thank_you_page_url', $data ?? [], null);
        $this->setIfExists('update_time', $data ?? [], null);
        $this->setIfExists('webform_type', $data ?? [], null);
        $this->setIfExists('webform_url', $data ?? [], null);
        $this->setIfExists('xid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDuplicateCheckOptionAllowableValues();
        if (!is_null($this->container['duplicate_check_option']) && !in_array($this->container['duplicate_check_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'duplicate_check_option', must be one of '%s'",
                $this->container['duplicate_check_option'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExitOptionAllowableValues();
        if (!is_null($this->container['exit_option']) && !in_array($this->container['exit_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'exit_option', must be one of '%s'",
                $this->container['exit_option'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebformTypeAllowableValues();
        if (!is_null($this->container['webform_type']) && !in_array($this->container['webform_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'webform_type', must be one of '%s'",
                $this->container['webform_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create_time
     *
     * @return string|null
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string|null $create_time When the webform was created
     *
     * @return self
     */
    public function setCreateTime($create_time)
    {
        if (is_null($create_time)) {
            throw new \InvalidArgumentException('non-nullable create_time cannot be null');
        }
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets custom_slug
     *
     * @return string|null
     */
    public function getCustomSlug()
    {
        return $this->container['custom_slug'];
    }

    /**
     * Sets custom_slug
     *
     * @param string|null $custom_slug The custom slug of the webform. Used in pretty webform URLs
     *
     * @return self
     */
    public function setCustomSlug($custom_slug)
    {
        if (is_null($custom_slug)) {
            throw new \InvalidArgumentException('non-nullable custom_slug cannot be null');
        }
        $this->container['custom_slug'] = $custom_slug;

        return $this;
    }

    /**
     * Gets duplicate_check_option
     *
     * @return string|null
     */
    public function getDuplicateCheckOption()
    {
        return $this->container['duplicate_check_option'];
    }

    /**
     * Sets duplicate_check_option
     *
     * @param string|null $duplicate_check_option The option that determines if the lead submitted through the form is a duplicate or not. If it's a duplicate, then the lead will be merged with the existing contact record
     *
     * @return self
     */
    public function setDuplicateCheckOption($duplicate_check_option)
    {
        if (is_null($duplicate_check_option)) {
            throw new \InvalidArgumentException('non-nullable duplicate_check_option cannot be null');
        }
        $allowedValues = $this->getDuplicateCheckOptionAllowableValues();
        if (!in_array($duplicate_check_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'duplicate_check_option', must be one of '%s'",
                    $duplicate_check_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['duplicate_check_option'] = $duplicate_check_option;

        return $this;
    }

    /**
     * Gets exit_option
     *
     * @return string|null
     */
    public function getExitOption()
    {
        return $this->container['exit_option'];
    }

    /**
     * Sets exit_option
     *
     * @param string|null $exit_option The option that determines what happens after the form is submitted
     *
     * @return self
     */
    public function setExitOption($exit_option)
    {
        if (is_null($exit_option)) {
            throw new \InvalidArgumentException('non-nullable exit_option cannot be null');
        }
        $allowedValues = $this->getExitOptionAllowableValues();
        if (!in_array($exit_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'exit_option', must be one of '%s'",
                    $exit_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['exit_option'] = $exit_option;

        return $this;
    }

    /**
     * Gets funnel_id
     *
     * @return string|null
     */
    public function getFunnelId()
    {
        return $this->container['funnel_id'];
    }

    /**
     * Sets funnel_id
     *
     * @param string|null $funnel_id The id of the funnel this webform belongs to, if any
     *
     * @return self
     */
    public function setFunnelId($funnel_id)
    {
        if (is_null($funnel_id)) {
            throw new \InvalidArgumentException('non-nullable funnel_id cannot be null');
        }
        $this->container['funnel_id'] = $funnel_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier for this webform
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of this webform
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pretty_webform_url
     *
     * @return string|null
     */
    public function getPrettyWebformUrl()
    {
        return $this->container['pretty_webform_url'];
    }

    /**
     * Sets pretty_webform_url
     *
     * @param string|null $pretty_webform_url The URL for this webform that uses the custom slug to identify it
     *
     * @return self
     */
    public function setPrettyWebformUrl($pretty_webform_url)
    {
        if (is_null($pretty_webform_url)) {
            throw new \InvalidArgumentException('non-nullable pretty_webform_url cannot be null');
        }
        $this->container['pretty_webform_url'] = $pretty_webform_url;

        return $this;
    }

    /**
     * Gets thank_you_page_url
     *
     * @return string|null
     */
    public function getThankYouPageUrl()
    {
        return $this->container['thank_you_page_url'];
    }

    /**
     * Sets thank_you_page_url
     *
     * @param string|null $thank_you_page_url The URL of the thank you page for this webform
     *
     * @return self
     */
    public function setThankYouPageUrl($thank_you_page_url)
    {
        if (is_null($thank_you_page_url)) {
            throw new \InvalidArgumentException('non-nullable thank_you_page_url cannot be null');
        }
        $this->container['thank_you_page_url'] = $thank_you_page_url;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string|null
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string|null $update_time When the webform was last updated
     *
     * @return self
     */
    public function setUpdateTime($update_time)
    {
        if (is_null($update_time)) {
            throw new \InvalidArgumentException('non-nullable update_time cannot be null');
        }
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets webform_type
     *
     * @return string|null
     */
    public function getWebformType()
    {
        return $this->container['webform_type'];
    }

    /**
     * Sets webform_type
     *
     * @param string|null $webform_type The type of webform this is
     *
     * @return self
     */
    public function setWebformType($webform_type)
    {
        if (is_null($webform_type)) {
            throw new \InvalidArgumentException('non-nullable webform_type cannot be null');
        }
        $allowedValues = $this->getWebformTypeAllowableValues();
        if (!in_array($webform_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'webform_type', must be one of '%s'",
                    $webform_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['webform_type'] = $webform_type;

        return $this;
    }

    /**
     * Gets webform_url
     *
     * @return string|null
     */
    public function getWebformUrl()
    {
        return $this->container['webform_url'];
    }

    /**
     * Sets webform_url
     *
     * @param string|null $webform_url The URL for this webform that uses the xid to identify it
     *
     * @return self
     */
    public function setWebformUrl($webform_url)
    {
        if (is_null($webform_url)) {
            throw new \InvalidArgumentException('non-nullable webform_url cannot be null');
        }
        $this->container['webform_url'] = $webform_url;

        return $this;
    }

    /**
     * Gets xid
     *
     * @return string|null
     */
    public function getXid()
    {
        return $this->container['xid'];
    }

    /**
     * Sets xid
     *
     * @param string|null $xid The public unique identifier for this tag, used in webform URLs
     *
     * @return self
     */
    public function setXid($xid)
    {
        if (is_null($xid)) {
            throw new \InvalidArgumentException('non-nullable xid cannot be null');
        }
        $this->container['xid'] = $xid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


