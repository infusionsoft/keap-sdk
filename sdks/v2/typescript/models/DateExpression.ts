/**
 * Keap REST API
 * Keap REST Core Service
 *
 * OpenAPI spec version: 2.70.0.812056
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { LogicalDate } from '../models/LogicalDate';
import { HttpFile } from '../http/http';

export class DateExpression {
    'query': string;
    /**
    * Where in the expression this date exists (start)
    */
    'parseStart': number;
    /**
    * Where in the expression this date exists
    */
    'parseEnd': number;
    /**
    * Whether the date portion of the results has been inferred (and can be ignored)
    */
    'dateInferred': boolean;
    /**
    * Whether the time portion of the results has been inferred (and can be ignored)
    */
    'timeInferred': boolean;
    'result': LogicalDate;
    /**
    * Whether the results are recurring
    */
    'recurring': boolean;
    /**
    * If recurring, when the recurrence ends
    */
    'recurseUntil': LogicalDate;
    'completeMatch'?: boolean | null;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "query",
            "baseName": "query",
            "type": "string",
            "format": ""
        },
        {
            "name": "parseStart",
            "baseName": "parse_start",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "parseEnd",
            "baseName": "parse_end",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "dateInferred",
            "baseName": "date_inferred",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "timeInferred",
            "baseName": "time_inferred",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "result",
            "baseName": "result",
            "type": "LogicalDate",
            "format": ""
        },
        {
            "name": "recurring",
            "baseName": "recurring",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "recurseUntil",
            "baseName": "recurse_until",
            "type": "LogicalDate",
            "format": ""
        },
        {
            "name": "completeMatch",
            "baseName": "complete_match",
            "type": "boolean",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return DateExpression.attributeTypeMap;
    }

    public constructor() {
    }
}
