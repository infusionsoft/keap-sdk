/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.848026-hf-202508251610
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddToAutomationSequenceRequest from '../model/AddToAutomationSequenceRequest';
import AddToAutomationSequenceResponse from '../model/AddToAutomationSequenceResponse';
import AssignAutomationCategoryRequest from '../model/AssignAutomationCategoryRequest';
import Automation from '../model/Automation';
import Error from '../model/Error';
import ListAutomationIdsResponse from '../model/ListAutomationIdsResponse';
import ListAutomationResponse from '../model/ListAutomationResponse';

/**
* Automation service.
* @module keap.core.v2/api/AutomationApi
*/
export default class AutomationApi {

    /**
    * Constructs a new AutomationApi. 
    * @alias module:keap.core.v2/api/AutomationApi
    * @class
    * @param {module:keap.core.v2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:keap.core.v2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add Contacts to an Automation Sequence
     * Adds a list of contacts to an automation sequence Response contains a map of the provided list of Contact Ids and their individual result.
     * @param {String} automationId automation_id
     * @param {String} sequenceId sequence_id
     * @param {module:keap.core.v2/model/AddToAutomationSequenceRequest} addToAutomationSequenceRequest addToAutomationSequenceRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/AddToAutomationSequenceResponse} and HTTP response
     */
    addContactsToAutomationSequenceWithHttpInfo(automationId, sequenceId, addToAutomationSequenceRequest) {
      let postBody = addToAutomationSequenceRequest;
      // verify the required parameter 'automationId' is set
      if (automationId === undefined || automationId === null) {
        throw new Error("Missing the required parameter 'automationId' when calling addContactsToAutomationSequence");
      }
      // verify the required parameter 'sequenceId' is set
      if (sequenceId === undefined || sequenceId === null) {
        throw new Error("Missing the required parameter 'sequenceId' when calling addContactsToAutomationSequence");
      }
      // verify the required parameter 'addToAutomationSequenceRequest' is set
      if (addToAutomationSequenceRequest === undefined || addToAutomationSequenceRequest === null) {
        throw new Error("Missing the required parameter 'addToAutomationSequenceRequest' when calling addContactsToAutomationSequence");
      }

      let pathParams = {
        'automation_id': automationId,
        'sequence_id': sequenceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddToAutomationSequenceResponse;
      return this.apiClient.callApi(
        '/v2/automations/{automation_id}/sequences/{sequence_id}:addContacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add Contacts to an Automation Sequence
     * Adds a list of contacts to an automation sequence Response contains a map of the provided list of Contact Ids and their individual result.
     * @param {String} automationId automation_id
     * @param {String} sequenceId sequence_id
     * @param {module:keap.core.v2/model/AddToAutomationSequenceRequest} addToAutomationSequenceRequest addToAutomationSequenceRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/AddToAutomationSequenceResponse}
     */
    addContactsToAutomationSequence(automationId, sequenceId, addToAutomationSequenceRequest) {
      return this.addContactsToAutomationSequenceWithHttpInfo(automationId, sequenceId, addToAutomationSequenceRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Bulk update for Automations Categories
     * Bulk updates the categories of one or more automations
     * @param {module:keap.core.v2/model/AssignAutomationCategoryRequest} assignAutomationCategoryRequest assignAutomationCategoryRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    bulkAssignmentAutomationsCategoriesWithHttpInfo(assignAutomationCategoryRequest) {
      let postBody = assignAutomationCategoryRequest;
      // verify the required parameter 'assignAutomationCategoryRequest' is set
      if (assignAutomationCategoryRequest === undefined || assignAutomationCategoryRequest === null) {
        throw new Error("Missing the required parameter 'assignAutomationCategoryRequest' when calling bulkAssignmentAutomationsCategories");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/automations/categories/batchAssign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Bulk update for Automations Categories
     * Bulk updates the categories of one or more automations
     * @param {module:keap.core.v2/model/AssignAutomationCategoryRequest} assignAutomationCategoryRequest assignAutomationCategoryRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    bulkAssignmentAutomationsCategories(assignAutomationCategoryRequest) {
      return this.bulkAssignmentAutomationsCategoriesWithHttpInfo(assignAutomationCategoryRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an Automation
     * Deletes a single automation
     * @param {Array.<Number>} automationIds automation_ids
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAutomationWithHttpInfo(automationIds) {
      let postBody = null;
      // verify the required parameter 'automationIds' is set
      if (automationIds === undefined || automationIds === null) {
        throw new Error("Missing the required parameter 'automationIds' when calling deleteAutomation");
      }

      let pathParams = {
      };
      let queryParams = {
        'automation_ids': this.apiClient.buildCollectionParam(automationIds, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/automations', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an Automation
     * Deletes a single automation
     * @param {Array.<Number>} automationIds automation_ids
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAutomation(automationIds) {
      return this.deleteAutomationWithHttpInfo(automationIds)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an Automation
     * Retrieves a single automation
     * @param {String} automationId automation_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/Automation} and HTTP response
     */
    getAutomationWithHttpInfo(automationId) {
      let postBody = null;
      // verify the required parameter 'automationId' is set
      if (automationId === undefined || automationId === null) {
        throw new Error("Missing the required parameter 'automationId' when calling getAutomation");
      }

      let pathParams = {
        'automation_id': automationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Automation;
      return this.apiClient.callApi(
        '/v2/automations/{automation_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an Automation
     * Retrieves a single automation
     * @param {String} automationId automation_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/Automation}
     */
    getAutomation(automationId) {
      return this.getAutomationWithHttpInfo(automationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Automations Ids
     * Retrieves a list of automations IDs
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are: - (String) `name`  You will need to apply the `==` operator to check the equality of the filter with your searched text, in the encoded form `%3D%3D`. The search will look for the text anywhere in the automation name.  - `filter=name%3D%3DSpring Automation` - `filter=name%3D%3DTag New Contacts` 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `name` - `category` - `activeContacts` - `publishedDate`  One of the following directions: - `asc` - `desc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @param {Boolean} [stats] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListAutomationIdsResponse} and HTTP response
     */
    listAllAutomationIdsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken'],
        'stats': opts['stats']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAutomationIdsResponse;
      return this.apiClient.callApi(
        '/v2/automations/ids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Automations Ids
     * Retrieves a list of automations IDs
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are: - (String) `name`  You will need to apply the `==` operator to check the equality of the filter with your searched text, in the encoded form `%3D%3D`. The search will look for the text anywhere in the automation name.  - `filter=name%3D%3DSpring Automation` - `filter=name%3D%3DTag New Contacts` 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `name` - `category` - `activeContacts` - `publishedDate`  One of the following directions: - `asc` - `desc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @param {Boolean} opts.stats 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListAutomationIdsResponse}
     */
    listAllAutomationIds(opts) {
      return this.listAllAutomationIdsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Automations
     * Retrieves a list of automations
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are: - (String) `name`  You will need to apply the `==` operator to check the equality of the filter with your searched text, in the encoded form `%3D%3D`. The search will look for the text anywhere in the automation name.  - `filter=name%3D%3DSpring Automation` - `filter=name%3D%3DTag New Contacts` 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `name` - `category` - `activeContacts` - `publishedDate`  One of the following directions: - `asc` - `desc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @param {Boolean} [stats] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListAutomationResponse} and HTTP response
     */
    listAutomationsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken'],
        'stats': opts['stats']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAutomationResponse;
      return this.apiClient.callApi(
        '/v2/automations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Automations
     * Retrieves a list of automations
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are: - (String) `name`  You will need to apply the `==` operator to check the equality of the filter with your searched text, in the encoded form `%3D%3D`. The search will look for the text anywhere in the automation name.  - `filter=name%3D%3DSpring Automation` - `filter=name%3D%3DTag New Contacts` 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `name` - `category` - `activeContacts` - `publishedDate`  One of the following directions: - `asc` - `desc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @param {Boolean} opts.stats 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListAutomationResponse}
     */
    listAutomations(opts) {
      return this.listAutomationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
