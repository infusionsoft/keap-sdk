/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.843039-hf-202508121547
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Contact from '../model/Contact';
import ContactLink from '../model/ContactLink';
import ContactLinkType from '../model/ContactLinkType';
import CreateContactLinkTypeRequest from '../model/CreateContactLinkTypeRequest';
import CreateUpdateContactRequest from '../model/CreateUpdateContactRequest';
import Error from '../model/Error';
import LinkContactsRequest from '../model/LinkContactsRequest';
import ListContactLinkTypesResponse from '../model/ListContactLinkTypesResponse';
import ListContactLinksResponse from '../model/ListContactLinksResponse';
import ListContactsResponse from '../model/ListContactsResponse';
import ObjectModel from '../model/ObjectModel';

/**
* Contact service.
* @module keap.core.v2/api/ContactApi
*/
export default class ContactApi {

    /**
    * Constructs a new ContactApi. 
    * @alias module:keap.core.v2/api/ContactApi
    * @class
    * @param {module:keap.core.v2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:keap.core.v2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a Contact
     * Creates a new Contact. *Note:* Contact must contain at least one item in `email_addresses` or `phone_numbers` and `country_code` is required if `region` is specified.
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/CreateUpdateContactRequest} [createUpdateContactRequest] contact
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/Contact} and HTTP response
     */
    createContactWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createUpdateContactRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Contact;
      return this.apiClient.callApi(
        '/v2/contacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Contact
     * Creates a new Contact. *Note:* Contact must contain at least one item in `email_addresses` or `phone_numbers` and `country_code` is required if `region` is specified.
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/CreateUpdateContactRequest} opts.createUpdateContactRequest contact
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/Contact}
     */
    createContact(opts) {
      return this.createContactWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Contact Link type
     * Creates a new type of Contact Link
     * @param {module:keap.core.v2/model/CreateContactLinkTypeRequest} createContactLinkTypeRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ContactLinkType} and HTTP response
     */
    createContactLinkTypeWithHttpInfo(createContactLinkTypeRequest) {
      let postBody = createContactLinkTypeRequest;
      // verify the required parameter 'createContactLinkTypeRequest' is set
      if (createContactLinkTypeRequest === undefined || createContactLinkTypeRequest === null) {
        throw new Error("Missing the required parameter 'createContactLinkTypeRequest' when calling createContactLinkType");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactLinkType;
      return this.apiClient.callApi(
        '/v2/contacts/links/types', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Contact Link type
     * Creates a new type of Contact Link
     * @param {module:keap.core.v2/model/CreateContactLinkTypeRequest} createContactLinkTypeRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ContactLinkType}
     */
    createContactLinkType(createContactLinkTypeRequest) {
      return this.createContactLinkTypeWithHttpInfo(createContactLinkTypeRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Contact
     * Deletes the specified Contact
     * @param {String} contactId contact_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteContactWithHttpInfo(contactId) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling deleteContact");
      }

      let pathParams = {
        'contact_id': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/contacts/{contact_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Contact
     * Deletes the specified Contact
     * @param {String} contactId contact_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteContact(contactId) {
      return this.deleteContactWithHttpInfo(contactId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Contact
     * Retrieves a single Contact
     * @param {String} contactId contact_id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] Comma-delimited list of Contact properties to include in the response. (Available fields are: addresses,anniversary_date,birth_date,company,contact_type,create_time, custom_fields,email_addresses,family_name,fax_numbers,given_name,id,job_title,leadsource_id, links,middle_name,notes,origin,owner_id,phone_numbers,preferred_locale,preferred_name,prefix, referral_code,score_value,social_accounts,source_type,spouse_name,suffix,tag_ids,time_zone, update_time,utm_parameters,website)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/Contact} and HTTP response
     */
    getContactWithHttpInfo(contactId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling getContact");
      }

      let pathParams = {
        'contact_id': contactId
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Contact;
      return this.apiClient.callApi(
        '/v2/contacts/{contact_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Contact
     * Retrieves a single Contact
     * @param {String} contactId contact_id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Comma-delimited list of Contact properties to include in the response. (Available fields are: addresses,anniversary_date,birth_date,company,contact_type,create_time, custom_fields,email_addresses,family_name,fax_numbers,given_name,id,job_title,leadsource_id, links,middle_name,notes,origin,owner_id,phone_numbers,preferred_locale,preferred_name,prefix, referral_code,score_value,social_accounts,source_type,spouse_name,suffix,tag_ids,time_zone, update_time,utm_parameters,website)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/Contact}
     */
    getContact(contactId, opts) {
      return this.getContactWithHttpInfo(contactId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Link Contacts
     * Links two Contacts together using the provided Link type
     * @param {module:keap.core.v2/model/LinkContactsRequest} linkContactsRequest linkContactsRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ContactLink} and HTTP response
     */
    linkContactsWithHttpInfo(linkContactsRequest) {
      let postBody = linkContactsRequest;
      // verify the required parameter 'linkContactsRequest' is set
      if (linkContactsRequest === undefined || linkContactsRequest === null) {
        throw new Error("Missing the required parameter 'linkContactsRequest' when calling linkContacts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactLink;
      return this.apiClient.callApi(
        '/v2/contacts:link', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Link Contacts
     * Links two Contacts together using the provided Link type
     * @param {module:keap.core.v2/model/LinkContactsRequest} linkContactsRequest linkContactsRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ContactLink}
     */
    linkContacts(linkContactsRequest) {
      return this.linkContactsWithHttpInfo(linkContactsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Contact Link types
     * Retrieves a list of Contact Link types.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are: - (String) `name` You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=name%3D%3DexpectedValue` 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `name` - `max_links` - `create_time`  One of the following directions: - `asc` - `desc` 
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListContactLinkTypesResponse} and HTTP response
     */
    listContactLinkTypesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListContactLinkTypesResponse;
      return this.apiClient.callApi(
        '/v2/contacts/links/types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Contact Link types
     * Retrieves a list of Contact Link types.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are: - (String) `name` You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=name%3D%3DexpectedValue` 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `name` - `max_links` - `create_time`  One of the following directions: - `asc` - `desc` 
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListContactLinkTypesResponse}
     */
    listContactLinkTypes(opts) {
      return this.listContactLinkTypesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Linked Contacts
     * Retrieves a list of Linked Contacts for a given Contact
     * @param {String} contactId contact_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListContactLinksResponse} and HTTP response
     */
    listContactLinksWithHttpInfo(contactId) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling listContactLinks");
      }

      let pathParams = {
        'contact_id': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListContactLinksResponse;
      return this.apiClient.callApi(
        '/v2/contacts/{contact_id}/links', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Linked Contacts
     * Retrieves a list of Linked Contacts for a given Contact
     * @param {String} contactId contact_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListContactLinksResponse}
     */
    listContactLinks(contactId) {
      return this.listContactLinksWithHttpInfo(contactId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Contacts
     * Retrieves a list of Contacts
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] Comma-delimited list of Contact properties to include in the response. (Available fields are: addresses,anniversary_date,birth_date,company,contact_type,create_time, custom_fields,email_addresses,family_name,fax_numbers,given_name,id,job_title,leadsource_id, links,middle_name,notes,origin,owner_id,phone_numbers,preferred_locale,preferred_name,prefix, referral_code,score_value,social_accounts,source_type,spouse_name,suffix,tag_ids,time_zone, update_time,utm_parameters,website)
     * @param {String} [filter] Filter to apply, allowed fields are: - (String) `email` - (String) `given_name` - (String) `family_name` - (String) `company_id` - (Set[String]) `contact_ids` - (String) `start_update_time` - (String) `end_update_time`  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=given_name%3D%3DMary` - `filter=company_id%3D%3D123` - `filter=company_id%3D%3D123%3Bfamily_name%3D%3DSmith` 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `id` - `date_created` - `email`  One of the following directions: - `asc` - `desc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListContactsResponse} and HTTP response
     */
    listContactsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListContactsResponse;
      return this.apiClient.callApi(
        '/v2/contacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Contacts
     * Retrieves a list of Contacts
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Comma-delimited list of Contact properties to include in the response. (Available fields are: addresses,anniversary_date,birth_date,company,contact_type,create_time, custom_fields,email_addresses,family_name,fax_numbers,given_name,id,job_title,leadsource_id, links,middle_name,notes,origin,owner_id,phone_numbers,preferred_locale,preferred_name,prefix, referral_code,score_value,social_accounts,source_type,spouse_name,suffix,tag_ids,time_zone, update_time,utm_parameters,website)
     * @param {String} opts.filter Filter to apply, allowed fields are: - (String) `email` - (String) `given_name` - (String) `family_name` - (String) `company_id` - (Set[String]) `contact_ids` - (String) `start_update_time` - (String) `end_update_time`  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=given_name%3D%3DMary` - `filter=company_id%3D%3D123` - `filter=company_id%3D%3D123%3Bfamily_name%3D%3DSmith` 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `id` - `date_created` - `email`  One of the following directions: - `asc` - `desc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListContactsResponse}
     */
    listContacts(opts) {
      return this.listContactsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Contact Model
     * Get the custom fields and optional properties for the Contact object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ObjectModel} and HTTP response
     */
    retrieveContactModelWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ObjectModel;
      return this.apiClient.callApi(
        '/v2/contacts/model', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Contact Model
     * Get the custom fields and optional properties for the Contact object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ObjectModel}
     */
    retrieveContactModel() {
      return this.retrieveContactModelWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Link between two Contacts
     * Deletes Link between two Contacts
     * @param {module:keap.core.v2/model/LinkContactsRequest} linkContactsRequest linkContactsRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    unlinkContactsWithHttpInfo(linkContactsRequest) {
      let postBody = linkContactsRequest;
      // verify the required parameter 'linkContactsRequest' is set
      if (linkContactsRequest === undefined || linkContactsRequest === null) {
        throw new Error("Missing the required parameter 'linkContactsRequest' when calling unlinkContacts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/contacts:unlink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Link between two Contacts
     * Deletes Link between two Contacts
     * @param {module:keap.core.v2/model/LinkContactsRequest} linkContactsRequest linkContactsRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    unlinkContacts(linkContactsRequest) {
      return this.unlinkContactsWithHttpInfo(linkContactsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Contact
     * Updates a Contact
     * @param {String} contactId contact_id
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @param {module:keap.core.v2/model/CreateUpdateContactRequest} [createUpdateContactRequest] contact
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/Contact} and HTTP response
     */
    updateContactWithHttpInfo(contactId, opts) {
      opts = opts || {};
      let postBody = opts['createUpdateContactRequest'];
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling updateContact");
      }

      let pathParams = {
        'contact_id': contactId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Contact;
      return this.apiClient.callApi(
        '/v2/contacts/{contact_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Contact
     * Updates a Contact
     * @param {String} contactId contact_id
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @param {module:keap.core.v2/model/CreateUpdateContactRequest} opts.createUpdateContactRequest contact
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/Contact}
     */
    updateContact(contactId, opts) {
      return this.updateContactWithHttpInfo(contactId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
