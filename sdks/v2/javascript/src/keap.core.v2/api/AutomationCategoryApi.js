/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.848026-hf-202508251610
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AutomationCategory from '../model/AutomationCategory';
import CreateAutomationCategoryRequest from '../model/CreateAutomationCategoryRequest';
import Error from '../model/Error';
import ListAutomationCategoryResponse from '../model/ListAutomationCategoryResponse';
import PatchAutomationCategoryRequest from '../model/PatchAutomationCategoryRequest';

/**
* AutomationCategory service.
* @module keap.core.v2/api/AutomationCategoryApi
*/
export default class AutomationCategoryApi {

    /**
    * Constructs a new AutomationCategoryApi. 
    * @alias module:keap.core.v2/api/AutomationCategoryApi
    * @class
    * @param {module:keap.core.v2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:keap.core.v2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create automation category
     * Creates a single automation category
     * @param {module:keap.core.v2/model/CreateAutomationCategoryRequest} createAutomationCategoryRequest createAutomationCategoryRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/AutomationCategory} and HTTP response
     */
    createCategoryWithHttpInfo(createAutomationCategoryRequest) {
      let postBody = createAutomationCategoryRequest;
      // verify the required parameter 'createAutomationCategoryRequest' is set
      if (createAutomationCategoryRequest === undefined || createAutomationCategoryRequest === null) {
        throw new Error("Missing the required parameter 'createAutomationCategoryRequest' when calling createCategory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AutomationCategory;
      return this.apiClient.callApi(
        '/v2/automationCategory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create automation category
     * Creates a single automation category
     * @param {module:keap.core.v2/model/CreateAutomationCategoryRequest} createAutomationCategoryRequest createAutomationCategoryRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/AutomationCategory}
     */
    createCategory(createAutomationCategoryRequest) {
      return this.createCategoryWithHttpInfo(createAutomationCategoryRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete automation category
     * Deletes one or more automation categories based on the request parameters
     * @param {Array.<Number>} ids ids
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCategoriesWithHttpInfo(ids) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling deleteCategories");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/automationCategory', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete automation category
     * Deletes one or more automation categories based on the request parameters
     * @param {Array.<Number>} ids ids
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCategories(ids) {
      return this.deleteCategoriesWithHttpInfo(ids)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List automation categories
     * Retrieves a list of automation categories
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListAutomationCategoryResponse} and HTTP response
     */
    listCategoriesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAutomationCategoryResponse;
      return this.apiClient.callApi(
        '/v2/automationCategory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List automation categories
     * Retrieves a list of automation categories
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListAutomationCategoryResponse}
     */
    listCategories() {
      return this.listCategoriesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update automation category
     * Updates part of a single automation category
     * @param {String} id id
     * @param {module:keap.core.v2/model/PatchAutomationCategoryRequest} patchAutomationCategoryRequest patchAutomationCategoryRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/AutomationCategory} and HTTP response
     */
    patchCategoryWithHttpInfo(id, patchAutomationCategoryRequest) {
      let postBody = patchAutomationCategoryRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchCategory");
      }
      // verify the required parameter 'patchAutomationCategoryRequest' is set
      if (patchAutomationCategoryRequest === undefined || patchAutomationCategoryRequest === null) {
        throw new Error("Missing the required parameter 'patchAutomationCategoryRequest' when calling patchCategory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AutomationCategory;
      return this.apiClient.callApi(
        '/v2/automationCategory/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update automation category
     * Updates part of a single automation category
     * @param {String} id id
     * @param {module:keap.core.v2/model/PatchAutomationCategoryRequest} patchAutomationCategoryRequest patchAutomationCategoryRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/AutomationCategory}
     */
    patchCategory(id, patchAutomationCategoryRequest) {
      return this.patchCategoryWithHttpInfo(id, patchAutomationCategoryRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
