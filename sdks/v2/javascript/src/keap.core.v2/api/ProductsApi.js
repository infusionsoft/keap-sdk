/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.869301
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateProductRequest from '../model/CreateProductRequest';
import Error from '../model/Error';
import ListProductsResponse from '../model/ListProductsResponse';
import RestV2Product from '../model/RestV2Product';
import UpdateProductInventoryRequest from '../model/UpdateProductInventoryRequest';
import UpdateProductRequest from '../model/UpdateProductRequest';

/**
* Products service.
* @module keap.core.v2/api/ProductsApi
*/
export default class ProductsApi {

    /**
    * Constructs a new ProductsApi. 
    * @alias module:keap.core.v2/api/ProductsApi
    * @class
    * @param {module:keap.core.v2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:keap.core.v2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Adjust Inventory of a Product
     * Increase or decrease the quantity of the Product
     * @param {String} productId product_id
     * @param {module:keap.core.v2/model/UpdateProductInventoryRequest} updateProductInventoryRequest updateProductInventoryRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/RestV2Product} and HTTP response
     */
    adjustInventoryWithHttpInfo(productId, updateProductInventoryRequest) {
      let postBody = updateProductInventoryRequest;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling adjustInventory");
      }
      // verify the required parameter 'updateProductInventoryRequest' is set
      if (updateProductInventoryRequest === undefined || updateProductInventoryRequest === null) {
        throw new Error("Missing the required parameter 'updateProductInventoryRequest' when calling adjustInventory");
      }

      let pathParams = {
        'product_id': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestV2Product;
      return this.apiClient.callApi(
        '/v2/products/{product_id}:adjustInventory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Adjust Inventory of a Product
     * Increase or decrease the quantity of the Product
     * @param {String} productId product_id
     * @param {module:keap.core.v2/model/UpdateProductInventoryRequest} updateProductInventoryRequest updateProductInventoryRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/RestV2Product}
     */
    adjustInventory(productId, updateProductInventoryRequest) {
      return this.adjustInventoryWithHttpInfo(productId, updateProductInventoryRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Product
     * Creates a new product
     * @param {module:keap.core.v2/model/CreateProductRequest} createProductRequest createProductRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/RestV2Product} and HTTP response
     */
    createProductWithHttpInfo(createProductRequest) {
      let postBody = createProductRequest;
      // verify the required parameter 'createProductRequest' is set
      if (createProductRequest === undefined || createProductRequest === null) {
        throw new Error("Missing the required parameter 'createProductRequest' when calling createProduct");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestV2Product;
      return this.apiClient.callApi(
        '/v2/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Product
     * Creates a new product
     * @param {module:keap.core.v2/model/CreateProductRequest} createProductRequest createProductRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/RestV2Product}
     */
    createProduct(createProductRequest) {
      return this.createProductWithHttpInfo(createProductRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create the Product Image
     * Creates the Product Image file and uploads it to the specified Product
     * @param {String} productId product_id
     * @param {File} file File to upload
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    createProductImageWithHttpInfo(productId, file) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling createProductImage");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createProductImage");
      }

      let pathParams = {
        'product_id': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/products/{product_id}/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create the Product Image
     * Creates the Product Image file and uploads it to the specified Product
     * @param {String} productId product_id
     * @param {File} file File to upload
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    createProductImage(productId, file) {
      return this.createProductImageWithHttpInfo(productId, file)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Product
     * Deletes a single product
     * @param {String} productId product_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProductWithHttpInfo(productId) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProduct");
      }

      let pathParams = {
        'product_id': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/products/{product_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Product
     * Deletes a single product
     * @param {String} productId product_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProduct(productId) {
      return this.deleteProductWithHttpInfo(productId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete the Product Image
     * Deletes the Product Image from the specified Product
     * @param {String} productId product_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProductImageWithHttpInfo(productId) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductImage");
      }

      let pathParams = {
        'product_id': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/products/{product_id}/images', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete the Product Image
     * Deletes the Product Image from the specified Product
     * @param {String} productId product_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProductImage(productId) {
      return this.deleteProductImageWithHttpInfo(productId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a Product
     * Gets a single Product
     * @param {String} productId product_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/RestV2Product} and HTTP response
     */
    getProductWithHttpInfo(productId) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProduct");
      }

      let pathParams = {
        'product_id': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestV2Product;
      return this.apiClient.callApi(
        '/v2/products/{product_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a Product
     * Gets a single Product
     * @param {String} productId product_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/RestV2Product}
     */
    getProduct(productId) {
      return this.getProductWithHttpInfo(productId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Products
     * Retrieves a list of Products
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are: - (String) `name` 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `name`  One of the following directions: - `asc` - `desc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListProductsResponse} and HTTP response
     */
    listProductsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProductsResponse;
      return this.apiClient.callApi(
        '/v2/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Products
     * Retrieves a list of Products
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are: - (String) `name` 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `name`  One of the following directions: - `asc` - `desc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListProductsResponse}
     */
    listProducts(opts) {
      return this.listProductsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Product
     * Updates a product
     * @param {String} productId product_id
     * @param {module:keap.core.v2/model/UpdateProductRequest} updateProductRequest updateProductRequest
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/RestV2Product} and HTTP response
     */
    updateProductWithHttpInfo(productId, updateProductRequest, opts) {
      opts = opts || {};
      let postBody = updateProductRequest;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling updateProduct");
      }
      // verify the required parameter 'updateProductRequest' is set
      if (updateProductRequest === undefined || updateProductRequest === null) {
        throw new Error("Missing the required parameter 'updateProductRequest' when calling updateProduct");
      }

      let pathParams = {
        'product_id': productId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestV2Product;
      return this.apiClient.callApi(
        '/v2/products/{product_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Product
     * Updates a product
     * @param {String} productId product_id
     * @param {module:keap.core.v2/model/UpdateProductRequest} updateProductRequest updateProductRequest
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/RestV2Product}
     */
    updateProduct(productId, updateProductRequest, opts) {
      return this.updateProductWithHttpInfo(productId, updateProductRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
