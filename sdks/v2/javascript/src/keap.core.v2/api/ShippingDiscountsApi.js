/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.836642-hf-202507280853
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateShippingDiscountRequest from '../model/CreateShippingDiscountRequest';
import Error from '../model/Error';
import ListShippingDiscountsResponse from '../model/ListShippingDiscountsResponse';
import ShippingDiscount from '../model/ShippingDiscount';
import UpdateShippingDiscountRequest from '../model/UpdateShippingDiscountRequest';

/**
* ShippingDiscounts service.
* @module keap.core.v2/api/ShippingDiscountsApi
*/
export default class ShippingDiscountsApi {

    /**
    * Constructs a new ShippingDiscountsApi. 
    * @alias module:keap.core.v2/api/ShippingDiscountsApi
    * @class
    * @param {module:keap.core.v2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:keap.core.v2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a Shipping Discount
     * Creates a Shipping Discount
     * @param {module:keap.core.v2/model/CreateShippingDiscountRequest} createShippingDiscountRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ShippingDiscount} and HTTP response
     */
    createShippingDiscountWithHttpInfo(createShippingDiscountRequest) {
      let postBody = createShippingDiscountRequest;
      // verify the required parameter 'createShippingDiscountRequest' is set
      if (createShippingDiscountRequest === undefined || createShippingDiscountRequest === null) {
        throw new Error("Missing the required parameter 'createShippingDiscountRequest' when calling createShippingDiscount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShippingDiscount;
      return this.apiClient.callApi(
        '/v2/discounts/shipping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Shipping Discount
     * Creates a Shipping Discount
     * @param {module:keap.core.v2/model/CreateShippingDiscountRequest} createShippingDiscountRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ShippingDiscount}
     */
    createShippingDiscount(createShippingDiscountRequest) {
      return this.createShippingDiscountWithHttpInfo(createShippingDiscountRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Shipping Discount
     * Deletes a specified Shipping Discount
     * @param {String} discountId discount_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteShippingDiscountWithHttpInfo(discountId) {
      let postBody = null;
      // verify the required parameter 'discountId' is set
      if (discountId === undefined || discountId === null) {
        throw new Error("Missing the required parameter 'discountId' when calling deleteShippingDiscount");
      }

      let pathParams = {
        'discount_id': discountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/discounts/shipping/{discount_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Shipping Discount
     * Deletes a specified Shipping Discount
     * @param {String} discountId discount_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteShippingDiscount(discountId) {
      return this.deleteShippingDiscountWithHttpInfo(discountId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Shipping Discount
     * Retrieves a Shipping Discount
     * @param {String} discountId discount_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ShippingDiscount} and HTTP response
     */
    getShippingDiscountWithHttpInfo(discountId) {
      let postBody = null;
      // verify the required parameter 'discountId' is set
      if (discountId === undefined || discountId === null) {
        throw new Error("Missing the required parameter 'discountId' when calling getShippingDiscount");
      }

      let pathParams = {
        'discount_id': discountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShippingDiscount;
      return this.apiClient.callApi(
        '/v2/discounts/shipping/{discount_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Shipping Discount
     * Retrieves a Shipping Discount
     * @param {String} discountId discount_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ShippingDiscount}
     */
    getShippingDiscount(discountId) {
      return this.getShippingDiscountWithHttpInfo(discountId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all Shipping Discounts
     * Retrieves a list of Shipping Discounts
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are: - (DiscountType) `discount_type`: AMOUNT or PERCENT - (Double) `discount_value`  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=discount_type%3D%3DAMOUNT` - `filter=discount_value%3D%3D4.5` - `filter=discount_type%3D%3DAMOUNT%3Bdiscount_value%3D%3D4.5` 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `discount_type` - `discount_value` - `id` - `name`  One of the following directions: - `asc` - `desc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListShippingDiscountsResponse} and HTTP response
     */
    listShippingDiscountsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListShippingDiscountsResponse;
      return this.apiClient.callApi(
        '/v2/discounts/shipping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all Shipping Discounts
     * Retrieves a list of Shipping Discounts
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are: - (DiscountType) `discount_type`: AMOUNT or PERCENT - (Double) `discount_value`  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=discount_type%3D%3DAMOUNT` - `filter=discount_value%3D%3D4.5` - `filter=discount_type%3D%3DAMOUNT%3Bdiscount_value%3D%3D4.5` 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `discount_type` - `discount_value` - `id` - `name`  One of the following directions: - `asc` - `desc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListShippingDiscountsResponse}
     */
    listShippingDiscounts(opts) {
      return this.listShippingDiscountsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Shipping Discount
     * Updates a Shipping Discount
     * @param {String} discountId discount_id
     * @param {module:keap.core.v2/model/UpdateShippingDiscountRequest} updateShippingDiscountRequest request
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ShippingDiscount} and HTTP response
     */
    updateShippingDiscountWithHttpInfo(discountId, updateShippingDiscountRequest, opts) {
      opts = opts || {};
      let postBody = updateShippingDiscountRequest;
      // verify the required parameter 'discountId' is set
      if (discountId === undefined || discountId === null) {
        throw new Error("Missing the required parameter 'discountId' when calling updateShippingDiscount");
      }
      // verify the required parameter 'updateShippingDiscountRequest' is set
      if (updateShippingDiscountRequest === undefined || updateShippingDiscountRequest === null) {
        throw new Error("Missing the required parameter 'updateShippingDiscountRequest' when calling updateShippingDiscount");
      }

      let pathParams = {
        'discount_id': discountId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShippingDiscount;
      return this.apiClient.callApi(
        '/v2/discounts/shipping/{discount_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Shipping Discount
     * Updates a Shipping Discount
     * @param {String} discountId discount_id
     * @param {module:keap.core.v2/model/UpdateShippingDiscountRequest} updateShippingDiscountRequest request
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ShippingDiscount}
     */
    updateShippingDiscount(discountId, updateShippingDiscountRequest, opts) {
      return this.updateShippingDiscountWithHttpInfo(discountId, updateShippingDiscountRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
