/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.863963
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssignProductsRequest from '../model/AssignProductsRequest';
import CreateProductCategoryRequest from '../model/CreateProductCategoryRequest';
import Error from '../model/Error';
import ListProductCategoriesResponse from '../model/ListProductCategoriesResponse';
import ProductCategory from '../model/ProductCategory';
import UpdateProductCategoryRequest from '../model/UpdateProductCategoryRequest';

/**
* ProductCategories service.
* @module keap.core.v2/api/ProductCategoriesApi
*/
export default class ProductCategoriesApi {

    /**
    * Constructs a new ProductCategoriesApi. 
    * @alias module:keap.core.v2/api/ProductCategoriesApi
    * @class
    * @param {module:keap.core.v2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:keap.core.v2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Assign Products to a Product Category
     * Assigns products to a Product Category
     * @param {String} categoryId category_id
     * @param {module:keap.core.v2/model/AssignProductsRequest} assignProductsRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    assignProductsToCategoryWithHttpInfo(categoryId, assignProductsRequest) {
      let postBody = assignProductsRequest;
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling assignProductsToCategory");
      }
      // verify the required parameter 'assignProductsRequest' is set
      if (assignProductsRequest === undefined || assignProductsRequest === null) {
        throw new Error("Missing the required parameter 'assignProductsRequest' when calling assignProductsToCategory");
      }

      let pathParams = {
        'category_id': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/productCategories/{category_id}:assignProducts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Assign Products to a Product Category
     * Assigns products to a Product Category
     * @param {String} categoryId category_id
     * @param {module:keap.core.v2/model/AssignProductsRequest} assignProductsRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    assignProductsToCategory(categoryId, assignProductsRequest) {
      return this.assignProductsToCategoryWithHttpInfo(categoryId, assignProductsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create the product category image file
     * Creates the product category image file and uploads it to the specified product category
     * @param {String} categoryId category_id
     * @param {File} file File to upload
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    createImageFileWithHttpInfo(categoryId, file) {
      let postBody = null;
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling createImageFile");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createImageFile");
      }

      let pathParams = {
        'category_id': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/productCategories/{category_id}/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create the product category image file
     * Creates the product category image file and uploads it to the specified product category
     * @param {String} categoryId category_id
     * @param {File} file File to upload
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    createImageFile(categoryId, file) {
      return this.createImageFileWithHttpInfo(categoryId, file)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Product Category
     * Creates a new Product Category
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/CreateProductCategoryRequest} [createProductCategoryRequest] productCategory
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ProductCategory} and HTTP response
     */
    createProductCategoryWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createProductCategoryRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductCategory;
      return this.apiClient.callApi(
        '/v2/productCategories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Product Category
     * Creates a new Product Category
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/CreateProductCategoryRequest} opts.createProductCategoryRequest productCategory
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ProductCategory}
     */
    createProductCategory(opts) {
      return this.createProductCategoryWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete the image from a product category
     * Deletes the image from the specified product category
     * @param {String} categoryId category_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteImageFileWithHttpInfo(categoryId) {
      let postBody = null;
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling deleteImageFile");
      }

      let pathParams = {
        'category_id': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/productCategories/{category_id}/images', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete the image from a product category
     * Deletes the image from the specified product category
     * @param {String} categoryId category_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteImageFile(categoryId) {
      return this.deleteImageFileWithHttpInfo(categoryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Product Category
     * Deletes the specified Product Category, its sub-categories, and removes products from it
     * @param {String} categoryId category_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProductCategoryWithHttpInfo(categoryId) {
      let postBody = null;
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling deleteProductCategory");
      }

      let pathParams = {
        'category_id': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/productCategories/{category_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Product Category
     * Deletes the specified Product Category, its sub-categories, and removes products from it
     * @param {String} categoryId category_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProductCategory(categoryId) {
      return this.deleteProductCategoryWithHttpInfo(categoryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a Product Category
     * Gets a single Product Category
     * @param {String} categoryId category_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ProductCategory} and HTTP response
     */
    getProductCategoryWithHttpInfo(categoryId) {
      let postBody = null;
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getProductCategory");
      }

      let pathParams = {
        'category_id': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductCategory;
      return this.apiClient.callApi(
        '/v2/productCategories/{category_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a Product Category
     * Gets a single Product Category
     * @param {String} categoryId category_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ProductCategory}
     */
    getProductCategory(categoryId) {
      return this.getProductCategoryWithHttpInfo(categoryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all Product Categories
     * Retrieves a list of Product Categories
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are: - (String) `product_id`  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=product_id%3D%3D29` 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `id`  One of the following directions: - `asc` - `desc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListProductCategoriesResponse} and HTTP response
     */
    listProductCategoriesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProductCategoriesResponse;
      return this.apiClient.callApi(
        '/v2/productCategories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all Product Categories
     * Retrieves a list of Product Categories
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are: - (String) `product_id`  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=product_id%3D%3D29` 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `id`  One of the following directions: - `asc` - `desc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListProductCategoriesResponse}
     */
    listProductCategories(opts) {
      return this.listProductCategoriesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Product Category
     * Updates a single Product Category
     * @param {String} categoryId category_id
     * @param {module:keap.core.v2/model/UpdateProductCategoryRequest} updateProductCategoryRequest request
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ProductCategory} and HTTP response
     */
    updateProductCategoryWithHttpInfo(categoryId, updateProductCategoryRequest, opts) {
      opts = opts || {};
      let postBody = updateProductCategoryRequest;
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling updateProductCategory");
      }
      // verify the required parameter 'updateProductCategoryRequest' is set
      if (updateProductCategoryRequest === undefined || updateProductCategoryRequest === null) {
        throw new Error("Missing the required parameter 'updateProductCategoryRequest' when calling updateProductCategory");
      }

      let pathParams = {
        'category_id': categoryId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductCategory;
      return this.apiClient.callApi(
        '/v2/productCategories/{category_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Product Category
     * Updates a single Product Category
     * @param {String} categoryId category_id
     * @param {module:keap.core.v2/model/UpdateProductCategoryRequest} updateProductCategoryRequest request
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ProductCategory}
     */
    updateProductCategory(categoryId, updateProductCategoryRequest, opts) {
      return this.updateProductCategoryWithHttpInfo(categoryId, updateProductCategoryRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
