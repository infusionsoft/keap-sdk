/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.803777-hf-202504281900
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateLeadSourceExpenseRequest from '../model/CreateLeadSourceExpenseRequest';
import Error from '../model/Error';
import LeadSourceExpense from '../model/LeadSourceExpense';
import ListLeadSourceExpensesResponse from '../model/ListLeadSourceExpensesResponse';
import UpdateLeadSourceExpenseRequest from '../model/UpdateLeadSourceExpenseRequest';

/**
* LeadSourceExpenses service.
* @module keap.core.v2/api/LeadSourceExpensesApi
*/
export default class LeadSourceExpensesApi {

    /**
    * Constructs a new LeadSourceExpensesApi. 
    * @alias module:keap.core.v2/api/LeadSourceExpensesApi
    * @class
    * @param {module:keap.core.v2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:keap.core.v2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a Lead Source Expense
     * Creates a new Lead Source Expense
     * @param {String} leadSourceId The ID of the lead source this expense belongs to
     * @param {module:keap.core.v2/model/CreateLeadSourceExpenseRequest} createLeadSourceExpenseRequest The request object to create a new lead source expense
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/LeadSourceExpense} and HTTP response
     */
    createLeadSourceExpenseUsingPOSTWithHttpInfo(leadSourceId, createLeadSourceExpenseRequest) {
      let postBody = createLeadSourceExpenseRequest;
      // verify the required parameter 'leadSourceId' is set
      if (leadSourceId === undefined || leadSourceId === null) {
        throw new Error("Missing the required parameter 'leadSourceId' when calling createLeadSourceExpenseUsingPOST");
      }
      // verify the required parameter 'createLeadSourceExpenseRequest' is set
      if (createLeadSourceExpenseRequest === undefined || createLeadSourceExpenseRequest === null) {
        throw new Error("Missing the required parameter 'createLeadSourceExpenseRequest' when calling createLeadSourceExpenseUsingPOST");
      }

      let pathParams = {
        'lead_source_id': leadSourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeadSourceExpense;
      return this.apiClient.callApi(
        '/v2/leadSources/{lead_source_id}/expenses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Lead Source Expense
     * Creates a new Lead Source Expense
     * @param {String} leadSourceId The ID of the lead source this expense belongs to
     * @param {module:keap.core.v2/model/CreateLeadSourceExpenseRequest} createLeadSourceExpenseRequest The request object to create a new lead source expense
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/LeadSourceExpense}
     */
    createLeadSourceExpenseUsingPOST(leadSourceId, createLeadSourceExpenseRequest) {
      return this.createLeadSourceExpenseUsingPOSTWithHttpInfo(leadSourceId, createLeadSourceExpenseRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a lead source expense
     * Deletes a lead source expense by ID
     * @param {String} leadSourceExpenseId The ID of a lead source expense
     * @param {String} leadSourceId The ID of the lead source this expense belongs to
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteLeadSourceUsingDELETE1WithHttpInfo(leadSourceExpenseId, leadSourceId) {
      let postBody = null;
      // verify the required parameter 'leadSourceExpenseId' is set
      if (leadSourceExpenseId === undefined || leadSourceExpenseId === null) {
        throw new Error("Missing the required parameter 'leadSourceExpenseId' when calling deleteLeadSourceUsingDELETE1");
      }
      // verify the required parameter 'leadSourceId' is set
      if (leadSourceId === undefined || leadSourceId === null) {
        throw new Error("Missing the required parameter 'leadSourceId' when calling deleteLeadSourceUsingDELETE1");
      }

      let pathParams = {
        'lead_source_expense_id': leadSourceExpenseId,
        'lead_source_id': leadSourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/leadSources/{lead_source_id}/expenses/{lead_source_expense_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a lead source expense
     * Deletes a lead source expense by ID
     * @param {String} leadSourceExpenseId The ID of a lead source expense
     * @param {String} leadSourceId The ID of the lead source this expense belongs to
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteLeadSourceUsingDELETE1(leadSourceExpenseId, leadSourceId) {
      return this.deleteLeadSourceUsingDELETE1WithHttpInfo(leadSourceExpenseId, leadSourceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Lead Source Expense
     * Retrieves a single Lead Source Expense for a given ID
     * @param {String} leadSourceExpenseId The ID of a lead source expense
     * @param {String} leadSourceId The ID of the lead source this expense belongs to
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/LeadSourceExpense} and HTTP response
     */
    getLeadSourceExpenseUsingGETWithHttpInfo(leadSourceExpenseId, leadSourceId) {
      let postBody = null;
      // verify the required parameter 'leadSourceExpenseId' is set
      if (leadSourceExpenseId === undefined || leadSourceExpenseId === null) {
        throw new Error("Missing the required parameter 'leadSourceExpenseId' when calling getLeadSourceExpenseUsingGET");
      }
      // verify the required parameter 'leadSourceId' is set
      if (leadSourceId === undefined || leadSourceId === null) {
        throw new Error("Missing the required parameter 'leadSourceId' when calling getLeadSourceExpenseUsingGET");
      }

      let pathParams = {
        'lead_source_expense_id': leadSourceExpenseId,
        'lead_source_id': leadSourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LeadSourceExpense;
      return this.apiClient.callApi(
        '/v2/leadSources/{lead_source_id}/expenses/{lead_source_expense_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Lead Source Expense
     * Retrieves a single Lead Source Expense for a given ID
     * @param {String} leadSourceExpenseId The ID of a lead source expense
     * @param {String} leadSourceId The ID of the lead source this expense belongs to
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/LeadSourceExpense}
     */
    getLeadSourceExpenseUsingGET(leadSourceExpenseId, leadSourceId) {
      return this.getLeadSourceExpenseUsingGETWithHttpInfo(leadSourceExpenseId, leadSourceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Lead Source Expenses
     * Retrieves a list of lead source expenses
     * @param {String} leadSourceId The ID of the lead source this expense belongs to
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are:  - (String) `title` - (Long) `amount` - (String) `incurred_time` - (String) `create_time` - (String) `update_time`  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples:  - `filter=amount%3D%3D2500` - `filter=incurred_time%3D%3D2024-12-22T01:00:00.000Z`
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields:  - `title` - `amount` - `incurred_time` - `create_time` - `update_time`  One of the following directions: - `asc` - `desc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListLeadSourceExpensesResponse} and HTTP response
     */
    listLeadSourceExpensesUsingGETWithHttpInfo(leadSourceId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'leadSourceId' is set
      if (leadSourceId === undefined || leadSourceId === null) {
        throw new Error("Missing the required parameter 'leadSourceId' when calling listLeadSourceExpensesUsingGET");
      }

      let pathParams = {
        'lead_source_id': leadSourceId
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLeadSourceExpensesResponse;
      return this.apiClient.callApi(
        '/v2/leadSources/{lead_source_id}/expenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Lead Source Expenses
     * Retrieves a list of lead source expenses
     * @param {String} leadSourceId The ID of the lead source this expense belongs to
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are:  - (String) `title` - (Long) `amount` - (String) `incurred_time` - (String) `create_time` - (String) `update_time`  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples:  - `filter=amount%3D%3D2500` - `filter=incurred_time%3D%3D2024-12-22T01:00:00.000Z`
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields:  - `title` - `amount` - `incurred_time` - `create_time` - `update_time`  One of the following directions: - `asc` - `desc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListLeadSourceExpensesResponse}
     */
    listLeadSourceExpensesUsingGET(leadSourceId, opts) {
      return this.listLeadSourceExpensesUsingGETWithHttpInfo(leadSourceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Lead Source Expense
     * Updates a new Lead Source Expense
     * @param {String} leadSourceExpenseId The ID of a lead source expense
     * @param {String} leadSourceId The ID of the lead source this expense belongs to
     * @param {module:keap.core.v2/model/UpdateLeadSourceExpenseRequest} updateLeadSourceExpenseRequest The request object to update a lead source expense
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/LeadSourceExpense} and HTTP response
     */
    updateLeadSourceExpenseUsingPATCHWithHttpInfo(leadSourceExpenseId, leadSourceId, updateLeadSourceExpenseRequest, opts) {
      opts = opts || {};
      let postBody = updateLeadSourceExpenseRequest;
      // verify the required parameter 'leadSourceExpenseId' is set
      if (leadSourceExpenseId === undefined || leadSourceExpenseId === null) {
        throw new Error("Missing the required parameter 'leadSourceExpenseId' when calling updateLeadSourceExpenseUsingPATCH");
      }
      // verify the required parameter 'leadSourceId' is set
      if (leadSourceId === undefined || leadSourceId === null) {
        throw new Error("Missing the required parameter 'leadSourceId' when calling updateLeadSourceExpenseUsingPATCH");
      }
      // verify the required parameter 'updateLeadSourceExpenseRequest' is set
      if (updateLeadSourceExpenseRequest === undefined || updateLeadSourceExpenseRequest === null) {
        throw new Error("Missing the required parameter 'updateLeadSourceExpenseRequest' when calling updateLeadSourceExpenseUsingPATCH");
      }

      let pathParams = {
        'lead_source_expense_id': leadSourceExpenseId,
        'lead_source_id': leadSourceId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeadSourceExpense;
      return this.apiClient.callApi(
        '/v2/leadSources/{lead_source_id}/expenses/{lead_source_expense_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Lead Source Expense
     * Updates a new Lead Source Expense
     * @param {String} leadSourceExpenseId The ID of a lead source expense
     * @param {String} leadSourceId The ID of the lead source this expense belongs to
     * @param {module:keap.core.v2/model/UpdateLeadSourceExpenseRequest} updateLeadSourceExpenseRequest The request object to update a lead source expense
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/LeadSourceExpense}
     */
    updateLeadSourceExpenseUsingPATCH(leadSourceExpenseId, leadSourceId, updateLeadSourceExpenseRequest, opts) {
      return this.updateLeadSourceExpenseUsingPATCHWithHttpInfo(leadSourceExpenseId, leadSourceId, updateLeadSourceExpenseRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
