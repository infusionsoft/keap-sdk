/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.844065-hf-202508141354
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateOrderTotalDiscountRequest from '../model/CreateOrderTotalDiscountRequest';
import Error from '../model/Error';
import ListOrderTotalDiscountsResponse from '../model/ListOrderTotalDiscountsResponse';
import OrderTotalDiscount from '../model/OrderTotalDiscount';
import UpdateOrderTotalDiscountRequest from '../model/UpdateOrderTotalDiscountRequest';

/**
* OrderTotalDiscounts service.
* @module keap.core.v2/api/OrderTotalDiscountsApi
*/
export default class OrderTotalDiscountsApi {

    /**
    * Constructs a new OrderTotalDiscountsApi. 
    * @alias module:keap.core.v2/api/OrderTotalDiscountsApi
    * @class
    * @param {module:keap.core.v2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:keap.core.v2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create an Order Total Discount
     * Creates an Order Total Discount
     * @param {module:keap.core.v2/model/CreateOrderTotalDiscountRequest} createOrderTotalDiscountRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/OrderTotalDiscount} and HTTP response
     */
    createOrderTotalDiscountWithHttpInfo(createOrderTotalDiscountRequest) {
      let postBody = createOrderTotalDiscountRequest;
      // verify the required parameter 'createOrderTotalDiscountRequest' is set
      if (createOrderTotalDiscountRequest === undefined || createOrderTotalDiscountRequest === null) {
        throw new Error("Missing the required parameter 'createOrderTotalDiscountRequest' when calling createOrderTotalDiscount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderTotalDiscount;
      return this.apiClient.callApi(
        '/v2/discounts/orderTotals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an Order Total Discount
     * Creates an Order Total Discount
     * @param {module:keap.core.v2/model/CreateOrderTotalDiscountRequest} createOrderTotalDiscountRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/OrderTotalDiscount}
     */
    createOrderTotalDiscount(createOrderTotalDiscountRequest) {
      return this.createOrderTotalDiscountWithHttpInfo(createOrderTotalDiscountRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an Order Total Discount
     * Deletes a specified Order Total Discount
     * @param {String} discountId discount_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteOrderTotalDiscountWithHttpInfo(discountId) {
      let postBody = null;
      // verify the required parameter 'discountId' is set
      if (discountId === undefined || discountId === null) {
        throw new Error("Missing the required parameter 'discountId' when calling deleteOrderTotalDiscount");
      }

      let pathParams = {
        'discount_id': discountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/discounts/orderTotals/{discount_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an Order Total Discount
     * Deletes a specified Order Total Discount
     * @param {String} discountId discount_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteOrderTotalDiscount(discountId) {
      return this.deleteOrderTotalDiscountWithHttpInfo(discountId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an Order Total Discount
     * Retrieves an Order Total Discount
     * @param {String} discountId discount_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/OrderTotalDiscount} and HTTP response
     */
    getOrderTotalDiscountWithHttpInfo(discountId) {
      let postBody = null;
      // verify the required parameter 'discountId' is set
      if (discountId === undefined || discountId === null) {
        throw new Error("Missing the required parameter 'discountId' when calling getOrderTotalDiscount");
      }

      let pathParams = {
        'discount_id': discountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderTotalDiscount;
      return this.apiClient.callApi(
        '/v2/discounts/orderTotals/{discount_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an Order Total Discount
     * Retrieves an Order Total Discount
     * @param {String} discountId discount_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/OrderTotalDiscount}
     */
    getOrderTotalDiscount(discountId) {
      return this.getOrderTotalDiscountWithHttpInfo(discountId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all Order Total Discounts
     * Retrieves a list of Order Total Discounts
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are: - (Boolean) `apply_to_commissions` - (DiscountStrategy) `discount_strategy`: GROSS or NET - (DiscountType) `discount_type`: AMOUNT or PERCENT - (Double) `discount_value`  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=apply_to_commissions%3D%3Dtrue` - `filter=discount_strategy%3D%3DGROSS` - `filter=discount_type%3D%3DAMOUNT` - `filter=discount_value%3D%3D10.0` - `filter=discount_type%3D%3DAMOUNT%3Bdiscount_strategy%3D%3DNET` 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `apply_to_commissions` - `discount_strategy` - `discount_type` - `discount_value` - `id` - `name`  One of the following directions: - `asc` - `desc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListOrderTotalDiscountsResponse} and HTTP response
     */
    listOrderTotalDiscountsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListOrderTotalDiscountsResponse;
      return this.apiClient.callApi(
        '/v2/discounts/orderTotals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all Order Total Discounts
     * Retrieves a list of Order Total Discounts
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are: - (Boolean) `apply_to_commissions` - (DiscountStrategy) `discount_strategy`: GROSS or NET - (DiscountType) `discount_type`: AMOUNT or PERCENT - (Double) `discount_value`  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=apply_to_commissions%3D%3Dtrue` - `filter=discount_strategy%3D%3DGROSS` - `filter=discount_type%3D%3DAMOUNT` - `filter=discount_value%3D%3D10.0` - `filter=discount_type%3D%3DAMOUNT%3Bdiscount_strategy%3D%3DNET` 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `apply_to_commissions` - `discount_strategy` - `discount_type` - `discount_value` - `id` - `name`  One of the following directions: - `asc` - `desc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListOrderTotalDiscountsResponse}
     */
    listOrderTotalDiscounts(opts) {
      return this.listOrderTotalDiscountsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an Order Total Discount
     * Updates an Order Total Discount
     * @param {String} discountId discount_id
     * @param {module:keap.core.v2/model/UpdateOrderTotalDiscountRequest} updateOrderTotalDiscountRequest request
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/OrderTotalDiscount} and HTTP response
     */
    updateOrderTotalDiscountWithHttpInfo(discountId, updateOrderTotalDiscountRequest, opts) {
      opts = opts || {};
      let postBody = updateOrderTotalDiscountRequest;
      // verify the required parameter 'discountId' is set
      if (discountId === undefined || discountId === null) {
        throw new Error("Missing the required parameter 'discountId' when calling updateOrderTotalDiscount");
      }
      // verify the required parameter 'updateOrderTotalDiscountRequest' is set
      if (updateOrderTotalDiscountRequest === undefined || updateOrderTotalDiscountRequest === null) {
        throw new Error("Missing the required parameter 'updateOrderTotalDiscountRequest' when calling updateOrderTotalDiscount");
      }

      let pathParams = {
        'discount_id': discountId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderTotalDiscount;
      return this.apiClient.callApi(
        '/v2/discounts/orderTotals/{discount_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an Order Total Discount
     * Updates an Order Total Discount
     * @param {String} discountId discount_id
     * @param {module:keap.core.v2/model/UpdateOrderTotalDiscountRequest} updateOrderTotalDiscountRequest request
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/OrderTotalDiscount}
     */
    updateOrderTotalDiscount(discountId, updateOrderTotalDiscountRequest, opts) {
      return this.updateOrderTotalDiscountWithHttpInfo(discountId, updateOrderTotalDiscountRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
