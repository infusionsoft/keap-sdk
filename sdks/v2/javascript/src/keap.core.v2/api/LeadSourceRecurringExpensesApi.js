/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.839048
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateLeadSourceRecurringExpenseRequest from '../model/CreateLeadSourceRecurringExpenseRequest';
import Error from '../model/Error';
import LeadSourceRecurringExpense from '../model/LeadSourceRecurringExpense';
import LeadSourceRecurringExpenseUpdateRequest from '../model/LeadSourceRecurringExpenseUpdateRequest';
import ListLeadSourceExpensesResponse from '../model/ListLeadSourceExpensesResponse';
import ListLeadSourceRecurringExpensesResponse from '../model/ListLeadSourceRecurringExpensesResponse';

/**
* LeadSourceRecurringExpenses service.
* @module keap.core.v2/api/LeadSourceRecurringExpensesApi
*/
export default class LeadSourceRecurringExpensesApi {

    /**
    * Constructs a new LeadSourceRecurringExpensesApi. 
    * @alias module:keap.core.v2/api/LeadSourceRecurringExpensesApi
    * @class
    * @param {module:keap.core.v2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:keap.core.v2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a Lead Source Recurring Expense
     * Creates a new Lead Source Recurring Expense
     * @param {String} leadSourceId The ID of the lead source this recurring expense belongs to
     * @param {module:keap.core.v2/model/CreateLeadSourceRecurringExpenseRequest} createLeadSourceRecurringExpenseRequest The request object to create a new lead source recurring expense
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/LeadSourceRecurringExpense} and HTTP response
     */
    createLeadSourceRecurringExpenseWithHttpInfo(leadSourceId, createLeadSourceRecurringExpenseRequest) {
      let postBody = createLeadSourceRecurringExpenseRequest;
      // verify the required parameter 'leadSourceId' is set
      if (leadSourceId === undefined || leadSourceId === null) {
        throw new Error("Missing the required parameter 'leadSourceId' when calling createLeadSourceRecurringExpense");
      }
      // verify the required parameter 'createLeadSourceRecurringExpenseRequest' is set
      if (createLeadSourceRecurringExpenseRequest === undefined || createLeadSourceRecurringExpenseRequest === null) {
        throw new Error("Missing the required parameter 'createLeadSourceRecurringExpenseRequest' when calling createLeadSourceRecurringExpense");
      }

      let pathParams = {
        'lead_source_id': leadSourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeadSourceRecurringExpense;
      return this.apiClient.callApi(
        '/v2/leadSources/{lead_source_id}/recurringExpenses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Lead Source Recurring Expense
     * Creates a new Lead Source Recurring Expense
     * @param {String} leadSourceId The ID of the lead source this recurring expense belongs to
     * @param {module:keap.core.v2/model/CreateLeadSourceRecurringExpenseRequest} createLeadSourceRecurringExpenseRequest The request object to create a new lead source recurring expense
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/LeadSourceRecurringExpense}
     */
    createLeadSourceRecurringExpense(leadSourceId, createLeadSourceRecurringExpenseRequest) {
      return this.createLeadSourceRecurringExpenseWithHttpInfo(leadSourceId, createLeadSourceRecurringExpenseRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Lead Source Recurring Expense
     * Deletes a new Lead Source Recurring Expense that belongs to a Lead Source
     * @param {String} leadSourceId The ID of the lead source this recurring expense belongs to
     * @param {String} leadSourceRecurringExpenseId The ID of a lead source recurring expense
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteLeadSourceRecurringExpenseWithHttpInfo(leadSourceId, leadSourceRecurringExpenseId) {
      let postBody = null;
      // verify the required parameter 'leadSourceId' is set
      if (leadSourceId === undefined || leadSourceId === null) {
        throw new Error("Missing the required parameter 'leadSourceId' when calling deleteLeadSourceRecurringExpense");
      }
      // verify the required parameter 'leadSourceRecurringExpenseId' is set
      if (leadSourceRecurringExpenseId === undefined || leadSourceRecurringExpenseId === null) {
        throw new Error("Missing the required parameter 'leadSourceRecurringExpenseId' when calling deleteLeadSourceRecurringExpense");
      }

      let pathParams = {
        'lead_source_id': leadSourceId,
        'lead_source_recurring_expense_id': leadSourceRecurringExpenseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/leadSources/{lead_source_id}/recurringExpenses/{lead_source_recurring_expense_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Lead Source Recurring Expense
     * Deletes a new Lead Source Recurring Expense that belongs to a Lead Source
     * @param {String} leadSourceId The ID of the lead source this recurring expense belongs to
     * @param {String} leadSourceRecurringExpenseId The ID of a lead source recurring expense
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteLeadSourceRecurringExpense(leadSourceId, leadSourceRecurringExpenseId) {
      return this.deleteLeadSourceRecurringExpenseWithHttpInfo(leadSourceId, leadSourceRecurringExpenseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Lead Source Recurring Expense
     * Retrieves a Lead Source Recurring Expense using leadSourceId and leadSourceRecurringExpenseId
     * @param {String} leadSourceId The ID of the lead source this recurring expense belongs to
     * @param {String} leadSourceRecurringExpenseId The ID of a lead source recurring expense
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/LeadSourceRecurringExpense} and HTTP response
     */
    getLeadSourceRecurringExpenseWithHttpInfo(leadSourceId, leadSourceRecurringExpenseId) {
      let postBody = null;
      // verify the required parameter 'leadSourceId' is set
      if (leadSourceId === undefined || leadSourceId === null) {
        throw new Error("Missing the required parameter 'leadSourceId' when calling getLeadSourceRecurringExpense");
      }
      // verify the required parameter 'leadSourceRecurringExpenseId' is set
      if (leadSourceRecurringExpenseId === undefined || leadSourceRecurringExpenseId === null) {
        throw new Error("Missing the required parameter 'leadSourceRecurringExpenseId' when calling getLeadSourceRecurringExpense");
      }

      let pathParams = {
        'lead_source_id': leadSourceId,
        'lead_source_recurring_expense_id': leadSourceRecurringExpenseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LeadSourceRecurringExpense;
      return this.apiClient.callApi(
        '/v2/leadSources/{lead_source_id}/recurringExpenses/{lead_source_recurring_expense_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Lead Source Recurring Expense
     * Retrieves a Lead Source Recurring Expense using leadSourceId and leadSourceRecurringExpenseId
     * @param {String} leadSourceId The ID of the lead source this recurring expense belongs to
     * @param {String} leadSourceRecurringExpenseId The ID of a lead source recurring expense
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/LeadSourceRecurringExpense}
     */
    getLeadSourceRecurringExpense(leadSourceId, leadSourceRecurringExpenseId) {
      return this.getLeadSourceRecurringExpenseWithHttpInfo(leadSourceId, leadSourceRecurringExpenseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves a list of expenses incurred from a recurring expense
     * Retrieves a list of expenses incurred from a recurring expense
     * @param {String} leadSourceId The ID of the lead source this recurring expense belongs to
     * @param {String} leadSourceRecurringExpenseId The ID of a lead source recurring expense
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are:  - (String) `title` - (Long) `amount` - (String) `incurred_time` - (String) `create_time` - (String) `update_time`  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples:  - `filter=amount%3D%3D2500` - `filter=incurred_time%3D%3D2024-12-22T01:00:00.000Z`
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields:  - `title` - `amount` - `incurred_time` - `create_time` - `update_time`  One of the following directions: - `asc` - `desc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListLeadSourceExpensesResponse} and HTTP response
     */
    listExpensesIncurredFromLeadSourceRecurringExpenseWithHttpInfo(leadSourceId, leadSourceRecurringExpenseId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'leadSourceId' is set
      if (leadSourceId === undefined || leadSourceId === null) {
        throw new Error("Missing the required parameter 'leadSourceId' when calling listExpensesIncurredFromLeadSourceRecurringExpense");
      }
      // verify the required parameter 'leadSourceRecurringExpenseId' is set
      if (leadSourceRecurringExpenseId === undefined || leadSourceRecurringExpenseId === null) {
        throw new Error("Missing the required parameter 'leadSourceRecurringExpenseId' when calling listExpensesIncurredFromLeadSourceRecurringExpense");
      }

      let pathParams = {
        'lead_source_id': leadSourceId,
        'lead_source_recurring_expense_id': leadSourceRecurringExpenseId
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLeadSourceExpensesResponse;
      return this.apiClient.callApi(
        '/v2/leadSources/{lead_source_id}/recurringExpenses/{lead_source_recurring_expense_id}/expenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves a list of expenses incurred from a recurring expense
     * Retrieves a list of expenses incurred from a recurring expense
     * @param {String} leadSourceId The ID of the lead source this recurring expense belongs to
     * @param {String} leadSourceRecurringExpenseId The ID of a lead source recurring expense
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are:  - (String) `title` - (Long) `amount` - (String) `incurred_time` - (String) `create_time` - (String) `update_time`  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples:  - `filter=amount%3D%3D2500` - `filter=incurred_time%3D%3D2024-12-22T01:00:00.000Z`
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields:  - `title` - `amount` - `incurred_time` - `create_time` - `update_time`  One of the following directions: - `asc` - `desc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListLeadSourceExpensesResponse}
     */
    listExpensesIncurredFromLeadSourceRecurringExpense(leadSourceId, leadSourceRecurringExpenseId, opts) {
      return this.listExpensesIncurredFromLeadSourceRecurringExpenseWithHttpInfo(leadSourceId, leadSourceRecurringExpenseId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves a list of lead source recurring expenses
     * Retrieves a list of recurring expenses with lead_source_id and optional 'filter' query param
     * @param {String} leadSourceId The ID of the lead source this recurring expense belongs to
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are:  - (String) `title` - (Long) `amount` - (String) `start_time` - (String) `end_time` - (String) `next_expense_time` - (String) `create_time` - (String) `update_time`  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples:  - `filter=amount%3D%3D2500` - `filter=next_expense_time%3D%3D2024-12-22T01:00:00.000Z`
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `title` - `amount` - `start_time` - `end_time` - `next_expense_time` - `create_time` - `update_time`  One of the following directions: - `asc` - `desc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListLeadSourceRecurringExpensesResponse} and HTTP response
     */
    listLeadSourceRecurringExpensesWithHttpInfo(leadSourceId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'leadSourceId' is set
      if (leadSourceId === undefined || leadSourceId === null) {
        throw new Error("Missing the required parameter 'leadSourceId' when calling listLeadSourceRecurringExpenses");
      }

      let pathParams = {
        'lead_source_id': leadSourceId
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLeadSourceRecurringExpensesResponse;
      return this.apiClient.callApi(
        '/v2/leadSources/{lead_source_id}/recurringExpenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves a list of lead source recurring expenses
     * Retrieves a list of recurring expenses with lead_source_id and optional 'filter' query param
     * @param {String} leadSourceId The ID of the lead source this recurring expense belongs to
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are:  - (String) `title` - (Long) `amount` - (String) `start_time` - (String) `end_time` - (String) `next_expense_time` - (String) `create_time` - (String) `update_time`  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples:  - `filter=amount%3D%3D2500` - `filter=next_expense_time%3D%3D2024-12-22T01:00:00.000Z`
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `title` - `amount` - `start_time` - `end_time` - `next_expense_time` - `create_time` - `update_time`  One of the following directions: - `asc` - `desc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListLeadSourceRecurringExpensesResponse}
     */
    listLeadSourceRecurringExpenses(leadSourceId, opts) {
      return this.listLeadSourceRecurringExpensesWithHttpInfo(leadSourceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Lead Source Recurring Expense
     * Updates a Lead Source Recurring Expense
     * @param {String} leadSourceId The ID of the lead source this recurring expense belongs to
     * @param {String} leadSourceRecurringExpenseId The ID of a lead source recurring expense
     * @param {module:keap.core.v2/model/LeadSourceRecurringExpenseUpdateRequest} leadSourceRecurringExpenseUpdateRequest The request object to update a lead source recurring expense
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/LeadSourceRecurringExpense} and HTTP response
     */
    updateLeadSourceRecurringExpenseWithHttpInfo(leadSourceId, leadSourceRecurringExpenseId, leadSourceRecurringExpenseUpdateRequest, opts) {
      opts = opts || {};
      let postBody = leadSourceRecurringExpenseUpdateRequest;
      // verify the required parameter 'leadSourceId' is set
      if (leadSourceId === undefined || leadSourceId === null) {
        throw new Error("Missing the required parameter 'leadSourceId' when calling updateLeadSourceRecurringExpense");
      }
      // verify the required parameter 'leadSourceRecurringExpenseId' is set
      if (leadSourceRecurringExpenseId === undefined || leadSourceRecurringExpenseId === null) {
        throw new Error("Missing the required parameter 'leadSourceRecurringExpenseId' when calling updateLeadSourceRecurringExpense");
      }
      // verify the required parameter 'leadSourceRecurringExpenseUpdateRequest' is set
      if (leadSourceRecurringExpenseUpdateRequest === undefined || leadSourceRecurringExpenseUpdateRequest === null) {
        throw new Error("Missing the required parameter 'leadSourceRecurringExpenseUpdateRequest' when calling updateLeadSourceRecurringExpense");
      }

      let pathParams = {
        'lead_source_id': leadSourceId,
        'lead_source_recurring_expense_id': leadSourceRecurringExpenseId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeadSourceRecurringExpense;
      return this.apiClient.callApi(
        '/v2/leadSources/{lead_source_id}/recurringExpenses/{lead_source_recurring_expense_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Lead Source Recurring Expense
     * Updates a Lead Source Recurring Expense
     * @param {String} leadSourceId The ID of the lead source this recurring expense belongs to
     * @param {String} leadSourceRecurringExpenseId The ID of a lead source recurring expense
     * @param {module:keap.core.v2/model/LeadSourceRecurringExpenseUpdateRequest} leadSourceRecurringExpenseUpdateRequest The request object to update a lead source recurring expense
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/LeadSourceRecurringExpense}
     */
    updateLeadSourceRecurringExpense(leadSourceId, leadSourceRecurringExpenseId, leadSourceRecurringExpenseUpdateRequest, opts) {
      return this.updateLeadSourceRecurringExpenseWithHttpInfo(leadSourceId, leadSourceRecurringExpenseId, leadSourceRecurringExpenseUpdateRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
