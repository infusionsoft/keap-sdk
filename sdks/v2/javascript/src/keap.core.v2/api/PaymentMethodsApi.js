/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.862454-hf-202509261459
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import ListPaymentMethodsResponse from '../model/ListPaymentMethodsResponse';

/**
* PaymentMethods service.
* @module keap.core.v2/api/PaymentMethodsApi
*/
export default class PaymentMethodsApi {

    /**
    * Constructs a new PaymentMethodsApi. 
    * @alias module:keap.core.v2/api/PaymentMethodsApi
    * @class
    * @param {module:keap.core.v2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:keap.core.v2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Deactivate a Payment Method
     * Deactivate the specified payment method
     * @param {String} contactId ID of the contact to which the payment method belongs.
     * @param {String} paymentMethodId ID of the payment method to be deactivated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deactivatePaymentMethodWithHttpInfo(contactId, paymentMethodId) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling deactivatePaymentMethod");
      }
      // verify the required parameter 'paymentMethodId' is set
      if (paymentMethodId === undefined || paymentMethodId === null) {
        throw new Error("Missing the required parameter 'paymentMethodId' when calling deactivatePaymentMethod");
      }

      let pathParams = {
        'contact_id': contactId,
        'payment_method_id': paymentMethodId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/contacts/{contact_id}/paymentMethods/{payment_method_id}:deactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deactivate a Payment Method
     * Deactivate the specified payment method
     * @param {String} contactId ID of the contact to which the payment method belongs.
     * @param {String} paymentMethodId ID of the payment method to be deactivated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deactivatePaymentMethod(contactId, paymentMethodId) {
      return this.deactivatePaymentMethodWithHttpInfo(contactId, paymentMethodId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Payment Method
     * Deletes the specified payment method
     * @param {String} contactId ID of the contact to which the payment method belongs.
     * @param {String} paymentMethodId ID of the payment method to be deleted.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deletePaymentMethodWithHttpInfo(contactId, paymentMethodId) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling deletePaymentMethod");
      }
      // verify the required parameter 'paymentMethodId' is set
      if (paymentMethodId === undefined || paymentMethodId === null) {
        throw new Error("Missing the required parameter 'paymentMethodId' when calling deletePaymentMethod");
      }

      let pathParams = {
        'contact_id': contactId,
        'payment_method_id': paymentMethodId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/contacts/{contact_id}/paymentMethods/{payment_method_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Payment Method
     * Deletes the specified payment method
     * @param {String} contactId ID of the contact to which the payment method belongs.
     * @param {String} paymentMethodId ID of the payment method to be deleted.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deletePaymentMethod(contactId, paymentMethodId) {
      return this.deletePaymentMethodWithHttpInfo(contactId, paymentMethodId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of Payment Methods
     * Retrieves a list of Payment Methods
     * @param {String} contactId ID of the contact to which the payment method belongs.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are: - (String) `merchant_account_id`  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. - `filter=merchant_account_id%3D%3D123`  You can filter across all contacts by using the `-` for the `contact_id` field. 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `date_created`  One of the following directions: - `desc` - `asc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListPaymentMethodsResponse} and HTTP response
     */
    listPaymentMethodsWithHttpInfo(contactId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling listPaymentMethods");
      }

      let pathParams = {
        'contact_id': contactId
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPaymentMethodsResponse;
      return this.apiClient.callApi(
        '/v2/contacts/{contact_id}/paymentMethods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of Payment Methods
     * Retrieves a list of Payment Methods
     * @param {String} contactId ID of the contact to which the payment method belongs.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are: - (String) `merchant_account_id`  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. - `filter=merchant_account_id%3D%3D123`  You can filter across all contacts by using the `-` for the `contact_id` field. 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `date_created`  One of the following directions: - `desc` - `asc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListPaymentMethodsResponse}
     */
    listPaymentMethods(contactId, opts) {
      return this.listPaymentMethodsWithHttpInfo(contactId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
