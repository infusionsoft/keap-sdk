/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.844065-hf-202508141354
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateEmailSentRequest from '../model/CreateEmailSentRequest';
import CreateEmailsSentRequest from '../model/CreateEmailsSentRequest';
import DeleteEmailsRequest from '../model/DeleteEmailsRequest';
import DeleteEmailsResponse from '../model/DeleteEmailsResponse';
import EmailSendRequest from '../model/EmailSendRequest';
import EmailSendTemplateRequest from '../model/EmailSendTemplateRequest';
import EmailSentWithContent from '../model/EmailSentWithContent';
import EmailTemplate from '../model/EmailTemplate';
import EmailsSentList from '../model/EmailsSentList';
import Error from '../model/Error';

/**
* Email service.
* @module keap.core.v2/api/EmailApi
*/
export default class EmailApi {

    /**
    * Constructs a new EmailApi. 
    * @alias module:keap.core.v2/api/EmailApi
    * @class
    * @param {module:keap.core.v2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:keap.core.v2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create an Email Record
     * Creates a Record of an Email sent to a Contact
     * @param {module:keap.core.v2/model/CreateEmailSentRequest} createEmailSentRequest emailWithContent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/EmailSentWithContent} and HTTP response
     */
    createEmailWithHttpInfo(createEmailSentRequest) {
      let postBody = createEmailSentRequest;
      // verify the required parameter 'createEmailSentRequest' is set
      if (createEmailSentRequest === undefined || createEmailSentRequest === null) {
        throw new Error("Missing the required parameter 'createEmailSentRequest' when calling createEmail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailSentWithContent;
      return this.apiClient.callApi(
        '/v2/emails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an Email Record
     * Creates a Record of an Email sent to a Contact
     * @param {module:keap.core.v2/model/CreateEmailSentRequest} createEmailSentRequest emailWithContent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/EmailSentWithContent}
     */
    createEmail(createEmailSentRequest) {
      return this.createEmailWithHttpInfo(createEmailSentRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a set of Email Records
     * Creates a set of Records of Emails sent to Contacts, maximum 1000 per transaction.
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/CreateEmailsSentRequest} [createEmailsSentRequest] Email records to persist, with content.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/EmailsSentList} and HTTP response
     */
    createEmailsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createEmailsSentRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailsSentList;
      return this.apiClient.callApi(
        '/v2/emails:batchAdd', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a set of Email Records
     * Creates a set of Records of Emails sent to Contacts, maximum 1000 per transaction.
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/CreateEmailsSentRequest} opts.createEmailsSentRequest Email records to persist, with content.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/EmailsSentList}
     */
    createEmails(opts) {
      return this.createEmailsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an Email Record
     * Deletes a specific Email Record
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteEmailWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteEmail");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/emails/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an Email Record
     * Deletes a specific Email Record
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteEmail(id) {
      return this.deleteEmailWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a set of Email Records
     * Removes a set of Email Records
     * @param {module:keap.core.v2/model/DeleteEmailsRequest} deleteEmailsRequest deleteEmailsRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/DeleteEmailsResponse} and HTTP response
     */
    deleteEmailsWithHttpInfo(deleteEmailsRequest) {
      let postBody = deleteEmailsRequest;
      // verify the required parameter 'deleteEmailsRequest' is set
      if (deleteEmailsRequest === undefined || deleteEmailsRequest === null) {
        throw new Error("Missing the required parameter 'deleteEmailsRequest' when calling deleteEmails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteEmailsResponse;
      return this.apiClient.callApi(
        '/v2/emails:batchRemove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a set of Email Records
     * Removes a set of Email Records
     * @param {module:keap.core.v2/model/DeleteEmailsRequest} deleteEmailsRequest deleteEmailsRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/DeleteEmailsResponse}
     */
    deleteEmails(deleteEmailsRequest) {
      return this.deleteEmailsWithHttpInfo(deleteEmailsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an Email
     * Retrieves a single Email that has been sent
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/EmailSentWithContent} and HTTP response
     */
    getEmailWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEmail");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailSentWithContent;
      return this.apiClient.callApi(
        '/v2/emails/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an Email
     * Retrieves a single Email that has been sent
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/EmailSentWithContent}
     */
    getEmail(id) {
      return this.getEmailWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an email template
     * Retrieve an email template
     * @param {String} emailTemplateId email_template_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/EmailTemplate} and HTTP response
     */
    getEmailTemplateWithHttpInfo(emailTemplateId) {
      let postBody = null;
      // verify the required parameter 'emailTemplateId' is set
      if (emailTemplateId === undefined || emailTemplateId === null) {
        throw new Error("Missing the required parameter 'emailTemplateId' when calling getEmailTemplate");
      }

      let pathParams = {
        'email_template_id': emailTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailTemplate;
      return this.apiClient.callApi(
        '/v2/emails/templates/{email_template_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an email template
     * Retrieve an email template
     * @param {String} emailTemplateId email_template_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/EmailTemplate}
     */
    getEmailTemplate(emailTemplateId) {
      return this.getEmailTemplateWithHttpInfo(emailTemplateId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send an Email
     * Sends an Email to a list of Contacts
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/EmailSendRequest} [emailSendRequest] emailSendRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    sendEmailWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['emailSendRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/emails:send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send an Email
     * Sends an Email to a list of Contacts
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/EmailSendRequest} opts.emailSendRequest emailSendRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    sendEmail(opts) {
      return this.sendEmailWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send an email based on a template
     * Send an email based on a template
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/EmailSendTemplateRequest} [emailSendTemplateRequest] Use a template to send an email to a list of contacts 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    sendEmailTemplateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['emailSendTemplateRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/emails/templates:send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send an email based on a template
     * Send an email based on a template
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/EmailSendTemplateRequest} opts.emailSendTemplateRequest Use a template to send an email to a list of contacts 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    sendEmailTemplate(opts) {
      return this.sendEmailTemplateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
