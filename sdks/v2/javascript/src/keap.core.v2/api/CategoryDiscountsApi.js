/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.836642-hf-202507280853
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CategoryDiscount from '../model/CategoryDiscount';
import CreateCategoryDiscountRequest from '../model/CreateCategoryDiscountRequest';
import Error from '../model/Error';
import ListCategoryDiscountsResponse from '../model/ListCategoryDiscountsResponse';
import UpdateCategoryDiscountRequest from '../model/UpdateCategoryDiscountRequest';

/**
* CategoryDiscounts service.
* @module keap.core.v2/api/CategoryDiscountsApi
*/
export default class CategoryDiscountsApi {

    /**
    * Constructs a new CategoryDiscountsApi. 
    * @alias module:keap.core.v2/api/CategoryDiscountsApi
    * @class
    * @param {module:keap.core.v2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:keap.core.v2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a Category Discount
     * Creates a Category Discount
     * @param {module:keap.core.v2/model/CreateCategoryDiscountRequest} createCategoryDiscountRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/CategoryDiscount} and HTTP response
     */
    createCategoryDiscountWithHttpInfo(createCategoryDiscountRequest) {
      let postBody = createCategoryDiscountRequest;
      // verify the required parameter 'createCategoryDiscountRequest' is set
      if (createCategoryDiscountRequest === undefined || createCategoryDiscountRequest === null) {
        throw new Error("Missing the required parameter 'createCategoryDiscountRequest' when calling createCategoryDiscount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoryDiscount;
      return this.apiClient.callApi(
        '/v2/discounts/productCategories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Category Discount
     * Creates a Category Discount
     * @param {module:keap.core.v2/model/CreateCategoryDiscountRequest} createCategoryDiscountRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/CategoryDiscount}
     */
    createCategoryDiscount(createCategoryDiscountRequest) {
      return this.createCategoryDiscountWithHttpInfo(createCategoryDiscountRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Category Discount
     * Deletes a specified Category Discount
     * @param {String} discountId discount_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCategoryDiscountWithHttpInfo(discountId) {
      let postBody = null;
      // verify the required parameter 'discountId' is set
      if (discountId === undefined || discountId === null) {
        throw new Error("Missing the required parameter 'discountId' when calling deleteCategoryDiscount");
      }

      let pathParams = {
        'discount_id': discountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/discounts/productCategories/{discount_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Category Discount
     * Deletes a specified Category Discount
     * @param {String} discountId discount_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCategoryDiscount(discountId) {
      return this.deleteCategoryDiscountWithHttpInfo(discountId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Category Discount
     * Retrieves a single Category Discount
     * @param {String} discountId discount_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/CategoryDiscount} and HTTP response
     */
    getCategoryDiscountWithHttpInfo(discountId) {
      let postBody = null;
      // verify the required parameter 'discountId' is set
      if (discountId === undefined || discountId === null) {
        throw new Error("Missing the required parameter 'discountId' when calling getCategoryDiscount");
      }

      let pathParams = {
        'discount_id': discountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CategoryDiscount;
      return this.apiClient.callApi(
        '/v2/discounts/productCategories/{discount_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Category Discount
     * Retrieves a single Category Discount
     * @param {String} discountId discount_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/CategoryDiscount}
     */
    getCategoryDiscount(discountId) {
      return this.getCategoryDiscountWithHttpInfo(discountId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Category Discounts
     * Retrieves a list of Category Discounts
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, the allowed field is: - (String) `product_category_id`  You will need to apply the `==` operator to check the equality of the filter with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=product_category_id%3D%3D4` 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `id` - `name`  One of the following directions: - `asc` - `desc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListCategoryDiscountsResponse} and HTTP response
     */
    listCategoryDiscountsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCategoryDiscountsResponse;
      return this.apiClient.callApi(
        '/v2/discounts/productCategories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Category Discounts
     * Retrieves a list of Category Discounts
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, the allowed field is: - (String) `product_category_id`  You will need to apply the `==` operator to check the equality of the filter with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=product_category_id%3D%3D4` 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `id` - `name`  One of the following directions: - `asc` - `desc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListCategoryDiscountsResponse}
     */
    listCategoryDiscounts(opts) {
      return this.listCategoryDiscountsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Category Discount
     * Updates a Category Discount
     * @param {String} discountId discount_id
     * @param {module:keap.core.v2/model/UpdateCategoryDiscountRequest} updateCategoryDiscountRequest request
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/CategoryDiscount} and HTTP response
     */
    updateCategoryDiscountWithHttpInfo(discountId, updateCategoryDiscountRequest, opts) {
      opts = opts || {};
      let postBody = updateCategoryDiscountRequest;
      // verify the required parameter 'discountId' is set
      if (discountId === undefined || discountId === null) {
        throw new Error("Missing the required parameter 'discountId' when calling updateCategoryDiscount");
      }
      // verify the required parameter 'updateCategoryDiscountRequest' is set
      if (updateCategoryDiscountRequest === undefined || updateCategoryDiscountRequest === null) {
        throw new Error("Missing the required parameter 'updateCategoryDiscountRequest' when calling updateCategoryDiscount");
      }

      let pathParams = {
        'discount_id': discountId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoryDiscount;
      return this.apiClient.callApi(
        '/v2/discounts/productCategories/{discount_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Category Discount
     * Updates a Category Discount
     * @param {String} discountId discount_id
     * @param {module:keap.core.v2/model/UpdateCategoryDiscountRequest} updateCategoryDiscountRequest request
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/CategoryDiscount}
     */
    updateCategoryDiscount(discountId, updateCategoryDiscountRequest, opts) {
      return this.updateCategoryDiscountWithHttpInfo(discountId, updateCategoryDiscountRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
