/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.852640
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancelSubscriptionRequest from '../model/CancelSubscriptionRequest';
import CreateCustomFieldRequest from '../model/CreateCustomFieldRequest';
import CreateSubscriptionRequest from '../model/CreateSubscriptionRequest';
import CustomFieldMetaData from '../model/CustomFieldMetaData';
import Error from '../model/Error';
import ObjectModel from '../model/ObjectModel';
import Subscription from '../model/Subscription';
import UpdateCustomFieldMetaDataRequest from '../model/UpdateCustomFieldMetaDataRequest';

/**
* Subscriptions service.
* @module keap.core.v2/api/SubscriptionsApi
*/
export default class SubscriptionsApi {

    /**
    * Constructs a new SubscriptionsApi. 
    * @alias module:keap.core.v2/api/SubscriptionsApi
    * @class
    * @param {module:keap.core.v2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:keap.core.v2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cancel Subscription
     * Cancels the specified subscription
     * @param {String} subscriptionId subscription_id
     * @param {module:keap.core.v2/model/CancelSubscriptionRequest} cancelSubscriptionRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    cancelSubscriptionWithHttpInfo(subscriptionId, cancelSubscriptionRequest) {
      let postBody = cancelSubscriptionRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling cancelSubscription");
      }
      // verify the required parameter 'cancelSubscriptionRequest' is set
      if (cancelSubscriptionRequest === undefined || cancelSubscriptionRequest === null) {
        throw new Error("Missing the required parameter 'cancelSubscriptionRequest' when calling cancelSubscription");
      }

      let pathParams = {
        'subscription_id': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/subscriptions/{subscription_id}:deactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel Subscription
     * Cancels the specified subscription
     * @param {String} subscriptionId subscription_id
     * @param {module:keap.core.v2/model/CancelSubscriptionRequest} cancelSubscriptionRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    cancelSubscription(subscriptionId, cancelSubscriptionRequest) {
      return this.cancelSubscriptionWithHttpInfo(subscriptionId, cancelSubscriptionRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Subscription
     * Creates a subscription with the specified product and product subscription id.
     * @param {module:keap.core.v2/model/CreateSubscriptionRequest} createSubscriptionRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/Subscription} and HTTP response
     */
    createSubscriptionWithHttpInfo(createSubscriptionRequest) {
      let postBody = createSubscriptionRequest;
      // verify the required parameter 'createSubscriptionRequest' is set
      if (createSubscriptionRequest === undefined || createSubscriptionRequest === null) {
        throw new Error("Missing the required parameter 'createSubscriptionRequest' when calling createSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/v2/subscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Subscription
     * Creates a subscription with the specified product and product subscription id.
     * @param {module:keap.core.v2/model/CreateSubscriptionRequest} createSubscriptionRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/Subscription}
     */
    createSubscription(createSubscriptionRequest) {
      return this.createSubscriptionWithHttpInfo(createSubscriptionRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Subscription Custom Field
     * Creates a custom field of the specified type and options to the Subscription object
     * @param {module:keap.core.v2/model/CreateCustomFieldRequest} createCustomFieldRequest customField
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/CustomFieldMetaData} and HTTP response
     */
    createSubscriptionCustomFieldWithHttpInfo(createCustomFieldRequest) {
      let postBody = createCustomFieldRequest;
      // verify the required parameter 'createCustomFieldRequest' is set
      if (createCustomFieldRequest === undefined || createCustomFieldRequest === null) {
        throw new Error("Missing the required parameter 'createCustomFieldRequest' when calling createSubscriptionCustomField");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomFieldMetaData;
      return this.apiClient.callApi(
        '/v2/subscriptions/model/customFields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Subscription Custom Field
     * Creates a custom field of the specified type and options to the Subscription object
     * @param {module:keap.core.v2/model/CreateCustomFieldRequest} createCustomFieldRequest customField
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/CustomFieldMetaData}
     */
    createSubscriptionCustomField(createCustomFieldRequest) {
      return this.createSubscriptionCustomFieldWithHttpInfo(createCustomFieldRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Subscription Custom Field
     * Deletes a custom field from the Subscription object
     * @param {String} customFieldId custom_field_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSubscriptionCustomFieldWithHttpInfo(customFieldId) {
      let postBody = null;
      // verify the required parameter 'customFieldId' is set
      if (customFieldId === undefined || customFieldId === null) {
        throw new Error("Missing the required parameter 'customFieldId' when calling deleteSubscriptionCustomField");
      }

      let pathParams = {
        'custom_field_id': customFieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/subscriptions/model/customFields/{custom_field_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Subscription Custom Field
     * Deletes a custom field from the Subscription object
     * @param {String} customFieldId custom_field_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSubscriptionCustomField(customFieldId) {
      return this.deleteSubscriptionCustomFieldWithHttpInfo(customFieldId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Subscription Custom Field Model
     * Get the custom fields for the Subscription object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ObjectModel} and HTTP response
     */
    retrieveSubscriptionCustomFieldModelWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ObjectModel;
      return this.apiClient.callApi(
        '/v2/subscriptions/model', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Subscription Custom Field Model
     * Get the custom fields for the Subscription object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ObjectModel}
     */
    retrieveSubscriptionCustomFieldModel() {
      return this.retrieveSubscriptionCustomFieldModelWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Subscription Custom Field
     * Updates a custom field of the specified type and options to the Subscription object
     * @param {String} customFieldId custom_field_id
     * @param {module:keap.core.v2/model/UpdateCustomFieldMetaDataRequest} updateCustomFieldMetaDataRequest request
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/CustomFieldMetaData} and HTTP response
     */
    updateSubscriptionCustomFieldWithHttpInfo(customFieldId, updateCustomFieldMetaDataRequest, opts) {
      opts = opts || {};
      let postBody = updateCustomFieldMetaDataRequest;
      // verify the required parameter 'customFieldId' is set
      if (customFieldId === undefined || customFieldId === null) {
        throw new Error("Missing the required parameter 'customFieldId' when calling updateSubscriptionCustomField");
      }
      // verify the required parameter 'updateCustomFieldMetaDataRequest' is set
      if (updateCustomFieldMetaDataRequest === undefined || updateCustomFieldMetaDataRequest === null) {
        throw new Error("Missing the required parameter 'updateCustomFieldMetaDataRequest' when calling updateSubscriptionCustomField");
      }

      let pathParams = {
        'custom_field_id': customFieldId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomFieldMetaData;
      return this.apiClient.callApi(
        '/v2/subscriptions/model/customFields/{custom_field_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Subscription Custom Field
     * Updates a custom field of the specified type and options to the Subscription object
     * @param {String} customFieldId custom_field_id
     * @param {module:keap.core.v2/model/UpdateCustomFieldMetaDataRequest} updateCustomFieldMetaDataRequest request
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/CustomFieldMetaData}
     */
    updateSubscriptionCustomField(customFieldId, updateCustomFieldMetaDataRequest, opts) {
      return this.updateSubscriptionCustomFieldWithHttpInfo(customFieldId, updateCustomFieldMetaDataRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
