/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.843039-hf-202508121547
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateLeadSourceRequest from '../model/CreateLeadSourceRequest';
import Error from '../model/Error';
import LeadSource from '../model/LeadSource';
import ListLeadSourcesResponse from '../model/ListLeadSourcesResponse';

/**
* LeadSources service.
* @module keap.core.v2/api/LeadSourcesApi
*/
export default class LeadSourcesApi {

    /**
    * Constructs a new LeadSourcesApi. 
    * @alias module:keap.core.v2/api/LeadSourcesApi
    * @class
    * @param {module:keap.core.v2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:keap.core.v2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a Lead Source
     * Creates a new Lead Source
     * @param {module:keap.core.v2/model/CreateLeadSourceRequest} createLeadSourceRequest The request object to create a new lead source
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/LeadSource} and HTTP response
     */
    createLeadSourceWithHttpInfo(createLeadSourceRequest) {
      let postBody = createLeadSourceRequest;
      // verify the required parameter 'createLeadSourceRequest' is set
      if (createLeadSourceRequest === undefined || createLeadSourceRequest === null) {
        throw new Error("Missing the required parameter 'createLeadSourceRequest' when calling createLeadSource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeadSource;
      return this.apiClient.callApi(
        '/v2/leadSources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Lead Source
     * Creates a new Lead Source
     * @param {module:keap.core.v2/model/CreateLeadSourceRequest} createLeadSourceRequest The request object to create a new lead source
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/LeadSource}
     */
    createLeadSource(createLeadSourceRequest) {
      return this.createLeadSourceWithHttpInfo(createLeadSourceRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Lead Source
     * Deletes a Lead Source by ID
     * @param {String} leadSourceId The ID of a lead source
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteLeadSourceWithHttpInfo(leadSourceId) {
      let postBody = null;
      // verify the required parameter 'leadSourceId' is set
      if (leadSourceId === undefined || leadSourceId === null) {
        throw new Error("Missing the required parameter 'leadSourceId' when calling deleteLeadSource");
      }

      let pathParams = {
        'lead_source_id': leadSourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/leadSources/{lead_source_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Lead Source
     * Deletes a Lead Source by ID
     * @param {String} leadSourceId The ID of a lead source
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteLeadSource(leadSourceId) {
      return this.deleteLeadSourceWithHttpInfo(leadSourceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Lead Source
     * Retrieves a Lead Source by ID
     * @param {String} leadSourceId The ID of a lead source
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/LeadSource} and HTTP response
     */
    getLeadSourceWithHttpInfo(leadSourceId) {
      let postBody = null;
      // verify the required parameter 'leadSourceId' is set
      if (leadSourceId === undefined || leadSourceId === null) {
        throw new Error("Missing the required parameter 'leadSourceId' when calling getLeadSource");
      }

      let pathParams = {
        'lead_source_id': leadSourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LeadSource;
      return this.apiClient.callApi(
        '/v2/leadSources/{lead_source_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Lead Source
     * Retrieves a Lead Source by ID
     * @param {String} leadSourceId The ID of a lead source
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/LeadSource}
     */
    getLeadSource(leadSourceId) {
      return this.getLeadSourceWithHttpInfo(leadSourceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Lead Sources
     * Retrieves a list of Lead Sources
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are:  - (String) `name` - (String) `status` - (String) `lead_source_category_id` - (String) `vendor` - (String) `medium` - (String) `start_time` - (String) `end_time`  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples:  - `filter=name%3D%3Dexample` - `filter=start_time%3D%3D2024-12-22T01:00:00.000Z`
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields:  - `name` - `status` - `vendor` - `medium` - `start_time` - `end_time` - `create_time` - `update_time`  One of the following directions:  - `asc` - `desc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListLeadSourcesResponse} and HTTP response
     */
    listLeadSourcesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLeadSourcesResponse;
      return this.apiClient.callApi(
        '/v2/leadSources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Lead Sources
     * Retrieves a list of Lead Sources
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are:  - (String) `name` - (String) `status` - (String) `lead_source_category_id` - (String) `vendor` - (String) `medium` - (String) `start_time` - (String) `end_time`  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples:  - `filter=name%3D%3Dexample` - `filter=start_time%3D%3D2024-12-22T01:00:00.000Z`
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields:  - `name` - `status` - `vendor` - `medium` - `start_time` - `end_time` - `create_time` - `update_time`  One of the following directions:  - `asc` - `desc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListLeadSourcesResponse}
     */
    listLeadSources(opts) {
      return this.listLeadSourcesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Lead Source
     * Updates a Lead Source with only the values provided in the request
     * @param {String} leadSourceId The ID of a lead source
     * @param {module:keap.core.v2/model/CreateLeadSourceRequest} createLeadSourceRequest The request object to update a lead source
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/LeadSource} and HTTP response
     */
    updateLeadSourceWithHttpInfo(leadSourceId, createLeadSourceRequest, opts) {
      opts = opts || {};
      let postBody = createLeadSourceRequest;
      // verify the required parameter 'leadSourceId' is set
      if (leadSourceId === undefined || leadSourceId === null) {
        throw new Error("Missing the required parameter 'leadSourceId' when calling updateLeadSource");
      }
      // verify the required parameter 'createLeadSourceRequest' is set
      if (createLeadSourceRequest === undefined || createLeadSourceRequest === null) {
        throw new Error("Missing the required parameter 'createLeadSourceRequest' when calling updateLeadSource");
      }

      let pathParams = {
        'lead_source_id': leadSourceId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeadSource;
      return this.apiClient.callApi(
        '/v2/leadSources/{lead_source_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Lead Source
     * Updates a Lead Source with only the values provided in the request
     * @param {String} leadSourceId The ID of a lead source
     * @param {module:keap.core.v2/model/CreateLeadSourceRequest} createLeadSourceRequest The request object to update a lead source
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/LeadSource}
     */
    updateLeadSource(leadSourceId, createLeadSourceRequest, opts) {
      return this.updateLeadSourceWithHttpInfo(leadSourceId, createLeadSourceRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
