/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.869301
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateCustomFieldRequest from '../model/CreateCustomFieldRequest';
import CreateNoteRequest from '../model/CreateNoteRequest';
import CustomFieldMetaData from '../model/CustomFieldMetaData';
import Error from '../model/Error';
import GetNoteResponse from '../model/GetNoteResponse';
import ListNoteTemplateResponse from '../model/ListNoteTemplateResponse';
import ListNotesResponse from '../model/ListNotesResponse';
import Note from '../model/Note';
import ObjectModel from '../model/ObjectModel';
import UpdateCustomFieldMetaDataRequest from '../model/UpdateCustomFieldMetaDataRequest';
import UpdateNoteRequest from '../model/UpdateNoteRequest';
import UpdateNoteResponse from '../model/UpdateNoteResponse';

/**
* Note service.
* @module keap.core.v2/api/NoteApi
*/
export default class NoteApi {

    /**
    * Constructs a new NoteApi. 
    * @alias module:keap.core.v2/api/NoteApi
    * @class
    * @param {module:keap.core.v2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:keap.core.v2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a Note
     * Creates a new Note.
     * @param {String} contactId contact_id
     * @param {module:keap.core.v2/model/CreateNoteRequest} createNoteRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/Note} and HTTP response
     */
    createNoteWithHttpInfo(contactId, createNoteRequest) {
      let postBody = createNoteRequest;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling createNote");
      }
      // verify the required parameter 'createNoteRequest' is set
      if (createNoteRequest === undefined || createNoteRequest === null) {
        throw new Error("Missing the required parameter 'createNoteRequest' when calling createNote");
      }

      let pathParams = {
        'contact_id': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/v2/contacts/{contact_id}/notes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Note
     * Creates a new Note.
     * @param {String} contactId contact_id
     * @param {module:keap.core.v2/model/CreateNoteRequest} createNoteRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/Note}
     */
    createNote(contactId, createNoteRequest) {
      return this.createNoteWithHttpInfo(contactId, createNoteRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Custom Field
     * Creates a custom field of the specified type and options to the Note object<br/>Note: Custom Fields for Tasks, Classic Appointments and Notes are combined.
     * @param {module:keap.core.v2/model/CreateCustomFieldRequest} createCustomFieldRequest customField
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/CustomFieldMetaData} and HTTP response
     */
    createNoteCustomFieldWithHttpInfo(createCustomFieldRequest) {
      let postBody = createCustomFieldRequest;
      // verify the required parameter 'createCustomFieldRequest' is set
      if (createCustomFieldRequest === undefined || createCustomFieldRequest === null) {
        throw new Error("Missing the required parameter 'createCustomFieldRequest' when calling createNoteCustomField");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomFieldMetaData;
      return this.apiClient.callApi(
        '/v2/notes/model/customFields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Custom Field
     * Creates a custom field of the specified type and options to the Note object<br/>Note: Custom Fields for Tasks, Classic Appointments and Notes are combined.
     * @param {module:keap.core.v2/model/CreateCustomFieldRequest} createCustomFieldRequest customField
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/CustomFieldMetaData}
     */
    createNoteCustomField(createCustomFieldRequest) {
      return this.createNoteCustomFieldWithHttpInfo(createCustomFieldRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Note
     * Deletes the specified Note
     * @param {String} contactId contact_id
     * @param {String} noteId note_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteNoteWithHttpInfo(contactId, noteId) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling deleteNote");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling deleteNote");
      }

      let pathParams = {
        'contact_id': contactId,
        'note_id': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/contacts/{contact_id}/notes/{note_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Note
     * Deletes the specified Note
     * @param {String} contactId contact_id
     * @param {String} noteId note_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteNote(contactId, noteId) {
      return this.deleteNoteWithHttpInfo(contactId, noteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Note
     * Retrieves the specified Note
     * @param {String} contactId contact_id
     * @param {String} noteId note_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/GetNoteResponse} and HTTP response
     */
    getNoteWithHttpInfo(contactId, noteId) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling getNote");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling getNote");
      }

      let pathParams = {
        'contact_id': contactId,
        'note_id': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNoteResponse;
      return this.apiClient.callApi(
        '/v2/contacts/{contact_id}/notes/{note_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Note
     * Retrieves the specified Note
     * @param {String} contactId contact_id
     * @param {String} noteId note_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/GetNoteResponse}
     */
    getNote(contactId, noteId) {
      return this.getNoteWithHttpInfo(contactId, noteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Note Templates
     * Retrieves a list of Note Templates
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Search filter to apply to results
     * @param {String} [orderBy] Attribute and direction to order items by. E.g. `given_name desc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListNoteTemplateResponse} and HTTP response
     */
    listNoteTemplatesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListNoteTemplateResponse;
      return this.apiClient.callApi(
        '/v2/notes/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Note Templates
     * Retrieves a list of Note Templates
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Search filter to apply to results
     * @param {String} opts.orderBy Attribute and direction to order items by. E.g. `given_name desc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListNoteTemplateResponse}
     */
    listNoteTemplates(opts) {
      return this.listNoteTemplatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Notes
     * Retrieves a list of Notes
     * @param {String} contactId contact_id
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are: - (String) `assigned_to_user_id` - (String) `title` - (String) `since_time` - (String) `until_time` You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=assigned_to_user_id%3D%3DUserId` - `filter=title%3D%3DexpectedTitle` - `filter=since_time%3D%3D2025-04-16T20:33:02.321Z;` - `filter=until_time%3D%3D2025-08-16T20:33:02.321Z;` 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `id` - `create_time`  One of the following directions: - `asc` - `desc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListNotesResponse} and HTTP response
     */
    listNotesWithHttpInfo(contactId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling listNotes");
      }

      let pathParams = {
        'contact_id': contactId
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListNotesResponse;
      return this.apiClient.callApi(
        '/v2/contacts/{contact_id}/notes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Notes
     * Retrieves a list of Notes
     * @param {String} contactId contact_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are: - (String) `assigned_to_user_id` - (String) `title` - (String) `since_time` - (String) `until_time` You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=assigned_to_user_id%3D%3DUserId` - `filter=title%3D%3DexpectedTitle` - `filter=since_time%3D%3D2025-04-16T20:33:02.321Z;` - `filter=until_time%3D%3D2025-08-16T20:33:02.321Z;` 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `id` - `create_time`  One of the following directions: - `asc` - `desc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListNotesResponse}
     */
    listNotes(contactId, opts) {
      return this.listNotesWithHttpInfo(contactId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Note Model
     * Gets the custom fields for the Note object<br/>Note: Custom Fields for Tasks, Classic Appointments and Notes are combined.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ObjectModel} and HTTP response
     */
    retrieveNoteModelWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ObjectModel;
      return this.apiClient.callApi(
        '/v2/notes/model', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Note Model
     * Gets the custom fields for the Note object<br/>Note: Custom Fields for Tasks, Classic Appointments and Notes are combined.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ObjectModel}
     */
    retrieveNoteModel() {
      return this.retrieveNoteModelWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Note
     * Updates a Note for a Contact
     * @param {String} contactId contact_id
     * @param {String} noteId note_id
     * @param {module:keap.core.v2/model/UpdateNoteRequest} updateNoteRequest updateNoteRequest
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/UpdateNoteResponse} and HTTP response
     */
    updateNoteWithHttpInfo(contactId, noteId, updateNoteRequest, opts) {
      opts = opts || {};
      let postBody = updateNoteRequest;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling updateNote");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling updateNote");
      }
      // verify the required parameter 'updateNoteRequest' is set
      if (updateNoteRequest === undefined || updateNoteRequest === null) {
        throw new Error("Missing the required parameter 'updateNoteRequest' when calling updateNote");
      }

      let pathParams = {
        'contact_id': contactId,
        'note_id': noteId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateNoteResponse;
      return this.apiClient.callApi(
        '/v2/contacts/{contact_id}/notes/{note_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Note
     * Updates a Note for a Contact
     * @param {String} contactId contact_id
     * @param {String} noteId note_id
     * @param {module:keap.core.v2/model/UpdateNoteRequest} updateNoteRequest updateNoteRequest
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/UpdateNoteResponse}
     */
    updateNote(contactId, noteId, updateNoteRequest, opts) {
      return this.updateNoteWithHttpInfo(contactId, noteId, updateNoteRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Custom Field
     * Updates a custom field of the specified type and options to the Note object<br/>Note: Custom Fields for Tasks, Classic Appointments and Notes are combined.
     * @param {String} customFieldId custom_field_id
     * @param {module:keap.core.v2/model/UpdateCustomFieldMetaDataRequest} updateCustomFieldMetaDataRequest request
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/CustomFieldMetaData} and HTTP response
     */
    updateNotesCustomFieldWithHttpInfo(customFieldId, updateCustomFieldMetaDataRequest, opts) {
      opts = opts || {};
      let postBody = updateCustomFieldMetaDataRequest;
      // verify the required parameter 'customFieldId' is set
      if (customFieldId === undefined || customFieldId === null) {
        throw new Error("Missing the required parameter 'customFieldId' when calling updateNotesCustomField");
      }
      // verify the required parameter 'updateCustomFieldMetaDataRequest' is set
      if (updateCustomFieldMetaDataRequest === undefined || updateCustomFieldMetaDataRequest === null) {
        throw new Error("Missing the required parameter 'updateCustomFieldMetaDataRequest' when calling updateNotesCustomField");
      }

      let pathParams = {
        'custom_field_id': customFieldId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomFieldMetaData;
      return this.apiClient.callApi(
        '/v2/notes/model/customFields/{custom_field_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Custom Field
     * Updates a custom field of the specified type and options to the Note object<br/>Note: Custom Fields for Tasks, Classic Appointments and Notes are combined.
     * @param {String} customFieldId custom_field_id
     * @param {module:keap.core.v2/model/UpdateCustomFieldMetaDataRequest} updateCustomFieldMetaDataRequest request
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/CustomFieldMetaData}
     */
    updateNotesCustomField(customFieldId, updateCustomFieldMetaDataRequest, opts) {
      return this.updateNotesCustomFieldWithHttpInfo(customFieldId, updateCustomFieldMetaDataRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
