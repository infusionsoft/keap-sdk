/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.844359
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import FileMetadata from '../model/FileMetadata';
import ListFilesResponse from '../model/ListFilesResponse';

/**
* Files service.
* @module keap.core.v2/api/FilesApi
*/
export default class FilesApi {

    /**
    * Constructs a new FilesApi. 
    * @alias module:keap.core.v2/api/FilesApi
    * @class
    * @param {module:keap.core.v2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:keap.core.v2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a file
     * Creates a file and uploads it
     * @param {String} file File to upload. This is a file sent as multi-part (not a string)
     * @param {module:keap.core.v2/model/String} fileAssociation File association
     * @param {String} fileName File name
     * @param {Boolean} isPublic Is public
     * @param {Object} opts Optional parameters
     * @param {String} [contactId] Contact ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/FileMetadata} and HTTP response
     */
    createFileWithHttpInfo(file, fileAssociation, fileName, isPublic, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createFile");
      }
      // verify the required parameter 'fileAssociation' is set
      if (fileAssociation === undefined || fileAssociation === null) {
        throw new Error("Missing the required parameter 'fileAssociation' when calling createFile");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling createFile");
      }
      // verify the required parameter 'isPublic' is set
      if (isPublic === undefined || isPublic === null) {
        throw new Error("Missing the required parameter 'isPublic' when calling createFile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'contact_id': opts['contactId'],
        'file': file,
        'file_association': fileAssociation,
        'file_name': fileName,
        'is_public': isPublic
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FileMetadata;
      return this.apiClient.callApi(
        '/v2/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a file
     * Creates a file and uploads it
     * @param {String} file File to upload. This is a file sent as multi-part (not a string)
     * @param {module:keap.core.v2/model/String} fileAssociation File association
     * @param {String} fileName File name
     * @param {Boolean} isPublic Is public
     * @param {Object} opts Optional parameters
     * @param {String} opts.contactId Contact ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/FileMetadata}
     */
    createFile(file, fileAssociation, fileName, isPublic, opts) {
      return this.createFileWithHttpInfo(file, fileAssociation, fileName, isPublic, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a file
     * Deletes a specified file
     * @param {String} fileId file_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteFileWithHttpInfo(fileId) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteFile");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/files/{file_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a file
     * Deletes a specified file
     * @param {String} fileId file_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteFile(fileId) {
      return this.deleteFileWithHttpInfo(fileId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a file
     * Retrieves a file
     * @param {String} fileId file_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/FileMetadata} and HTTP response
     */
    getFileWithHttpInfo(fileId) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getFile");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileMetadata;
      return this.apiClient.callApi(
        '/v2/files/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a file
     * Retrieves a file
     * @param {String} fileId file_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/FileMetadata}
     */
    getFile(fileId) {
      return this.getFileWithHttpInfo(fileId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a file's data
     * Retrieves a file's data
     * @param {String} fileId file_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Blob} and HTTP response
     */
    getFileDataWithHttpInfo(fileId) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getFileData");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/v2/files/{file_id}:data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a file's data
     * Retrieves a file's data
     * @param {String} fileId file_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Blob}
     */
    getFileData(fileId) {
      return this.getFileDataWithHttpInfo(fileId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all files
     * Retrieves a list of files
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are: - (Boolean) `is_public` - (String) `contact_id` - (String) `user_id` - (FileBoxCategory) `category` - (FileBoxType) `file_box_type`  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=contact_id%3D%3D123` - `filter=category%3D%3DATTACHMENTS` - `filter=file_box_type%3D%3DTICKET%3Bcategory%3D%3DATTACHMENTS` 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `file_name` - `updated_time` - ...  One of the following directions: - `asc` - `desc` 
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListFilesResponse} and HTTP response
     */
    listFilesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFilesResponse;
      return this.apiClient.callApi(
        '/v2/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all files
     * Retrieves a list of files
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are: - (Boolean) `is_public` - (String) `contact_id` - (String) `user_id` - (FileBoxCategory) `category` - (FileBoxType) `file_box_type`  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=contact_id%3D%3D123` - `filter=category%3D%3DATTACHMENTS` - `filter=file_box_type%3D%3DTICKET%3Bcategory%3D%3DATTACHMENTS` 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `file_name` - `updated_time` - ...  One of the following directions: - `asc` - `desc` 
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListFilesResponse}
     */
    listFiles(opts) {
      return this.listFilesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a file
     * Updates a file. Note that this endpoint is using a POST method instead of PATCH.
     * @param {String} fileId file_id
     * @param {Object} opts Optional parameters
     * @param {String} [file] File to upload. This is a file sent as multi-part (not a string)
     * @param {String} [fileName] File name
     * @param {Boolean} [isPublic] Is public
     * @param {module:keap.core.v2/model/String} [updateMask] Update Mask
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/FileMetadata} and HTTP response
     */
    updateFileWithHttpInfo(fileId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling updateFile");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file'],
        'file_name': opts['fileName'],
        'is_public': opts['isPublic'],
        'update_mask': opts['updateMask']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FileMetadata;
      return this.apiClient.callApi(
        '/v2/files/{file_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a file
     * Updates a file. Note that this endpoint is using a POST method instead of PATCH.
     * @param {String} fileId file_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.file File to upload. This is a file sent as multi-part (not a string)
     * @param {String} opts.fileName File name
     * @param {Boolean} opts.isPublic Is public
     * @param {module:keap.core.v2/model/String} opts.updateMask Update Mask
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/FileMetadata}
     */
    updateFile(fileId, opts) {
      return this.updateFileWithHttpInfo(fileId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
