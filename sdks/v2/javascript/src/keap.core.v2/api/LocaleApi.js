/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.861953
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Country from '../model/Country';
import Error from '../model/Error';
import ListCountriesResponse from '../model/ListCountriesResponse';
import ListProvincesResponse from '../model/ListProvincesResponse';
import Province from '../model/Province';

/**
* Locale service.
* @module keap.core.v2/api/LocaleApi
*/
export default class LocaleApi {

    /**
    * Constructs a new LocaleApi. 
    * @alias module:keap.core.v2/api/LocaleApi
    * @class
    * @param {module:keap.core.v2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:keap.core.v2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get Country
     * Gets a country by its code or name
     * @param {String} countryCode The ISO 3166-2 alpha-2 code, alpha-3 code, or name of the country to be retrieved
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/Country} and HTTP response
     */
    getCountryByCodeWithHttpInfo(countryCode) {
      let postBody = null;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getCountryByCode");
      }

      let pathParams = {
        'country_code': countryCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Country;
      return this.apiClient.callApi(
        '/v2/locales/countries/{country_code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Country
     * Gets a country by its code or name
     * @param {String} countryCode The ISO 3166-2 alpha-2 code, alpha-3 code, or name of the country to be retrieved
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/Country}
     */
    getCountryByCode(countryCode) {
      return this.getCountryByCodeWithHttpInfo(countryCode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Province
     * Get a province by its code or name
     * @param {String} countryCode The ISO 3166-1 alpha-2 code, alpha-3 code, or name of the country to be retrieved
     * @param {String} provinceCode The ISO 3166-2 code or name of the province to be retrieved
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/Province} and HTTP response
     */
    getProvinceByCodeWithHttpInfo(countryCode, provinceCode) {
      let postBody = null;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getProvinceByCode");
      }
      // verify the required parameter 'provinceCode' is set
      if (provinceCode === undefined || provinceCode === null) {
        throw new Error("Missing the required parameter 'provinceCode' when calling getProvinceByCode");
      }

      let pathParams = {
        'country_code': countryCode,
        'province_code': provinceCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Province;
      return this.apiClient.callApi(
        '/v2/locales/countries/{country_code}/provinces/{province_code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Province
     * Get a province by its code or name
     * @param {String} countryCode The ISO 3166-1 alpha-2 code, alpha-3 code, or name of the country to be retrieved
     * @param {String} provinceCode The ISO 3166-2 code or name of the province to be retrieved
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/Province}
     */
    getProvinceByCode(countryCode, provinceCode) {
      return this.getProvinceByCodeWithHttpInfo(countryCode, provinceCode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Countries
     * Retrieves a list of countries
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListCountriesResponse} and HTTP response
     */
    listCountriesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCountriesResponse;
      return this.apiClient.callApi(
        '/v2/locales/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Countries
     * Retrieves a list of countries
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListCountriesResponse}
     */
    listCountries() {
      return this.listCountriesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List a Country's Province
     * Retrieves a list of provinces for a given country
     * @param {String} countryCode country_code
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListProvincesResponse} and HTTP response
     */
    listProvincesForCountryWithHttpInfo(countryCode) {
      let postBody = null;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling listProvincesForCountry");
      }

      let pathParams = {
        'country_code': countryCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProvincesResponse;
      return this.apiClient.callApi(
        '/v2/locales/countries/{country_code}/provinces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List a Country's Province
     * Retrieves a list of provinces for a given country
     * @param {String} countryCode country_code
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListProvincesResponse}
     */
    listProvincesForCountry(countryCode) {
      return this.listProvincesForCountryWithHttpInfo(countryCode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
