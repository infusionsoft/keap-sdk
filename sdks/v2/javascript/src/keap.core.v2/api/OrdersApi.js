/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.861953
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateCustomFieldRequest from '../model/CreateCustomFieldRequest';
import CreateOrderItemRequest from '../model/CreateOrderItemRequest';
import CreatePaymentRequest from '../model/CreatePaymentRequest';
import CustomFieldMetaData from '../model/CustomFieldMetaData';
import Error from '../model/Error';
import FileOperationRequest from '../model/FileOperationRequest';
import ListOrderPaymentsResponse from '../model/ListOrderPaymentsResponse';
import ListOrders from '../model/ListOrders';
import ObjectModel from '../model/ObjectModel';
import Order from '../model/Order';
import OrderItem from '../model/OrderItem';
import PaymentResult from '../model/PaymentResult';
import RestApplyCommissionRequest from '../model/RestApplyCommissionRequest';
import RestCreateOrderRequest from '../model/RestCreateOrderRequest';
import UpdateCustomFieldMetaDataRequest from '../model/UpdateCustomFieldMetaDataRequest';
import UpdateOrderItemRequest from '../model/UpdateOrderItemRequest';
import UpdateOrderRequest from '../model/UpdateOrderRequest';

/**
* Orders service.
* @module keap.core.v2/api/OrdersApi
*/
export default class OrdersApi {

    /**
    * Constructs a new OrdersApi. 
    * @alias module:keap.core.v2/api/OrdersApi
    * @class
    * @param {module:keap.core.v2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:keap.core.v2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Apply Commission to an Order Item
     * Applies commission to an order item on an existing order.
     * @param {String} orderId order_id
     * @param {String} orderItemId order_item_id
     * @param {module:keap.core.v2/model/RestApplyCommissionRequest} restApplyCommissionRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/OrderItem} and HTTP response
     */
    applyCommissionOnOrderItemsWithHttpInfo(orderId, orderItemId, restApplyCommissionRequest) {
      let postBody = restApplyCommissionRequest;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling applyCommissionOnOrderItems");
      }
      // verify the required parameter 'orderItemId' is set
      if (orderItemId === undefined || orderItemId === null) {
        throw new Error("Missing the required parameter 'orderItemId' when calling applyCommissionOnOrderItems");
      }
      // verify the required parameter 'restApplyCommissionRequest' is set
      if (restApplyCommissionRequest === undefined || restApplyCommissionRequest === null) {
        throw new Error("Missing the required parameter 'restApplyCommissionRequest' when calling applyCommissionOnOrderItems");
      }

      let pathParams = {
        'order_id': orderId,
        'order_item_id': orderItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderItem;
      return this.apiClient.callApi(
        '/v2/orders/{order_id}/items/{order_item_id}:applyCommission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Apply Commission to an Order Item
     * Applies commission to an order item on an existing order.
     * @param {String} orderId order_id
     * @param {String} orderItemId order_item_id
     * @param {module:keap.core.v2/model/RestApplyCommissionRequest} restApplyCommissionRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/OrderItem}
     */
    applyCommissionOnOrderItems(orderId, orderItemId, restApplyCommissionRequest) {
      return this.applyCommissionOnOrderItemsWithHttpInfo(orderId, orderItemId, restApplyCommissionRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Apply Taxes on an Order
     * Calculate taxes for a single Order for a given order id
     * @param {String} orderId order_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/Order} and HTTP response
     */
    applyTaxWithHttpInfo(orderId) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling applyTax");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/v2/orders/{order_id}:applyTax', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Apply Taxes on an Order
     * Calculate taxes for a single Order for a given order id
     * @param {String} orderId order_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/Order}
     */
    applyTax(orderId) {
      return this.applyTaxWithHttpInfo(orderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Attach a File to an Order Invoice
     * Attaches an uploaded File to an Order Invoice
     * @param {String} orderId order_id
     * @param {module:keap.core.v2/model/FileOperationRequest} fileOperationRequest File name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/Order} and HTTP response
     */
    attachFileToOrderWithHttpInfo(orderId, fileOperationRequest) {
      let postBody = fileOperationRequest;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling attachFileToOrder");
      }
      // verify the required parameter 'fileOperationRequest' is set
      if (fileOperationRequest === undefined || fileOperationRequest === null) {
        throw new Error("Missing the required parameter 'fileOperationRequest' when calling attachFileToOrder");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/v2/orders/{order_id}:attachFile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Attach a File to an Order Invoice
     * Attaches an uploaded File to an Order Invoice
     * @param {String} orderId order_id
     * @param {module:keap.core.v2/model/FileOperationRequest} fileOperationRequest File name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/Order}
     */
    attachFileToOrder(orderId, fileOperationRequest) {
      return this.attachFileToOrderWithHttpInfo(orderId, fileOperationRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an Order
     * Creates a one time Order with Order items
     * @param {module:keap.core.v2/model/RestCreateOrderRequest} restCreateOrderRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/Order} and HTTP response
     */
    createOrderWithHttpInfo(restCreateOrderRequest) {
      let postBody = restCreateOrderRequest;
      // verify the required parameter 'restCreateOrderRequest' is set
      if (restCreateOrderRequest === undefined || restCreateOrderRequest === null) {
        throw new Error("Missing the required parameter 'restCreateOrderRequest' when calling createOrder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/v2/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an Order
     * Creates a one time Order with Order items
     * @param {module:keap.core.v2/model/RestCreateOrderRequest} restCreateOrderRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/Order}
     */
    createOrder(restCreateOrderRequest) {
      return this.createOrderWithHttpInfo(restCreateOrderRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an Order Custom Field
     * Creates a custom field of the specified type and options to the Order object
     * @param {module:keap.core.v2/model/CreateCustomFieldRequest} createCustomFieldRequest customField
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/CustomFieldMetaData} and HTTP response
     */
    createOrderCustomFieldWithHttpInfo(createCustomFieldRequest) {
      let postBody = createCustomFieldRequest;
      // verify the required parameter 'createCustomFieldRequest' is set
      if (createCustomFieldRequest === undefined || createCustomFieldRequest === null) {
        throw new Error("Missing the required parameter 'createCustomFieldRequest' when calling createOrderCustomField");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomFieldMetaData;
      return this.apiClient.callApi(
        '/v2/orders/model/customFields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an Order Custom Field
     * Creates a custom field of the specified type and options to the Order object
     * @param {module:keap.core.v2/model/CreateCustomFieldRequest} createCustomFieldRequest customField
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/CustomFieldMetaData}
     */
    createOrderCustomField(createCustomFieldRequest) {
      return this.createOrderCustomFieldWithHttpInfo(createCustomFieldRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an Order Item
     * Creates an order item on an existing order
     * @param {String} orderId order_id
     * @param {module:keap.core.v2/model/CreateOrderItemRequest} createOrderItemRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/OrderItem} and HTTP response
     */
    createOrderItemWithHttpInfo(orderId, createOrderItemRequest) {
      let postBody = createOrderItemRequest;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling createOrderItem");
      }
      // verify the required parameter 'createOrderItemRequest' is set
      if (createOrderItemRequest === undefined || createOrderItemRequest === null) {
        throw new Error("Missing the required parameter 'createOrderItemRequest' when calling createOrderItem");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderItem;
      return this.apiClient.callApi(
        '/v2/orders/{order_id}/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an Order Item
     * Creates an order item on an existing order
     * @param {String} orderId order_id
     * @param {module:keap.core.v2/model/CreateOrderItemRequest} createOrderItemRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/OrderItem}
     */
    createOrderItem(orderId, createOrderItemRequest) {
      return this.createOrderItemWithHttpInfo(orderId, createOrderItemRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Payment
     * Creates a payment record. Alternatively, adds a record of historical or external payment of cash or credit card
     * @param {String} orderId order_id
     * @param {module:keap.core.v2/model/CreatePaymentRequest} createPaymentRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/PaymentResult} and HTTP response
     */
    createPaymentForAnOrderWithHttpInfo(orderId, createPaymentRequest) {
      let postBody = createPaymentRequest;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling createPaymentForAnOrder");
      }
      // verify the required parameter 'createPaymentRequest' is set
      if (createPaymentRequest === undefined || createPaymentRequest === null) {
        throw new Error("Missing the required parameter 'createPaymentRequest' when calling createPaymentForAnOrder");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentResult;
      return this.apiClient.callApi(
        '/v2/orders/{order_id}/payments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Payment
     * Creates a payment record. Alternatively, adds a record of historical or external payment of cash or credit card
     * @param {String} orderId order_id
     * @param {module:keap.core.v2/model/CreatePaymentRequest} createPaymentRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/PaymentResult}
     */
    createPaymentForAnOrder(orderId, createPaymentRequest) {
      return this.createPaymentForAnOrderWithHttpInfo(orderId, createPaymentRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an Order
     * Deletes an Order<br/> Note: The Order must not have any transactions recorded to be available for deletion. 
     * @param {String} orderId order_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteOrderWithHttpInfo(orderId) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling deleteOrder");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/orders/{order_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an Order
     * Deletes an Order<br/> Note: The Order must not have any transactions recorded to be available for deletion. 
     * @param {String} orderId order_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteOrder(orderId) {
      return this.deleteOrderWithHttpInfo(orderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an Order Custom Field
     * Deletes a Custom Field from the Order object
     * @param {String} customFieldId custom_field_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteOrderCustomFieldWithHttpInfo(customFieldId) {
      let postBody = null;
      // verify the required parameter 'customFieldId' is set
      if (customFieldId === undefined || customFieldId === null) {
        throw new Error("Missing the required parameter 'customFieldId' when calling deleteOrderCustomField");
      }

      let pathParams = {
        'custom_field_id': customFieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/orders/model/customFields/{custom_field_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an Order Custom Field
     * Deletes a Custom Field from the Order object
     * @param {String} customFieldId custom_field_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteOrderCustomField(customFieldId) {
      return this.deleteOrderCustomFieldWithHttpInfo(customFieldId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an Order Item
     * Deletes an order item on an existing order
     * @param {String} orderId order_id
     * @param {String} orderItemId order_item_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteOrderItemWithHttpInfo(orderId, orderItemId) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling deleteOrderItem");
      }
      // verify the required parameter 'orderItemId' is set
      if (orderItemId === undefined || orderItemId === null) {
        throw new Error("Missing the required parameter 'orderItemId' when calling deleteOrderItem");
      }

      let pathParams = {
        'order_id': orderId,
        'order_item_id': orderItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/orders/{order_id}/items/{order_item_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an Order Item
     * Deletes an order item on an existing order
     * @param {String} orderId order_id
     * @param {String} orderItemId order_item_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteOrderItem(orderId, orderItemId) {
      return this.deleteOrderItemWithHttpInfo(orderId, orderItemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Detach a File from an Order Invoice
     * Detaches a File from an Order Invoice
     * @param {String} orderId order_id
     * @param {module:keap.core.v2/model/FileOperationRequest} fileOperationRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/Order} and HTTP response
     */
    detachFileFromOrderWithHttpInfo(orderId, fileOperationRequest) {
      let postBody = fileOperationRequest;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling detachFileFromOrder");
      }
      // verify the required parameter 'fileOperationRequest' is set
      if (fileOperationRequest === undefined || fileOperationRequest === null) {
        throw new Error("Missing the required parameter 'fileOperationRequest' when calling detachFileFromOrder");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/v2/orders/{order_id}:detachFile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Detach a File from an Order Invoice
     * Detaches a File from an Order Invoice
     * @param {String} orderId order_id
     * @param {module:keap.core.v2/model/FileOperationRequest} fileOperationRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/Order}
     */
    detachFileFromOrder(orderId, fileOperationRequest) {
      return this.detachFileFromOrderWithHttpInfo(orderId, fileOperationRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an Order
     * Retrieves a single Order for a given order id
     * @param {String} orderId order_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/Order} and HTTP response
     */
    getOrderWithHttpInfo(orderId) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrder");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/v2/orders/{order_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an Order
     * Retrieves a single Order for a given order id
     * @param {String} orderId order_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/Order}
     */
    getOrder(orderId) {
      return this.getOrderWithHttpInfo(orderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Order Payments
     * Retrieves a list of payments made against a given order, including historical or external payments of cash or credit card
     * @param {String} orderId order_id
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are: - (String) `invoice_id` - (String) `payment_id` - (String) `amount` - (String) `pay_status` - (Boolean) `skip_commission`  You will need to apply the `==` operator to check the equality of one of the filters with your searched  word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=payment_id%3D%3D123` - `filter=pay_status%3D%3DAPPROVED` - `filter=invoice_id%3D%3D456%3Bskip_commission=true` 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `invoice_id` - `payment_id` - `amount` - `pay_time` - `pay_status` - `skip_commission` - `last_updated_time`  One of the following directions: - `asc` - `desc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListOrderPaymentsResponse} and HTTP response
     */
    listOrderPaymentsWithHttpInfo(orderId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling listOrderPayments");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListOrderPaymentsResponse;
      return this.apiClient.callApi(
        '/v2/orders/{order_id}/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Order Payments
     * Retrieves a list of payments made against a given order, including historical or external payments of cash or credit card
     * @param {String} orderId order_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are: - (String) `invoice_id` - (String) `payment_id` - (String) `amount` - (String) `pay_status` - (Boolean) `skip_commission`  You will need to apply the `==` operator to check the equality of one of the filters with your searched  word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=payment_id%3D%3D123` - `filter=pay_status%3D%3DAPPROVED` - `filter=invoice_id%3D%3D456%3Bskip_commission=true` 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `invoice_id` - `payment_id` - `amount` - `pay_time` - `pay_status` - `skip_commission` - `last_updated_time`  One of the following directions: - `asc` - `desc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListOrderPaymentsResponse}
     */
    listOrderPayments(orderId, opts) {
      return this.listOrderPaymentsWithHttpInfo(orderId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List orders
     * Retrieves a list of orders
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are: - (String) `product_id` - (String) `contact_id` - (Boolean) `paid` - (String) `created_since_time` - (String) `created_until_time` You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=product_id%3D%3D123` - `filter=contact_id%3D%3D567` - `filter=product_id%3D%3D123%3Bcontact_id%3D%3D567`
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `id` - `order_time`  One of the following directions: - `asc` - `desc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListOrders} and HTTP response
     */
    listOrdersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListOrders;
      return this.apiClient.callApi(
        '/v2/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List orders
     * Retrieves a list of orders
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are: - (String) `product_id` - (String) `contact_id` - (Boolean) `paid` - (String) `created_since_time` - (String) `created_until_time` You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=product_id%3D%3D123` - `filter=contact_id%3D%3D567` - `filter=product_id%3D%3D123%3Bcontact_id%3D%3D567`
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `id` - `order_time`  One of the following directions: - `asc` - `desc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListOrders}
     */
    listOrders(opts) {
      return this.listOrdersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Order Custom Field Model
     * Gets the custom fields for the Order object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ObjectModel} and HTTP response
     */
    retrieveOrderCustomFieldModelWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ObjectModel;
      return this.apiClient.callApi(
        '/v2/orders/model', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Order Custom Field Model
     * Gets the custom fields for the Order object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ObjectModel}
     */
    retrieveOrderCustomFieldModel() {
      return this.retrieveOrderCustomFieldModelWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an Order
     * Updates an Order
     * @param {String} orderId order_id
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @param {module:keap.core.v2/model/UpdateOrderRequest} [updateOrderRequest] order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/Order} and HTTP response
     */
    updateOrderWithHttpInfo(orderId, opts) {
      opts = opts || {};
      let postBody = opts['updateOrderRequest'];
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling updateOrder");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/v2/orders/{order_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an Order
     * Updates an Order
     * @param {String} orderId order_id
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @param {module:keap.core.v2/model/UpdateOrderRequest} opts.updateOrderRequest order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/Order}
     */
    updateOrder(orderId, opts) {
      return this.updateOrderWithHttpInfo(orderId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an Order Custom Field
     * Updates a custom field of the specified type and options to the Order object
     * @param {String} customFieldId custom_field_id
     * @param {module:keap.core.v2/model/UpdateCustomFieldMetaDataRequest} updateCustomFieldMetaDataRequest request
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/CustomFieldMetaData} and HTTP response
     */
    updateOrderCustomFieldWithHttpInfo(customFieldId, updateCustomFieldMetaDataRequest, opts) {
      opts = opts || {};
      let postBody = updateCustomFieldMetaDataRequest;
      // verify the required parameter 'customFieldId' is set
      if (customFieldId === undefined || customFieldId === null) {
        throw new Error("Missing the required parameter 'customFieldId' when calling updateOrderCustomField");
      }
      // verify the required parameter 'updateCustomFieldMetaDataRequest' is set
      if (updateCustomFieldMetaDataRequest === undefined || updateCustomFieldMetaDataRequest === null) {
        throw new Error("Missing the required parameter 'updateCustomFieldMetaDataRequest' when calling updateOrderCustomField");
      }

      let pathParams = {
        'custom_field_id': customFieldId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomFieldMetaData;
      return this.apiClient.callApi(
        '/v2/orders/model/customFields/{custom_field_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an Order Custom Field
     * Updates a custom field of the specified type and options to the Order object
     * @param {String} customFieldId custom_field_id
     * @param {module:keap.core.v2/model/UpdateCustomFieldMetaDataRequest} updateCustomFieldMetaDataRequest request
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/CustomFieldMetaData}
     */
    updateOrderCustomField(customFieldId, updateCustomFieldMetaDataRequest, opts) {
      return this.updateOrderCustomFieldWithHttpInfo(customFieldId, updateCustomFieldMetaDataRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an Order Item
     * Updates an Order Item
     * @param {String} orderId order_id
     * @param {String} orderItemId order_item_id
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @param {module:keap.core.v2/model/UpdateOrderItemRequest} [updateOrderItemRequest] order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/OrderItem} and HTTP response
     */
    updateOrderItemWithHttpInfo(orderId, orderItemId, opts) {
      opts = opts || {};
      let postBody = opts['updateOrderItemRequest'];
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling updateOrderItem");
      }
      // verify the required parameter 'orderItemId' is set
      if (orderItemId === undefined || orderItemId === null) {
        throw new Error("Missing the required parameter 'orderItemId' when calling updateOrderItem");
      }

      let pathParams = {
        'order_id': orderId,
        'order_item_id': orderItemId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderItem;
      return this.apiClient.callApi(
        '/v2/orders/{order_id}/items/{order_item_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an Order Item
     * Updates an Order Item
     * @param {String} orderId order_id
     * @param {String} orderItemId order_item_id
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @param {module:keap.core.v2/model/UpdateOrderItemRequest} opts.updateOrderItemRequest order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/OrderItem}
     */
    updateOrderItem(orderId, orderItemId, opts) {
      return this.updateOrderItemWithHttpInfo(orderId, orderItemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
