/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.862454-hf-202509261459
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateSubscriptionPlanRequest from '../model/CreateSubscriptionPlanRequest';
import Error from '../model/Error';
import ListSubscriptionPlansResponse from '../model/ListSubscriptionPlansResponse';
import SubscriptionPlan from '../model/SubscriptionPlan';
import UpdateSubscriptionPlanRequest from '../model/UpdateSubscriptionPlanRequest';

/**
* SubscriptionPlans service.
* @module keap.core.v2/api/SubscriptionPlansApi
*/
export default class SubscriptionPlansApi {

    /**
    * Constructs a new SubscriptionPlansApi. 
    * @alias module:keap.core.v2/api/SubscriptionPlansApi
    * @class
    * @param {module:keap.core.v2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:keap.core.v2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create Subscription Plan
     * Creates a Subscription Plan
     * @param {String} productId product_id
     * @param {module:keap.core.v2/model/CreateSubscriptionPlanRequest} createSubscriptionPlanRequest createSubscriptionPlanRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/SubscriptionPlan} and HTTP response
     */
    createSubscriptionPlansWithHttpInfo(productId, createSubscriptionPlanRequest) {
      let postBody = createSubscriptionPlanRequest;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling createSubscriptionPlans");
      }
      // verify the required parameter 'createSubscriptionPlanRequest' is set
      if (createSubscriptionPlanRequest === undefined || createSubscriptionPlanRequest === null) {
        throw new Error("Missing the required parameter 'createSubscriptionPlanRequest' when calling createSubscriptionPlans");
      }

      let pathParams = {
        'product_id': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionPlan;
      return this.apiClient.callApi(
        '/v2/products/{product_id}/subscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Subscription Plan
     * Creates a Subscription Plan
     * @param {String} productId product_id
     * @param {module:keap.core.v2/model/CreateSubscriptionPlanRequest} createSubscriptionPlanRequest createSubscriptionPlanRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/SubscriptionPlan}
     */
    createSubscriptionPlans(productId, createSubscriptionPlanRequest) {
      return this.createSubscriptionPlansWithHttpInfo(productId, createSubscriptionPlanRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Subscription Plan
     * Deletes a Subscription Plan
     * @param {String} productId product_id
     * @param {String} subscriptionPlanId subscription_plan_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSubscriptionPlanWithHttpInfo(productId, subscriptionPlanId) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteSubscriptionPlan");
      }
      // verify the required parameter 'subscriptionPlanId' is set
      if (subscriptionPlanId === undefined || subscriptionPlanId === null) {
        throw new Error("Missing the required parameter 'subscriptionPlanId' when calling deleteSubscriptionPlan");
      }

      let pathParams = {
        'product_id': productId,
        'subscription_plan_id': subscriptionPlanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/products/{product_id}/subscriptions/{subscription_plan_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Subscription Plan
     * Deletes a Subscription Plan
     * @param {String} productId product_id
     * @param {String} subscriptionPlanId subscription_plan_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSubscriptionPlan(productId, subscriptionPlanId) {
      return this.deleteSubscriptionPlanWithHttpInfo(productId, subscriptionPlanId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Subscription Plan
     * Retrieves a Subscription Plan
     * @param {String} productId product_id
     * @param {String} subscriptionPlanId subscription_plan_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/SubscriptionPlan} and HTTP response
     */
    fetchSubscriptionPlanWithHttpInfo(productId, subscriptionPlanId) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling fetchSubscriptionPlan");
      }
      // verify the required parameter 'subscriptionPlanId' is set
      if (subscriptionPlanId === undefined || subscriptionPlanId === null) {
        throw new Error("Missing the required parameter 'subscriptionPlanId' when calling fetchSubscriptionPlan");
      }

      let pathParams = {
        'product_id': productId,
        'subscription_plan_id': subscriptionPlanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionPlan;
      return this.apiClient.callApi(
        '/v2/products/{product_id}/subscriptions/{subscription_plan_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Subscription Plan
     * Retrieves a Subscription Plan
     * @param {String} productId product_id
     * @param {String} subscriptionPlanId subscription_plan_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/SubscriptionPlan}
     */
    fetchSubscriptionPlan(productId, subscriptionPlanId) {
      return this.fetchSubscriptionPlanWithHttpInfo(productId, subscriptionPlanId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Subscription Plans
     * Retrieves a list of Subscription Plans
     * @param {String} productId product_id
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are: - (Boolean) `active`: true or false - (BillingCycle) `cycle_type`: DAILY, WEEKLY, MONTHLY, YEARLY You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=active%3D%3Dtrue` - `filter=cycle_type%3D%3DDAILY` - `filter=active%3D%3Dfalse%3Bcycle_type%3D%3DWEEKLY` 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `id` - `product_id`  One of the following directions: - `asc` - `desc` 
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListSubscriptionPlansResponse} and HTTP response
     */
    listSubscriptionPlansWithHttpInfo(productId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling listSubscriptionPlans");
      }

      let pathParams = {
        'product_id': productId
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSubscriptionPlansResponse;
      return this.apiClient.callApi(
        '/v2/products/{product_id}/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Subscription Plans
     * Retrieves a list of Subscription Plans
     * @param {String} productId product_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are: - (Boolean) `active`: true or false - (BillingCycle) `cycle_type`: DAILY, WEEKLY, MONTHLY, YEARLY You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=active%3D%3Dtrue` - `filter=cycle_type%3D%3DDAILY` - `filter=active%3D%3Dfalse%3Bcycle_type%3D%3DWEEKLY` 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `id` - `product_id`  One of the following directions: - `asc` - `desc` 
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListSubscriptionPlansResponse}
     */
    listSubscriptionPlans(productId, opts) {
      return this.listSubscriptionPlansWithHttpInfo(productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Subscription Plan
     * Updates a Subscription Plan
     * @param {String} productId product_id
     * @param {String} subscriptionPlanId subscription_plan_id
     * @param {module:keap.core.v2/model/UpdateSubscriptionPlanRequest} updateSubscriptionPlanRequest updateSubscriptionPlanRequest
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/SubscriptionPlan} and HTTP response
     */
    updateSubscriptionPlanWithHttpInfo(productId, subscriptionPlanId, updateSubscriptionPlanRequest, opts) {
      opts = opts || {};
      let postBody = updateSubscriptionPlanRequest;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling updateSubscriptionPlan");
      }
      // verify the required parameter 'subscriptionPlanId' is set
      if (subscriptionPlanId === undefined || subscriptionPlanId === null) {
        throw new Error("Missing the required parameter 'subscriptionPlanId' when calling updateSubscriptionPlan");
      }
      // verify the required parameter 'updateSubscriptionPlanRequest' is set
      if (updateSubscriptionPlanRequest === undefined || updateSubscriptionPlanRequest === null) {
        throw new Error("Missing the required parameter 'updateSubscriptionPlanRequest' when calling updateSubscriptionPlan");
      }

      let pathParams = {
        'product_id': productId,
        'subscription_plan_id': subscriptionPlanId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionPlan;
      return this.apiClient.callApi(
        '/v2/products/{product_id}/subscriptions/{subscription_plan_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Subscription Plan
     * Updates a Subscription Plan
     * @param {String} productId product_id
     * @param {String} subscriptionPlanId subscription_plan_id
     * @param {module:keap.core.v2/model/UpdateSubscriptionPlanRequest} updateSubscriptionPlanRequest updateSubscriptionPlanRequest
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/SubscriptionPlan}
     */
    updateSubscriptionPlan(productId, subscriptionPlanId, updateSubscriptionPlanRequest, opts) {
      return this.updateSubscriptionPlanWithHttpInfo(productId, subscriptionPlanId, updateSubscriptionPlanRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
