/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.863963
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AffiliateAddToProgramRequest from '../model/AffiliateAddToProgramRequest';
import AffiliateCommissionEarned from '../model/AffiliateCommissionEarned';
import AffiliateCommissionProgramResponse from '../model/AffiliateCommissionProgramResponse';
import AffiliateLink from '../model/AffiliateLink';
import AffiliateProgramV2 from '../model/AffiliateProgramV2';
import AffiliateRemoveFromProgramRequest from '../model/AffiliateRemoveFromProgramRequest';
import CreateAffiliateRequest from '../model/CreateAffiliateRequest';
import CreateCommissionProgramRequest from '../model/CreateCommissionProgramRequest';
import CreateCustomFieldRequest from '../model/CreateCustomFieldRequest';
import CreateDefaultCommissionProgramRequest from '../model/CreateDefaultCommissionProgramRequest';
import CreateOrUpdateAffiliateLinkRequest from '../model/CreateOrUpdateAffiliateLinkRequest';
import CreateProductCommissionProgramRequest from '../model/CreateProductCommissionProgramRequest';
import CreateSubscriptionCommissionProgramRequest from '../model/CreateSubscriptionCommissionProgramRequest';
import CustomFieldMetaData from '../model/CustomFieldMetaData';
import DeleteProgramCommissionRequest from '../model/DeleteProgramCommissionRequest';
import DeleteSubscriptionPlanCommissionRequest from '../model/DeleteSubscriptionPlanCommissionRequest';
import Error from '../model/Error';
import ListAffiliateCommissionProgramsResponse from '../model/ListAffiliateCommissionProgramsResponse';
import ListAffiliateCommissionsResponse from '../model/ListAffiliateCommissionsResponse';
import ListAffiliateLinksResponse from '../model/ListAffiliateLinksResponse';
import ListAffiliatePaymentsResponse from '../model/ListAffiliatePaymentsResponse';
import ListAffiliateSummariesResponse from '../model/ListAffiliateSummariesResponse';
import ListAffiliatesResponse from '../model/ListAffiliatesResponse';
import ObjectModel from '../model/ObjectModel';
import ProductCommissionProgram from '../model/ProductCommissionProgram';
import RestAffiliate from '../model/RestAffiliate';
import SetDefaultCommissionProgramResponse from '../model/SetDefaultCommissionProgramResponse';
import SubscriptionCommissionProgram from '../model/SubscriptionCommissionProgram';
import UpdateAffiliateRequest from '../model/UpdateAffiliateRequest';
import UpdateCommissionProgramRequest from '../model/UpdateCommissionProgramRequest';
import UpdateCustomFieldMetaDataRequest from '../model/UpdateCustomFieldMetaDataRequest';
import UpdateDefaultCommissionProgramRequest from '../model/UpdateDefaultCommissionProgramRequest';
import UpdateProductCommissionProgramRequest from '../model/UpdateProductCommissionProgramRequest';
import UpdateSubscriptionCommissionProgramRequest from '../model/UpdateSubscriptionCommissionProgramRequest';

/**
* Affiliate service.
* @module keap.core.v2/api/AffiliateApi
*/
export default class AffiliateApi {

    /**
    * Constructs a new AffiliateApi. 
    * @alias module:keap.core.v2/api/AffiliateApi
    * @class
    * @param {module:keap.core.v2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:keap.core.v2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create an Affiliate
     * Creates a single Affiliate
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/CreateAffiliateRequest} [createAffiliateRequest] Affiliate request to insert
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/RestAffiliate} and HTTP response
     */
    addAffiliateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createAffiliateRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestAffiliate;
      return this.apiClient.callApi(
        '/v2/affiliates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an Affiliate
     * Creates a single Affiliate
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/CreateAffiliateRequest} opts.createAffiliateRequest Affiliate request to insert
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/RestAffiliate}
     */
    addAffiliate(opts) {
      return this.addAffiliateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Assign Affiliate to Commission program
     * Assigns an Affiliate to Commission Program
     * @param {String} id id
     * @param {module:keap.core.v2/model/AffiliateAddToProgramRequest} affiliateAddToProgramRequest affiliateAddToProgramRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addAffiliateToProgramWithHttpInfo(id, affiliateAddToProgramRequest) {
      let postBody = affiliateAddToProgramRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addAffiliateToProgram");
      }
      // verify the required parameter 'affiliateAddToProgramRequest' is set
      if (affiliateAddToProgramRequest === undefined || affiliateAddToProgramRequest === null) {
        throw new Error("Missing the required parameter 'affiliateAddToProgramRequest' when calling addAffiliateToProgram");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/affiliates/{id}:assignToProgram', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Assign Affiliate to Commission program
     * Assigns an Affiliate to Commission Program
     * @param {String} id id
     * @param {module:keap.core.v2/model/AffiliateAddToProgramRequest} affiliateAddToProgramRequest affiliateAddToProgramRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addAffiliateToProgram(id, affiliateAddToProgramRequest) {
      return this.addAffiliateToProgramWithHttpInfo(id, affiliateAddToProgramRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an Affiliate Commission Program
     * Creates an Affiliate Commission Program
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/CreateCommissionProgramRequest} [createCommissionProgramRequest] Commission Program to insert
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/AffiliateCommissionProgramResponse} and HTTP response
     */
    addCommissionProgramWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createCommissionProgramRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AffiliateCommissionProgramResponse;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an Affiliate Commission Program
     * Creates an Affiliate Commission Program
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/CreateCommissionProgramRequest} opts.createCommissionProgramRequest Commission Program to insert
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/AffiliateCommissionProgramResponse}
     */
    addCommissionProgram(opts) {
      return this.addCommissionProgramWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Assign a Product Commission Program
     * Assigns a Product Commission Program to a Product
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/CreateProductCommissionProgramRequest} [createProductCommissionProgramRequest] Product Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ProductCommissionProgram} and HTTP response
     */
    assignProductCommissionProgramWithHttpInfo(commissionProgramId, opts) {
      opts = opts || {};
      let postBody = opts['createProductCommissionProgramRequest'];
      // verify the required parameter 'commissionProgramId' is set
      if (commissionProgramId === undefined || commissionProgramId === null) {
        throw new Error("Missing the required parameter 'commissionProgramId' when calling assignProductCommissionProgram");
      }

      let pathParams = {
        'commission_program_id': commissionProgramId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductCommissionProgram;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms/productCommissionPrograms/{commission_program_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Assign a Product Commission Program
     * Assigns a Product Commission Program to a Product
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/CreateProductCommissionProgramRequest} opts.createProductCommissionProgramRequest Product Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ProductCommissionProgram}
     */
    assignProductCommissionProgram(commissionProgramId, opts) {
      return this.assignProductCommissionProgramWithHttpInfo(commissionProgramId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Assign a Subscription Commission Program
     * Assigns a Subscription Commission Program to a Subscription
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/CreateSubscriptionCommissionProgramRequest} [createSubscriptionCommissionProgramRequest] Subscription Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/SubscriptionCommissionProgram} and HTTP response
     */
    assignSubscriptionCommissionProgramWithHttpInfo(commissionProgramId, opts) {
      opts = opts || {};
      let postBody = opts['createSubscriptionCommissionProgramRequest'];
      // verify the required parameter 'commissionProgramId' is set
      if (commissionProgramId === undefined || commissionProgramId === null) {
        throw new Error("Missing the required parameter 'commissionProgramId' when calling assignSubscriptionCommissionProgram");
      }

      let pathParams = {
        'commission_program_id': commissionProgramId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionCommissionProgram;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms/subscriptionCommissionPrograms/{commission_program_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Assign a Subscription Commission Program
     * Assigns a Subscription Commission Program to a Subscription
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/CreateSubscriptionCommissionProgramRequest} opts.createSubscriptionCommissionProgramRequest Subscription Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/SubscriptionCommissionProgram}
     */
    assignSubscriptionCommissionProgram(commissionProgramId, opts) {
      return this.assignSubscriptionCommissionProgramWithHttpInfo(commissionProgramId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an Affiliate Custom Field
     * Creates a single Affiliate Custom Field
     * @param {module:keap.core.v2/model/CreateCustomFieldRequest} createCustomFieldRequest customField
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/CustomFieldMetaData} and HTTP response
     */
    createAffiliateCustomFieldWithHttpInfo(createCustomFieldRequest) {
      let postBody = createCustomFieldRequest;
      // verify the required parameter 'createCustomFieldRequest' is set
      if (createCustomFieldRequest === undefined || createCustomFieldRequest === null) {
        throw new Error("Missing the required parameter 'createCustomFieldRequest' when calling createAffiliateCustomField");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomFieldMetaData;
      return this.apiClient.callApi(
        '/v2/affiliates/model/customFields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an Affiliate Custom Field
     * Creates a single Affiliate Custom Field
     * @param {module:keap.core.v2/model/CreateCustomFieldRequest} createCustomFieldRequest customField
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/CustomFieldMetaData}
     */
    createAffiliateCustomField(createCustomFieldRequest) {
      return this.createAffiliateCustomFieldWithHttpInfo(createCustomFieldRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Default Commission Program
     * Creates a Default Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/CreateDefaultCommissionProgramRequest} [createDefaultCommissionProgramRequest] Values of the Default Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/SetDefaultCommissionProgramResponse} and HTTP response
     */
    createDefaultCommissionProgramWithHttpInfo(commissionProgramId, opts) {
      opts = opts || {};
      let postBody = opts['createDefaultCommissionProgramRequest'];
      // verify the required parameter 'commissionProgramId' is set
      if (commissionProgramId === undefined || commissionProgramId === null) {
        throw new Error("Missing the required parameter 'commissionProgramId' when calling createDefaultCommissionProgram");
      }

      let pathParams = {
        'commission_program_id': commissionProgramId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetDefaultCommissionProgramResponse;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms/defaultCommissionPrograms/{commission_program_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Default Commission Program
     * Creates a Default Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/CreateDefaultCommissionProgramRequest} opts.createDefaultCommissionProgramRequest Values of the Default Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/SetDefaultCommissionProgramResponse}
     */
    createDefaultCommissionProgram(commissionProgramId, opts) {
      return this.createDefaultCommissionProgramWithHttpInfo(commissionProgramId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an Affiliate Link
     * Creates a single Affiliate Link
     * @param {module:keap.core.v2/model/CreateOrUpdateAffiliateLinkRequest} createOrUpdateAffiliateLinkRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/AffiliateLink} and HTTP response
     */
    createRedirectLinkWithHttpInfo(createOrUpdateAffiliateLinkRequest) {
      let postBody = createOrUpdateAffiliateLinkRequest;
      // verify the required parameter 'createOrUpdateAffiliateLinkRequest' is set
      if (createOrUpdateAffiliateLinkRequest === undefined || createOrUpdateAffiliateLinkRequest === null) {
        throw new Error("Missing the required parameter 'createOrUpdateAffiliateLinkRequest' when calling createRedirectLink");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AffiliateLink;
      return this.apiClient.callApi(
        '/v2/affiliates/redirects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an Affiliate Link
     * Creates a single Affiliate Link
     * @param {module:keap.core.v2/model/CreateOrUpdateAffiliateLinkRequest} createOrUpdateAffiliateLinkRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/AffiliateLink}
     */
    createRedirectLink(createOrUpdateAffiliateLinkRequest) {
      return this.createRedirectLinkWithHttpInfo(createOrUpdateAffiliateLinkRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Affiliate
     * Deletes the specified Affiliate
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAffiliateWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAffiliate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/affiliates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Affiliate
     * Deletes the specified Affiliate
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAffiliate(id) {
      return this.deleteAffiliateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Commission Program
     * Deletes a Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAffiliateCommissionProgramWithHttpInfo(commissionProgramId) {
      let postBody = null;
      // verify the required parameter 'commissionProgramId' is set
      if (commissionProgramId === undefined || commissionProgramId === null) {
        throw new Error("Missing the required parameter 'commissionProgramId' when calling deleteAffiliateCommissionProgram");
      }

      let pathParams = {
        'commission_program_id': commissionProgramId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms/{commission_program_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Commission Program
     * Deletes a Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAffiliateCommissionProgram(commissionProgramId) {
      return this.deleteAffiliateCommissionProgramWithHttpInfo(commissionProgramId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Custom Field
     * Deletes a Custom Field from Affiliate.
     * @param {String} customFieldId custom_field_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAffiliateCustomFieldWithHttpInfo(customFieldId) {
      let postBody = null;
      // verify the required parameter 'customFieldId' is set
      if (customFieldId === undefined || customFieldId === null) {
        throw new Error("Missing the required parameter 'customFieldId' when calling deleteAffiliateCustomField");
      }

      let pathParams = {
        'custom_field_id': customFieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/affiliates/model/customFields/{custom_field_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Custom Field
     * Deletes a Custom Field from Affiliate.
     * @param {String} customFieldId custom_field_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAffiliateCustomField(customFieldId) {
      return this.deleteAffiliateCustomFieldWithHttpInfo(customFieldId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an Affiliate Link
     * Deletes an Affiliate Link
     * @param {String} redirectId redirect_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteRedirectLinkWithHttpInfo(redirectId) {
      let postBody = null;
      // verify the required parameter 'redirectId' is set
      if (redirectId === undefined || redirectId === null) {
        throw new Error("Missing the required parameter 'redirectId' when calling deleteRedirectLink");
      }

      let pathParams = {
        'redirect_id': redirectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/affiliates/redirects/{redirect_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an Affiliate Link
     * Deletes an Affiliate Link
     * @param {String} redirectId redirect_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteRedirectLink(redirectId) {
      return this.deleteRedirectLinkWithHttpInfo(redirectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an Affiliate
     * Retrieves a single Affiliate
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/RestAffiliate} and HTTP response
     */
    getAffiliateWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAffiliate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestAffiliate;
      return this.apiClient.callApi(
        '/v2/affiliates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an Affiliate
     * Retrieves a single Affiliate
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/RestAffiliate}
     */
    getAffiliate(id) {
      return this.getAffiliateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Affiliate Commission Earned and View LedgerURl for portal
     * Get the Affiliate Commission Earned and View LedgerURl for portal
     * @param {String} affiliateId affiliate_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/AffiliateCommissionEarned} and HTTP response
     */
    getAffiliateCommissionTotalWithHttpInfo(affiliateId) {
      let postBody = null;
      // verify the required parameter 'affiliateId' is set
      if (affiliateId === undefined || affiliateId === null) {
        throw new Error("Missing the required parameter 'affiliateId' when calling getAffiliateCommissionTotal");
      }

      let pathParams = {
        'affiliate_id': affiliateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AffiliateCommissionEarned;
      return this.apiClient.callApi(
        '/v2/affiliates/{affiliate_id}/commissionTotal', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Affiliate Commission Earned and View LedgerURl for portal
     * Get the Affiliate Commission Earned and View LedgerURl for portal
     * @param {String} affiliateId affiliate_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/AffiliateCommissionEarned}
     */
    getAffiliateCommissionTotal(affiliateId) {
      return this.getAffiliateCommissionTotalWithHttpInfo(affiliateId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Affiliate Commission and Clawbacks
     * Retrieve a list of Affiliate's Commissions and Clawbacks
     * @param {String} affiliateId affiliate_id
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are: - (String) `affiliateId` - (String) `since_time` - (String) `until_time` You will need to apply the `==` operator to check the equality of one of the filters with your searched  word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples:  - `filter=since_time%3D%3D2024-09-17T-15:50+00`  - `filter=until_time%3D%3D2024-09-17T-15:50+00`  - `filter=affiliateId%3D%3D123` 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `invoice_id` - `affowed_id` - `date_earned`  One of the following directions: - `asc` - `desc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListAffiliateCommissionsResponse} and HTTP response
     */
    getAffiliateCommissionsWithHttpInfo(affiliateId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'affiliateId' is set
      if (affiliateId === undefined || affiliateId === null) {
        throw new Error("Missing the required parameter 'affiliateId' when calling getAffiliateCommissions");
      }

      let pathParams = {
        'affiliate_id': affiliateId
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAffiliateCommissionsResponse;
      return this.apiClient.callApi(
        '/v2/affiliates/{affiliate_id}:commissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Affiliate Commission and Clawbacks
     * Retrieve a list of Affiliate's Commissions and Clawbacks
     * @param {String} affiliateId affiliate_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are: - (String) `affiliateId` - (String) `since_time` - (String) `until_time` You will need to apply the `==` operator to check the equality of one of the filters with your searched  word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples:  - `filter=since_time%3D%3D2024-09-17T-15:50+00`  - `filter=until_time%3D%3D2024-09-17T-15:50+00`  - `filter=affiliateId%3D%3D123` 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `invoice_id` - `affowed_id` - `date_earned`  One of the following directions: - `asc` - `desc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListAffiliateCommissionsResponse}
     */
    getAffiliateCommissions(affiliateId, opts) {
      return this.getAffiliateCommissionsWithHttpInfo(affiliateId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Affiliate Model
     * Get the custom fields and optional properties for the Affiliate object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ObjectModel} and HTTP response
     */
    getAffiliateCustomFieldsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ObjectModel;
      return this.apiClient.callApi(
        '/v2/affiliates/model', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Affiliate Model
     * Get the custom fields and optional properties for the Affiliate object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ObjectModel}
     */
    getAffiliateCustomFields() {
      return this.getAffiliateCustomFieldsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Commission Program
     * Retrieves a single Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/AffiliateProgramV2} and HTTP response
     */
    getCommissionProgramWithHttpInfo(commissionProgramId) {
      let postBody = null;
      // verify the required parameter 'commissionProgramId' is set
      if (commissionProgramId === undefined || commissionProgramId === null) {
        throw new Error("Missing the required parameter 'commissionProgramId' when calling getCommissionProgram");
      }

      let pathParams = {
        'commission_program_id': commissionProgramId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AffiliateProgramV2;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms/{commission_program_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Commission Program
     * Retrieves a single Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/AffiliateProgramV2}
     */
    getCommissionProgram(commissionProgramId) {
      return this.getCommissionProgramWithHttpInfo(commissionProgramId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an Affiliate Link
     * Retrieves information about a single Affiliate Link
     * @param {String} redirectId redirect_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/AffiliateLink} and HTTP response
     */
    getRedirectLinkWithHttpInfo(redirectId) {
      let postBody = null;
      // verify the required parameter 'redirectId' is set
      if (redirectId === undefined || redirectId === null) {
        throw new Error("Missing the required parameter 'redirectId' when calling getRedirectLink");
      }

      let pathParams = {
        'redirect_id': redirectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AffiliateLink;
      return this.apiClient.callApi(
        '/v2/affiliates/redirects/{redirect_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an Affiliate Link
     * Retrieves information about a single Affiliate Link
     * @param {String} redirectId redirect_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/AffiliateLink}
     */
    getRedirectLink(redirectId) {
      return this.getRedirectLinkWithHttpInfo(redirectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Affiliates
     * Retrieves a list of Affiliates
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are: - (String) `affiliate_name` - (String) `contact_id` - (String) `status` - (String) `code` 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `id` - `create_time` - `name` - `status` - `code`  One of the following directions: - `asc` - `desc` 
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListAffiliatesResponse} and HTTP response
     */
    listAffiliateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAffiliatesResponse;
      return this.apiClient.callApi(
        '/v2/affiliates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Affiliates
     * Retrieves a list of Affiliates
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are: - (String) `affiliate_name` - (String) `contact_id` - (String) `status` - (String) `code` 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `id` - `create_time` - `name` - `status` - `code`  One of the following directions: - `asc` - `desc` 
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListAffiliatesResponse}
     */
    listAffiliate(opts) {
      return this.listAffiliateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Affiliate Commission Programs
     * Retrieves a list of Affiliate Commission Programs
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are: - (String) `name` - (String) `affiliate_id` 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `name` - `date_created`  One of the following directions: - `asc` - `desc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListAffiliateCommissionProgramsResponse} and HTTP response
     */
    listAffiliateCommissionProgramsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAffiliateCommissionProgramsResponse;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Affiliate Commission Programs
     * Retrieves a list of Affiliate Commission Programs
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are: - (String) `name` - (String) `affiliate_id` 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `name` - `date_created`  One of the following directions: - `asc` - `desc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListAffiliateCommissionProgramsResponse}
     */
    listAffiliateCommissionPrograms(opts) {
      return this.listAffiliateCommissionProgramsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Affiliate Links
     * Retrieves a list of Affiliate Links
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are: - (String) `name` - (String) `affiliate_id` 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `name` - `date_created`  One of the following directions: - `asc` - `desc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListAffiliateLinksResponse} and HTTP response
     */
    listAffiliateLinksWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAffiliateLinksResponse;
      return this.apiClient.callApi(
        '/v2/affiliates/redirects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Affiliate Links
     * Retrieves a list of Affiliate Links
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are: - (String) `name` - (String) `affiliate_id` 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `name` - `date_created`  One of the following directions: - `asc` - `desc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListAffiliateLinksResponse}
     */
    listAffiliateLinks(opts) {
      return this.listAffiliateLinksWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Affiliate Payments
     * Retrieves a list of affiliate payments
     * @param {String} affiliateId affiliate_id
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are: - (String) `since_time` - (String) `until_time` You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=since_time%3D%3D2024-09-17T-15:50+00` - `filter=until_time%3D%3D2024-09-17T-15:50+00` 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `create_time` - `pay_date` - `pay_amount`  One of the following directions: - `asc` - `desc` 
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListAffiliatePaymentsResponse} and HTTP response
     */
    listAffiliatePaymentsWithHttpInfo(affiliateId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'affiliateId' is set
      if (affiliateId === undefined || affiliateId === null) {
        throw new Error("Missing the required parameter 'affiliateId' when calling listAffiliatePayments");
      }

      let pathParams = {
        'affiliate_id': affiliateId
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAffiliatePaymentsResponse;
      return this.apiClient.callApi(
        '/v2/affiliates/{affiliate_id}/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Affiliate Payments
     * Retrieves a list of affiliate payments
     * @param {String} affiliateId affiliate_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are: - (String) `since_time` - (String) `until_time` You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=since_time%3D%3D2024-09-17T-15:50+00` - `filter=until_time%3D%3D2024-09-17T-15:50+00` 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `create_time` - `pay_date` - `pay_amount`  One of the following directions: - `asc` - `desc` 
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListAffiliatePaymentsResponse}
     */
    listAffiliatePayments(affiliateId, opts) {
      return this.listAffiliatePaymentsWithHttpInfo(affiliateId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Affiliate Summaries
     * Retrieves a list of Affiliate Summaries
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are: - (List[String]) `affiliate_ids` - (String) `since_time` - (String) `until_time` You will need to apply the `==` operator to check the equality of one of the filters with your searched  word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples:  - `filter=since_time%3D%3D2024-09-17T-15:50+00`  - `filter=until_time%3D%3D2024-09-17T-15:50+00`  - `filter=affiliate_ids%3D%3D123,456,789` 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `affiliate_id` - `amount_earned` - `balance` - `clawbacks`  One of the following directions: - `asc` - `desc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListAffiliateSummariesResponse} and HTTP response
     */
    listSummariesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAffiliateSummariesResponse;
      return this.apiClient.callApi(
        '/v2/affiliates/summaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Affiliate Summaries
     * Retrieves a list of Affiliate Summaries
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are: - (List[String]) `affiliate_ids` - (String) `since_time` - (String) `until_time` You will need to apply the `==` operator to check the equality of one of the filters with your searched  word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples:  - `filter=since_time%3D%3D2024-09-17T-15:50+00`  - `filter=until_time%3D%3D2024-09-17T-15:50+00`  - `filter=affiliate_ids%3D%3D123,456,789` 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `affiliate_id` - `amount_earned` - `balance` - `clawbacks`  One of the following directions: - `asc` - `desc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListAffiliateSummariesResponse}
     */
    listSummaries(opts) {
      return this.listSummariesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove an Affiliate from a Commission Program
     * Removes an Affiliate from a Commission Program
     * @param {String} id id
     * @param {module:keap.core.v2/model/AffiliateRemoveFromProgramRequest} affiliateRemoveFromProgramRequest removeFromProgramRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeAffiliateFromProgramWithHttpInfo(id, affiliateRemoveFromProgramRequest) {
      let postBody = affiliateRemoveFromProgramRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeAffiliateFromProgram");
      }
      // verify the required parameter 'affiliateRemoveFromProgramRequest' is set
      if (affiliateRemoveFromProgramRequest === undefined || affiliateRemoveFromProgramRequest === null) {
        throw new Error("Missing the required parameter 'affiliateRemoveFromProgramRequest' when calling removeAffiliateFromProgram");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/affiliates/{id}:removeFromProgram', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove an Affiliate from a Commission Program
     * Removes an Affiliate from a Commission Program
     * @param {String} id id
     * @param {module:keap.core.v2/model/AffiliateRemoveFromProgramRequest} affiliateRemoveFromProgramRequest removeFromProgramRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeAffiliateFromProgram(id, affiliateRemoveFromProgramRequest) {
      return this.removeAffiliateFromProgramWithHttpInfo(id, affiliateRemoveFromProgramRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a Product from a Commission Program
     * Removes a Product from a Commission Program
     * @param {String} commissionId commission_id
     * @param {module:keap.core.v2/model/DeleteProgramCommissionRequest} deleteProgramCommissionRequest deleteProgramCommissionRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeProductCommissionFromCommissionsWithHttpInfo(commissionId, deleteProgramCommissionRequest) {
      let postBody = deleteProgramCommissionRequest;
      // verify the required parameter 'commissionId' is set
      if (commissionId === undefined || commissionId === null) {
        throw new Error("Missing the required parameter 'commissionId' when calling removeProductCommissionFromCommissions");
      }
      // verify the required parameter 'deleteProgramCommissionRequest' is set
      if (deleteProgramCommissionRequest === undefined || deleteProgramCommissionRequest === null) {
        throw new Error("Missing the required parameter 'deleteProgramCommissionRequest' when calling removeProductCommissionFromCommissions");
      }

      let pathParams = {
        'commission_id': commissionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms/{commission_id}:removeProductCommission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a Product from a Commission Program
     * Removes a Product from a Commission Program
     * @param {String} commissionId commission_id
     * @param {module:keap.core.v2/model/DeleteProgramCommissionRequest} deleteProgramCommissionRequest deleteProgramCommissionRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeProductCommissionFromCommissions(commissionId, deleteProgramCommissionRequest) {
      return this.removeProductCommissionFromCommissionsWithHttpInfo(commissionId, deleteProgramCommissionRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a Subscription from a Commission Program
     * Removes a Subscription from a Commission Program
     * @param {String} commissionId commission_id
     * @param {module:keap.core.v2/model/DeleteSubscriptionPlanCommissionRequest} deleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeSubscriptionPlanCommissionFromCommissionsWithHttpInfo(commissionId, deleteSubscriptionPlanCommissionRequest) {
      let postBody = deleteSubscriptionPlanCommissionRequest;
      // verify the required parameter 'commissionId' is set
      if (commissionId === undefined || commissionId === null) {
        throw new Error("Missing the required parameter 'commissionId' when calling removeSubscriptionPlanCommissionFromCommissions");
      }
      // verify the required parameter 'deleteSubscriptionPlanCommissionRequest' is set
      if (deleteSubscriptionPlanCommissionRequest === undefined || deleteSubscriptionPlanCommissionRequest === null) {
        throw new Error("Missing the required parameter 'deleteSubscriptionPlanCommissionRequest' when calling removeSubscriptionPlanCommissionFromCommissions");
      }

      let pathParams = {
        'commission_id': commissionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms/{commission_id}:removeSubscriptionCommission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a Subscription from a Commission Program
     * Removes a Subscription from a Commission Program
     * @param {String} commissionId commission_id
     * @param {module:keap.core.v2/model/DeleteSubscriptionPlanCommissionRequest} deleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeSubscriptionPlanCommissionFromCommissions(commissionId, deleteSubscriptionPlanCommissionRequest) {
      return this.removeSubscriptionPlanCommissionFromCommissionsWithHttpInfo(commissionId, deleteSubscriptionPlanCommissionRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an Affiliate
     * Updates a single Affiliate
     * @param {String} id id
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/UpdateAffiliateRequest} [updateAffiliateRequest] Request to update an affiliate
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/RestAffiliate} and HTTP response
     */
    updateAffiliateWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['updateAffiliateRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAffiliate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestAffiliate;
      return this.apiClient.callApi(
        '/v2/affiliates/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an Affiliate
     * Updates a single Affiliate
     * @param {String} id id
     * @param {Object} opts Optional parameters
     * @param {module:keap.core.v2/model/UpdateAffiliateRequest} opts.updateAffiliateRequest Request to update an affiliate
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/RestAffiliate}
     */
    updateAffiliate(id, opts) {
      return this.updateAffiliateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Custom Field
     * Updates a custom field of the specified type and options to the Affiliate object.
     * @param {String} customFieldId custom_field_id
     * @param {module:keap.core.v2/model/UpdateCustomFieldMetaDataRequest} updateCustomFieldMetaDataRequest request
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/CustomFieldMetaData} and HTTP response
     */
    updateAffiliateCustomFieldWithHttpInfo(customFieldId, updateCustomFieldMetaDataRequest, opts) {
      opts = opts || {};
      let postBody = updateCustomFieldMetaDataRequest;
      // verify the required parameter 'customFieldId' is set
      if (customFieldId === undefined || customFieldId === null) {
        throw new Error("Missing the required parameter 'customFieldId' when calling updateAffiliateCustomField");
      }
      // verify the required parameter 'updateCustomFieldMetaDataRequest' is set
      if (updateCustomFieldMetaDataRequest === undefined || updateCustomFieldMetaDataRequest === null) {
        throw new Error("Missing the required parameter 'updateCustomFieldMetaDataRequest' when calling updateAffiliateCustomField");
      }

      let pathParams = {
        'custom_field_id': customFieldId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomFieldMetaData;
      return this.apiClient.callApi(
        '/v2/affiliates/model/customFields/{custom_field_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Custom Field
     * Updates a custom field of the specified type and options to the Affiliate object.
     * @param {String} customFieldId custom_field_id
     * @param {module:keap.core.v2/model/UpdateCustomFieldMetaDataRequest} updateCustomFieldMetaDataRequest request
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/CustomFieldMetaData}
     */
    updateAffiliateCustomField(customFieldId, updateCustomFieldMetaDataRequest, opts) {
      return this.updateAffiliateCustomFieldWithHttpInfo(customFieldId, updateCustomFieldMetaDataRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an Affiliate Commission Program
     * Updates the properties of an Affiliate Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @param {module:keap.core.v2/model/UpdateCommissionProgramRequest} updateCommissionProgramRequest updateCommissionProgramRequest
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/AffiliateCommissionProgramResponse} and HTTP response
     */
    updateCommissionProgramWithHttpInfo(commissionProgramId, updateCommissionProgramRequest, opts) {
      opts = opts || {};
      let postBody = updateCommissionProgramRequest;
      // verify the required parameter 'commissionProgramId' is set
      if (commissionProgramId === undefined || commissionProgramId === null) {
        throw new Error("Missing the required parameter 'commissionProgramId' when calling updateCommissionProgram");
      }
      // verify the required parameter 'updateCommissionProgramRequest' is set
      if (updateCommissionProgramRequest === undefined || updateCommissionProgramRequest === null) {
        throw new Error("Missing the required parameter 'updateCommissionProgramRequest' when calling updateCommissionProgram");
      }

      let pathParams = {
        'commission_program_id': commissionProgramId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AffiliateCommissionProgramResponse;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms/{commission_program_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an Affiliate Commission Program
     * Updates the properties of an Affiliate Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @param {module:keap.core.v2/model/UpdateCommissionProgramRequest} updateCommissionProgramRequest updateCommissionProgramRequest
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/AffiliateCommissionProgramResponse}
     */
    updateCommissionProgram(commissionProgramId, updateCommissionProgramRequest, opts) {
      return this.updateCommissionProgramWithHttpInfo(commissionProgramId, updateCommissionProgramRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Default Commission Program
     * Updates a Default Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [updateMask] update_mask
     * @param {module:keap.core.v2/model/UpdateDefaultCommissionProgramRequest} [updateDefaultCommissionProgramRequest] Values of the default Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/SetDefaultCommissionProgramResponse} and HTTP response
     */
    updateDefaultCommissionProgramWithHttpInfo(commissionProgramId, opts) {
      opts = opts || {};
      let postBody = opts['updateDefaultCommissionProgramRequest'];
      // verify the required parameter 'commissionProgramId' is set
      if (commissionProgramId === undefined || commissionProgramId === null) {
        throw new Error("Missing the required parameter 'commissionProgramId' when calling updateDefaultCommissionProgram");
      }

      let pathParams = {
        'commission_program_id': commissionProgramId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetDefaultCommissionProgramResponse;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms/defaultCommissionPrograms/{commission_program_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Default Commission Program
     * Updates a Default Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.updateMask update_mask
     * @param {module:keap.core.v2/model/UpdateDefaultCommissionProgramRequest} opts.updateDefaultCommissionProgramRequest Values of the default Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/SetDefaultCommissionProgramResponse}
     */
    updateDefaultCommissionProgram(commissionProgramId, opts) {
      return this.updateDefaultCommissionProgramWithHttpInfo(commissionProgramId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Product Commission Program
     * Updates a Product Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [updateMask] update_mask
     * @param {module:keap.core.v2/model/UpdateProductCommissionProgramRequest} [updateProductCommissionProgramRequest] Values of the product Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ProductCommissionProgram} and HTTP response
     */
    updateProductCommissionProgramWithHttpInfo(commissionProgramId, opts) {
      opts = opts || {};
      let postBody = opts['updateProductCommissionProgramRequest'];
      // verify the required parameter 'commissionProgramId' is set
      if (commissionProgramId === undefined || commissionProgramId === null) {
        throw new Error("Missing the required parameter 'commissionProgramId' when calling updateProductCommissionProgram");
      }

      let pathParams = {
        'commission_program_id': commissionProgramId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductCommissionProgram;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms/productCommissionPrograms/{commission_program_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Product Commission Program
     * Updates a Product Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.updateMask update_mask
     * @param {module:keap.core.v2/model/UpdateProductCommissionProgramRequest} opts.updateProductCommissionProgramRequest Values of the product Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ProductCommissionProgram}
     */
    updateProductCommissionProgram(commissionProgramId, opts) {
      return this.updateProductCommissionProgramWithHttpInfo(commissionProgramId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an Affiliate Link
     * Updates an Affiliate Link
     * @param {String} redirectId redirect_id
     * @param {module:keap.core.v2/model/CreateOrUpdateAffiliateLinkRequest} createOrUpdateAffiliateLinkRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/AffiliateLink} and HTTP response
     */
    updateRedirectLinkWithHttpInfo(redirectId, createOrUpdateAffiliateLinkRequest) {
      let postBody = createOrUpdateAffiliateLinkRequest;
      // verify the required parameter 'redirectId' is set
      if (redirectId === undefined || redirectId === null) {
        throw new Error("Missing the required parameter 'redirectId' when calling updateRedirectLink");
      }
      // verify the required parameter 'createOrUpdateAffiliateLinkRequest' is set
      if (createOrUpdateAffiliateLinkRequest === undefined || createOrUpdateAffiliateLinkRequest === null) {
        throw new Error("Missing the required parameter 'createOrUpdateAffiliateLinkRequest' when calling updateRedirectLink");
      }

      let pathParams = {
        'redirect_id': redirectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AffiliateLink;
      return this.apiClient.callApi(
        '/v2/affiliates/redirects/{redirect_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an Affiliate Link
     * Updates an Affiliate Link
     * @param {String} redirectId redirect_id
     * @param {module:keap.core.v2/model/CreateOrUpdateAffiliateLinkRequest} createOrUpdateAffiliateLinkRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/AffiliateLink}
     */
    updateRedirectLink(redirectId, createOrUpdateAffiliateLinkRequest) {
      return this.updateRedirectLinkWithHttpInfo(redirectId, createOrUpdateAffiliateLinkRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Subscription Commission Program
     * Updates a Subscription Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [updateMask] update_mask
     * @param {module:keap.core.v2/model/UpdateSubscriptionCommissionProgramRequest} [updateSubscriptionCommissionProgramRequest] Values of the subscription Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/SubscriptionCommissionProgram} and HTTP response
     */
    updateSubscriptionCommissionProgramWithHttpInfo(commissionProgramId, opts) {
      opts = opts || {};
      let postBody = opts['updateSubscriptionCommissionProgramRequest'];
      // verify the required parameter 'commissionProgramId' is set
      if (commissionProgramId === undefined || commissionProgramId === null) {
        throw new Error("Missing the required parameter 'commissionProgramId' when calling updateSubscriptionCommissionProgram");
      }

      let pathParams = {
        'commission_program_id': commissionProgramId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionCommissionProgram;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms/subscriptionCommissionPrograms/{commission_program_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Subscription Commission Program
     * Updates a Subscription Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.updateMask update_mask
     * @param {module:keap.core.v2/model/UpdateSubscriptionCommissionProgramRequest} opts.updateSubscriptionCommissionProgramRequest Values of the subscription Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/SubscriptionCommissionProgram}
     */
    updateSubscriptionCommissionProgram(commissionProgramId, opts) {
      return this.updateSubscriptionCommissionProgramWithHttpInfo(commissionProgramId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
