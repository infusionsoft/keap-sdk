/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.800521
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddProductInterestRequest from '../model/AddProductInterestRequest';
import CreateProductInterestBundleRequest from '../model/CreateProductInterestBundleRequest';
import Error from '../model/Error';
import ListProductInterestBundleResponse from '../model/ListProductInterestBundleResponse';
import ProductInterest from '../model/ProductInterest';
import ProductInterestBundle from '../model/ProductInterestBundle';
import UpdateProductInterestBundleRequest from '../model/UpdateProductInterestBundleRequest';
import UpdateProductInterestRequest from '../model/UpdateProductInterestRequest';

/**
* ProductInterestBundles service.
* @module keap.core.v2/api/ProductInterestBundlesApi
*/
export default class ProductInterestBundlesApi {

    /**
    * Constructs a new ProductInterestBundlesApi. 
    * @alias module:keap.core.v2/api/ProductInterestBundlesApi
    * @class
    * @param {module:keap.core.v2/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:keap.core.v2/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a Product Interest in an existing Bundle
     * Creates a new Product Interest in an existing Bundle.
     * @param {String} id id
     * @param {module:keap.core.v2/model/AddProductInterestRequest} addProductInterestRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ProductInterest} and HTTP response
     */
    addProductInterestUsingPOSTWithHttpInfo(id, addProductInterestRequest) {
      let postBody = addProductInterestRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addProductInterestUsingPOST");
      }
      // verify the required parameter 'addProductInterestRequest' is set
      if (addProductInterestRequest === undefined || addProductInterestRequest === null) {
        throw new Error("Missing the required parameter 'addProductInterestRequest' when calling addProductInterestUsingPOST");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductInterest;
      return this.apiClient.callApi(
        '/v2/productInterestBundles/{id}/interests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Product Interest in an existing Bundle
     * Creates a new Product Interest in an existing Bundle.
     * @param {String} id id
     * @param {module:keap.core.v2/model/AddProductInterestRequest} addProductInterestRequest request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ProductInterest}
     */
    addProductInterestUsingPOST(id, addProductInterestRequest) {
      return this.addProductInterestUsingPOSTWithHttpInfo(id, addProductInterestRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Product Interest Bundle
     * Creates a new Product Interest Bundle.
     * @param {module:keap.core.v2/model/CreateProductInterestBundleRequest} createProductInterestBundleRequest createProductInterestBundleRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ProductInterestBundle} and HTTP response
     */
    createProductInterestBundleUsingPOSTWithHttpInfo(createProductInterestBundleRequest) {
      let postBody = createProductInterestBundleRequest;
      // verify the required parameter 'createProductInterestBundleRequest' is set
      if (createProductInterestBundleRequest === undefined || createProductInterestBundleRequest === null) {
        throw new Error("Missing the required parameter 'createProductInterestBundleRequest' when calling createProductInterestBundleUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductInterestBundle;
      return this.apiClient.callApi(
        '/v2/productInterestBundles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Product Interest Bundle
     * Creates a new Product Interest Bundle.
     * @param {module:keap.core.v2/model/CreateProductInterestBundleRequest} createProductInterestBundleRequest createProductInterestBundleRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ProductInterestBundle}
     */
    createProductInterestBundleUsingPOST(createProductInterestBundleRequest) {
      return this.createProductInterestBundleUsingPOSTWithHttpInfo(createProductInterestBundleRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Product Interest Bundle
     * Deletes an existing Product Interest Bundle.
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProductInterestBundleUsingDELETEWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProductInterestBundleUsingDELETE");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/productInterestBundles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Product Interest Bundle
     * Deletes an existing Product Interest Bundle.
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProductInterestBundleUsingDELETE(id) {
      return this.deleteProductInterestBundleUsingDELETEWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a Product Interest Bundle
     * Gets a single Product Interest Bundle.
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ProductInterestBundle} and HTTP response
     */
    getProductInterestBundleUsingGETWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductInterestBundleUsingGET");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductInterestBundle;
      return this.apiClient.callApi(
        '/v2/productInterestBundles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a Product Interest Bundle
     * Gets a single Product Interest Bundle.
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ProductInterestBundle}
     */
    getProductInterestBundleUsingGET(id) {
      return this.getProductInterestBundleUsingGETWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Product Interest Bundles
     * Retrieves a list of Product Interest Bundles
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are: - (String) `name` 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - `name`  One of the following directions: - `asc` - `desc` 
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ListProductInterestBundleResponse} and HTTP response
     */
    listProductInterestBundlesUsingGETWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProductInterestBundleResponse;
      return this.apiClient.callApi(
        '/v2/productInterestBundles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Product Interest Bundles
     * Retrieves a list of Product Interest Bundles
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are: - (String) `name` 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - `name`  One of the following directions: - `asc` - `desc` 
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ListProductInterestBundleResponse}
     */
    listProductInterestBundlesUsingGET(opts) {
      return this.listProductInterestBundlesUsingGETWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Product Interest from an existing Bundle
     * Deletes an existing Product Interest from an existing Bundle.
     * @param {String} id id
     * @param {String} interestId interest_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeProductInterestUsingDELETEWithHttpInfo(id, interestId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeProductInterestUsingDELETE");
      }
      // verify the required parameter 'interestId' is set
      if (interestId === undefined || interestId === null) {
        throw new Error("Missing the required parameter 'interestId' when calling removeProductInterestUsingDELETE");
      }

      let pathParams = {
        'id': id,
        'interest_id': interestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/productInterestBundles/{id}/interests/{interest_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Product Interest from an existing Bundle
     * Deletes an existing Product Interest from an existing Bundle.
     * @param {String} id id
     * @param {String} interestId interest_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeProductInterestUsingDELETE(id, interestId) {
      return this.removeProductInterestUsingDELETEWithHttpInfo(id, interestId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Product Interest Bundle
     * Updates an existing Product Interest Bundle.
     * @param {String} id id
     * @param {module:keap.core.v2/model/UpdateProductInterestBundleRequest} updateProductInterestBundleRequest updateProductInterestBundleRequest
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ProductInterestBundle} and HTTP response
     */
    updateProductInterestBundleUsingPATCHWithHttpInfo(id, updateProductInterestBundleRequest, opts) {
      opts = opts || {};
      let postBody = updateProductInterestBundleRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProductInterestBundleUsingPATCH");
      }
      // verify the required parameter 'updateProductInterestBundleRequest' is set
      if (updateProductInterestBundleRequest === undefined || updateProductInterestBundleRequest === null) {
        throw new Error("Missing the required parameter 'updateProductInterestBundleRequest' when calling updateProductInterestBundleUsingPATCH");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductInterestBundle;
      return this.apiClient.callApi(
        '/v2/productInterestBundles/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Product Interest Bundle
     * Updates an existing Product Interest Bundle.
     * @param {String} id id
     * @param {module:keap.core.v2/model/UpdateProductInterestBundleRequest} updateProductInterestBundleRequest updateProductInterestBundleRequest
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ProductInterestBundle}
     */
    updateProductInterestBundleUsingPATCH(id, updateProductInterestBundleRequest, opts) {
      return this.updateProductInterestBundleUsingPATCHWithHttpInfo(id, updateProductInterestBundleRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Product Interest in an existing Bundle
     * Updates an existing Product Interest in an existing Bundle.
     * @param {String} id id
     * @param {String} interestId interest_id
     * @param {module:keap.core.v2/model/UpdateProductInterestRequest} updateProductInterestRequest updateProductInterestRequest
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:keap.core.v2/model/ProductInterest} and HTTP response
     */
    updateProductInterestUsingPATCHWithHttpInfo(id, interestId, updateProductInterestRequest, opts) {
      opts = opts || {};
      let postBody = updateProductInterestRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProductInterestUsingPATCH");
      }
      // verify the required parameter 'interestId' is set
      if (interestId === undefined || interestId === null) {
        throw new Error("Missing the required parameter 'interestId' when calling updateProductInterestUsingPATCH");
      }
      // verify the required parameter 'updateProductInterestRequest' is set
      if (updateProductInterestRequest === undefined || updateProductInterestRequest === null) {
        throw new Error("Missing the required parameter 'updateProductInterestRequest' when calling updateProductInterestUsingPATCH");
      }

      let pathParams = {
        'id': id,
        'interest_id': interestId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductInterest;
      return this.apiClient.callApi(
        '/v2/productInterestBundles/{id}/interests/{interest_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Product Interest in an existing Bundle
     * Updates an existing Product Interest in an existing Bundle.
     * @param {String} id id
     * @param {String} interestId interest_id
     * @param {module:keap.core.v2/model/UpdateProductInterestRequest} updateProductInterestRequest updateProductInterestRequest
     * @param {Object} opts Optional parameters
     * @param {Array.<module:keap.core.v2/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:keap.core.v2/model/ProductInterest}
     */
    updateProductInterestUsingPATCH(id, interestId, updateProductInterestRequest, opts) {
      return this.updateProductInterestUsingPATCHWithHttpInfo(id, interestId, updateProductInterestRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
