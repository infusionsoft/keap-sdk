/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.809589
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PipelineCustomFieldArrayPropertyType from './PipelineCustomFieldArrayPropertyType';
import PipelineCustomFieldModelPropertyTypeDiscriminator from './PipelineCustomFieldModelPropertyTypeDiscriminator';
import PipelineCustomFieldPrimitiveType from './PipelineCustomFieldPrimitiveType';
import PipelineCustomFieldRefPropertyType from './PipelineCustomFieldRefPropertyType';

/**
 * The PipelineCustomFieldType model module.
 * @module keap.core.v2/model/PipelineCustomFieldType
 */
class PipelineCustomFieldType {
    /**
     * Constructs a new <code>PipelineCustomFieldType</code>.
     * Class representing a custom field type.
     * @alias module:keap.core.v2/model/PipelineCustomFieldType
     * @param primitiveType {module:keap.core.v2/model/PipelineCustomFieldPrimitiveType} The base primitive type of the custom field. This field is required.
     * @param discriminator {module:keap.core.v2/model/PipelineCustomFieldModelPropertyTypeDiscriminator} The discriminator for the model property type. This field is required.
     */
    constructor(primitiveType, discriminator) { 
        
        PipelineCustomFieldType.initialize(this, primitiveType, discriminator);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, primitiveType, discriminator) { 
        obj['primitive_type'] = primitiveType;
        obj['discriminator'] = discriminator;
    }

    /**
     * Constructs a <code>PipelineCustomFieldType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:keap.core.v2/model/PipelineCustomFieldType} obj Optional instance to populate.
     * @return {module:keap.core.v2/model/PipelineCustomFieldType} The populated <code>PipelineCustomFieldType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PipelineCustomFieldType();

            if (data.hasOwnProperty('primitive_type')) {
                obj['primitive_type'] = ApiClient.convertToType(data['primitive_type'], PipelineCustomFieldPrimitiveType);
            }
            if (data.hasOwnProperty('discriminator')) {
                obj['discriminator'] = ApiClient.convertToType(data['discriminator'], PipelineCustomFieldModelPropertyTypeDiscriminator);
            }
            if (data.hasOwnProperty('array')) {
                obj['array'] = ApiClient.convertToType(data['array'], PipelineCustomFieldArrayPropertyType);
            }
            if (data.hasOwnProperty('ref')) {
                obj['ref'] = ApiClient.convertToType(data['ref'], PipelineCustomFieldRefPropertyType);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PipelineCustomFieldType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PipelineCustomFieldType</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PipelineCustomFieldType.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `array`
        if (data['array']) { // data not null
          PipelineCustomFieldArrayPropertyType.validateJSON(data['array']);
        }
        // validate the optional field `ref`
        if (data['ref']) { // data not null
          PipelineCustomFieldRefPropertyType.validateJSON(data['ref']);
        }

        return true;
    }


}

PipelineCustomFieldType.RequiredProperties = ["primitive_type", "discriminator"];

/**
 * The base primitive type of the custom field. This field is required.
 * @member {module:keap.core.v2/model/PipelineCustomFieldPrimitiveType} primitive_type
 */
PipelineCustomFieldType.prototype['primitive_type'] = undefined;

/**
 * The discriminator for the model property type. This field is required.
 * @member {module:keap.core.v2/model/PipelineCustomFieldModelPropertyTypeDiscriminator} discriminator
 */
PipelineCustomFieldType.prototype['discriminator'] = undefined;

/**
 * The array property type of the custom field. This field is optional.
 * @member {module:keap.core.v2/model/PipelineCustomFieldArrayPropertyType} array
 */
PipelineCustomFieldType.prototype['array'] = undefined;

/**
 * The reference property type of the custom field. This field is optional.
 * @member {module:keap.core.v2/model/PipelineCustomFieldRefPropertyType} ref
 */
PipelineCustomFieldType.prototype['ref'] = undefined;






export default PipelineCustomFieldType;
