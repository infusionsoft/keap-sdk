/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.812056
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LogicalDate from './LogicalDate';

/**
 * The DateExpression model module.
 * @module keap.core.v2/model/DateExpression
 */
class DateExpression {
    /**
     * Constructs a new <code>DateExpression</code>.
     * @alias module:keap.core.v2/model/DateExpression
     * @param query {String} 
     * @param parseStart {Number} Where in the expression this date exists (start)
     * @param parseEnd {Number} Where in the expression this date exists
     * @param dateInferred {Boolean} Whether the date portion of the results has been inferred (and can be ignored)
     * @param timeInferred {Boolean} Whether the time portion of the results has been inferred (and can be ignored)
     * @param result {module:keap.core.v2/model/LogicalDate} 
     * @param recurring {Boolean} Whether the results are recurring
     * @param recurseUntil {module:keap.core.v2/model/LogicalDate} If recurring, when the recurrence ends
     */
    constructor(query, parseStart, parseEnd, dateInferred, timeInferred, result, recurring, recurseUntil) { 
        
        DateExpression.initialize(this, query, parseStart, parseEnd, dateInferred, timeInferred, result, recurring, recurseUntil);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, query, parseStart, parseEnd, dateInferred, timeInferred, result, recurring, recurseUntil) { 
        obj['query'] = query;
        obj['parse_start'] = parseStart;
        obj['parse_end'] = parseEnd;
        obj['date_inferred'] = dateInferred;
        obj['time_inferred'] = timeInferred;
        obj['result'] = result;
        obj['recurring'] = recurring;
        obj['recurse_until'] = recurseUntil;
    }

    /**
     * Constructs a <code>DateExpression</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:keap.core.v2/model/DateExpression} obj Optional instance to populate.
     * @return {module:keap.core.v2/model/DateExpression} The populated <code>DateExpression</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DateExpression();

            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('parse_start')) {
                obj['parse_start'] = ApiClient.convertToType(data['parse_start'], 'Number');
            }
            if (data.hasOwnProperty('parse_end')) {
                obj['parse_end'] = ApiClient.convertToType(data['parse_end'], 'Number');
            }
            if (data.hasOwnProperty('date_inferred')) {
                obj['date_inferred'] = ApiClient.convertToType(data['date_inferred'], 'Boolean');
            }
            if (data.hasOwnProperty('time_inferred')) {
                obj['time_inferred'] = ApiClient.convertToType(data['time_inferred'], 'Boolean');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], LogicalDate);
            }
            if (data.hasOwnProperty('recurring')) {
                obj['recurring'] = ApiClient.convertToType(data['recurring'], 'Boolean');
            }
            if (data.hasOwnProperty('recurse_until')) {
                obj['recurse_until'] = ApiClient.convertToType(data['recurse_until'], LogicalDate);
            }
            if (data.hasOwnProperty('complete_match')) {
                obj['complete_match'] = ApiClient.convertToType(data['complete_match'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DateExpression</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DateExpression</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DateExpression.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // validate the optional field `result`
        if (data['result']) { // data not null
          LogicalDate.validateJSON(data['result']);
        }
        // validate the optional field `recurse_until`
        if (data['recurse_until']) { // data not null
          LogicalDate.validateJSON(data['recurse_until']);
        }

        return true;
    }


}

DateExpression.RequiredProperties = ["query", "parse_start", "parse_end", "date_inferred", "time_inferred", "result", "recurring", "recurse_until"];

/**
 * @member {String} query
 */
DateExpression.prototype['query'] = undefined;

/**
 * Where in the expression this date exists (start)
 * @member {Number} parse_start
 */
DateExpression.prototype['parse_start'] = undefined;

/**
 * Where in the expression this date exists
 * @member {Number} parse_end
 */
DateExpression.prototype['parse_end'] = undefined;

/**
 * Whether the date portion of the results has been inferred (and can be ignored)
 * @member {Boolean} date_inferred
 */
DateExpression.prototype['date_inferred'] = undefined;

/**
 * Whether the time portion of the results has been inferred (and can be ignored)
 * @member {Boolean} time_inferred
 */
DateExpression.prototype['time_inferred'] = undefined;

/**
 * @member {module:keap.core.v2/model/LogicalDate} result
 */
DateExpression.prototype['result'] = undefined;

/**
 * Whether the results are recurring
 * @member {Boolean} recurring
 */
DateExpression.prototype['recurring'] = undefined;

/**
 * If recurring, when the recurrence ends
 * @member {module:keap.core.v2/model/LogicalDate} recurse_until
 */
DateExpression.prototype['recurse_until'] = undefined;

/**
 * @member {Boolean} complete_match
 */
DateExpression.prototype['complete_match'] = undefined;






export default DateExpression;
