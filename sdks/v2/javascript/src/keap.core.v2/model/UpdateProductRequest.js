/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.865894-hf-202510091441
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateProductRequest model module.
 * @module keap.core.v2/model/UpdateProductRequest
 */
class UpdateProductRequest {
    /**
     * Constructs a new <code>UpdateProductRequest</code>.
     * @alias module:keap.core.v2/model/UpdateProductRequest
     */
    constructor() { 
        
        UpdateProductRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateProductRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:keap.core.v2/model/UpdateProductRequest} obj Optional instance to populate.
     * @return {module:keap.core.v2/model/UpdateProductRequest} The populated <code>UpdateProductRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateProductRequest();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('city_taxable')) {
                obj['city_taxable'] = ApiClient.convertToType(data['city_taxable'], 'Boolean');
            }
            if (data.hasOwnProperty('country_taxable')) {
                obj['country_taxable'] = ApiClient.convertToType(data['country_taxable'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('email_for_inventory_notifications')) {
                obj['email_for_inventory_notifications'] = ApiClient.convertToType(data['email_for_inventory_notifications'], 'String');
            }
            if (data.hasOwnProperty('inventory_limit')) {
                obj['inventory_limit'] = ApiClient.convertToType(data['inventory_limit'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('out_of_stock_enabled')) {
                obj['out_of_stock_enabled'] = ApiClient.convertToType(data['out_of_stock_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('shippable')) {
                obj['shippable'] = ApiClient.convertToType(data['shippable'], 'Boolean');
            }
            if (data.hasOwnProperty('short_description')) {
                obj['short_description'] = ApiClient.convertToType(data['short_description'], 'String');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('state_taxable')) {
                obj['state_taxable'] = ApiClient.convertToType(data['state_taxable'], 'Boolean');
            }
            if (data.hasOwnProperty('storefront_hidden')) {
                obj['storefront_hidden'] = ApiClient.convertToType(data['storefront_hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('subscription_only')) {
                obj['subscription_only'] = ApiClient.convertToType(data['subscription_only'], 'Boolean');
            }
            if (data.hasOwnProperty('taxable')) {
                obj['taxable'] = ApiClient.convertToType(data['taxable'], 'Boolean');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateProductRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateProductRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['email_for_inventory_notifications'] && !(typeof data['email_for_inventory_notifications'] === 'string' || data['email_for_inventory_notifications'] instanceof String)) {
            throw new Error("Expected the field `email_for_inventory_notifications` to be a primitive type in the JSON string but got " + data['email_for_inventory_notifications']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['short_description'] && !(typeof data['short_description'] === 'string' || data['short_description'] instanceof String)) {
            throw new Error("Expected the field `short_description` to be a primitive type in the JSON string but got " + data['short_description']);
        }
        // ensure the json data is a string
        if (data['sku'] && !(typeof data['sku'] === 'string' || data['sku'] instanceof String)) {
            throw new Error("Expected the field `sku` to be a primitive type in the JSON string but got " + data['sku']);
        }

        return true;
    }


}



/**
 * True means active, False means inactive
 * @member {Boolean} active
 */
UpdateProductRequest.prototype['active'] = undefined;

/**
 * If city-based taxes should be applied to this product
 * @member {Boolean} city_taxable
 */
UpdateProductRequest.prototype['city_taxable'] = undefined;

/**
 * If country-based taxes should be applied to this product
 * @member {Boolean} country_taxable
 */
UpdateProductRequest.prototype['country_taxable'] = undefined;

/**
 * Product long description
 * @member {String} description
 */
UpdateProductRequest.prototype['description'] = undefined;

/**
 * The email address for notifications about inventory
 * @member {String} email_for_inventory_notifications
 */
UpdateProductRequest.prototype['email_for_inventory_notifications'] = undefined;

/**
 * The inventory limit for this product. Must be greater than or equal to 0.
 * @member {Number} inventory_limit
 */
UpdateProductRequest.prototype['inventory_limit'] = undefined;

/**
 * Product name
 * @member {String} name
 */
UpdateProductRequest.prototype['name'] = undefined;

/**
 * The flag to enable out of stock inventory
 * @member {Boolean} out_of_stock_enabled
 */
UpdateProductRequest.prototype['out_of_stock_enabled'] = undefined;

/**
 * The product price. The value is in the currencyâ€™s smallest unit. e.g. $12.50 is 1250. Must be greater than or equal to 0.
 * @member {Number} price
 */
UpdateProductRequest.prototype['price'] = undefined;

/**
 * If the product requires shipping
 * @member {Boolean} shippable
 */
UpdateProductRequest.prototype['shippable'] = undefined;

/**
 * Product short description
 * @member {String} short_description
 */
UpdateProductRequest.prototype['short_description'] = undefined;

/**
 * Product SKU
 * @member {String} sku
 */
UpdateProductRequest.prototype['sku'] = undefined;

/**
 * If state-based taxes should be applied to this product
 * @member {Boolean} state_taxable
 */
UpdateProductRequest.prototype['state_taxable'] = undefined;

/**
 * If the product should not be shown in the storefront
 * @member {Boolean} storefront_hidden
 */
UpdateProductRequest.prototype['storefront_hidden'] = undefined;

/**
 * If the product is a subscription-only product
 * @member {Boolean} subscription_only
 */
UpdateProductRequest.prototype['subscription_only'] = undefined;

/**
 * Whether or not the product should be taxed
 * @member {Boolean} taxable
 */
UpdateProductRequest.prototype['taxable'] = undefined;

/**
 * The product weight. Must be greater than or equal to 0.
 * @member {Number} weight
 */
UpdateProductRequest.prototype['weight'] = undefined;






export default UpdateProductRequest;
