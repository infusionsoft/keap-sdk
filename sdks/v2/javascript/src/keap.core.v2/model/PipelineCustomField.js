/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.812056
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PipelineCustomFieldDisplayOptions from './PipelineCustomFieldDisplayOptions';
import PipelineCustomFieldOptions from './PipelineCustomFieldOptions';
import PipelineCustomFieldPropertyValidator from './PipelineCustomFieldPropertyValidator';
import PipelineCustomFieldType from './PipelineCustomFieldType';

/**
 * The PipelineCustomField model module.
 * @module keap.core.v2/model/PipelineCustomField
 */
class PipelineCustomField {
    /**
     * Constructs a new <code>PipelineCustomField</code>.
     * Represents a custom field in the system. This class extends the BaseModel and includes various properties related to custom fields.
     * @alias module:keap.core.v2/model/PipelineCustomField
     * @param id {String} The identifier of the custom field.
     * @param defaultValue {Object} The default value of the custom field. This field is optional and must be a valid Object.
     */
    constructor(id, defaultValue) { 
        
        PipelineCustomField.initialize(this, id, defaultValue);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, defaultValue) { 
        obj['id'] = id;
        obj['default_value'] = defaultValue;
    }

    /**
     * Constructs a <code>PipelineCustomField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:keap.core.v2/model/PipelineCustomField} obj Optional instance to populate.
     * @return {module:keap.core.v2/model/PipelineCustomField} The populated <code>PipelineCustomField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PipelineCustomField();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], PipelineCustomFieldType);
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('helper_text')) {
                obj['helper_text'] = ApiClient.convertToType(data['helper_text'], 'String');
            }
            if (data.hasOwnProperty('default_value')) {
                obj['default_value'] = ApiClient.convertToType(data['default_value'], Object);
            }
            if (data.hasOwnProperty('validators')) {
                obj['validators'] = ApiClient.convertToType(data['validators'], [PipelineCustomFieldPropertyValidator]);
            }
            if (data.hasOwnProperty('display_options')) {
                obj['display_options'] = ApiClient.convertToType(data['display_options'], PipelineCustomFieldDisplayOptions);
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], PipelineCustomFieldOptions);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PipelineCustomField</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PipelineCustomField</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PipelineCustomField.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          PipelineCustomFieldType.validateJSON(data['type']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['helper_text'] && !(typeof data['helper_text'] === 'string' || data['helper_text'] instanceof String)) {
            throw new Error("Expected the field `helper_text` to be a primitive type in the JSON string but got " + data['helper_text']);
        }
        if (data['validators']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['validators'])) {
                throw new Error("Expected the field `validators` to be an array in the JSON data but got " + data['validators']);
            }
            // validate the optional field `validators` (array)
            for (const item of data['validators']) {
                PipelineCustomFieldPropertyValidator.validateJSON(item);
            };
        }
        // validate the optional field `display_options`
        if (data['display_options']) { // data not null
          PipelineCustomFieldDisplayOptions.validateJSON(data['display_options']);
        }
        // validate the optional field `options`
        if (data['options']) { // data not null
          PipelineCustomFieldOptions.validateJSON(data['options']);
        }

        return true;
    }


}

PipelineCustomField.RequiredProperties = ["id", "default_value"];

/**
 * The identifier of the custom field.
 * @member {String} id
 */
PipelineCustomField.prototype['id'] = undefined;

/**
 * The name of the custom field. This field is optional.
 * @member {String} name
 */
PipelineCustomField.prototype['name'] = undefined;

/**
 * The type of the custom field. This field is optional and must be a valid PipelineCustomFieldType.
 * @member {module:keap.core.v2/model/PipelineCustomFieldType} type
 */
PipelineCustomField.prototype['type'] = undefined;

/**
 * The label of the custom field. This field is optional.
 * @member {String} label
 */
PipelineCustomField.prototype['label'] = undefined;

/**
 * The description of the custom field. This field is optional.
 * @member {String} description
 */
PipelineCustomField.prototype['description'] = undefined;

/**
 * The helper text for the custom field. This field is optional and is serialized to JSON as \"helper_text\".
 * @member {String} helper_text
 */
PipelineCustomField.prototype['helper_text'] = undefined;

/**
 * The default value of the custom field. This field is optional and must be a valid Object.
 * @member {Object} default_value
 */
PipelineCustomField.prototype['default_value'] = undefined;

/**
 * The list of validators for the custom field. This field is optional and must be a list of valid PipelineCustomFieldPropertyValidator.
 * @member {Array.<module:keap.core.v2/model/PipelineCustomFieldPropertyValidator>} validators
 */
PipelineCustomField.prototype['validators'] = undefined;

/**
 * The display options for the custom field. This field is optional and must be a valid DisplayOptions.
 * @member {module:keap.core.v2/model/PipelineCustomFieldDisplayOptions} display_options
 */
PipelineCustomField.prototype['display_options'] = undefined;

/**
 * The options for the custom field. This field is optional and must be a valid PipelineCustomFieldOptions.
 * @member {module:keap.core.v2/model/PipelineCustomFieldOptions} options
 */
PipelineCustomField.prototype['options'] = undefined;






export default PipelineCustomField;
