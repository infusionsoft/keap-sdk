/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.843039-hf-202508121547
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CountryCodes model module.
 * @module keap.core.v2/model/CountryCodes
 */
class CountryCodes {
    /**
     * Constructs a new <code>CountryCodes</code>.
     * @alias module:keap.core.v2/model/CountryCodes
     */
    constructor() { 
        
        CountryCodes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CountryCodes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:keap.core.v2/model/CountryCodes} obj Optional instance to populate.
     * @return {module:keap.core.v2/model/CountryCodes} The populated <code>CountryCodes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CountryCodes();

            if (data.hasOwnProperty('alpha2')) {
                obj['alpha2'] = ApiClient.convertToType(data['alpha2'], 'String');
            }
            if (data.hasOwnProperty('alpha3')) {
                obj['alpha3'] = ApiClient.convertToType(data['alpha3'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CountryCodes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CountryCodes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alpha2'] && !(typeof data['alpha2'] === 'string' || data['alpha2'] instanceof String)) {
            throw new Error("Expected the field `alpha2` to be a primitive type in the JSON string but got " + data['alpha2']);
        }
        // ensure the json data is a string
        if (data['alpha3'] && !(typeof data['alpha3'] === 'string' || data['alpha3'] instanceof String)) {
            throw new Error("Expected the field `alpha3` to be a primitive type in the JSON string but got " + data['alpha3']);
        }

        return true;
    }


}



/**
 * @member {String} alpha2
 */
CountryCodes.prototype['alpha2'] = undefined;

/**
 * @member {String} alpha3
 */
CountryCodes.prototype['alpha3'] = undefined;






export default CountryCodes;
