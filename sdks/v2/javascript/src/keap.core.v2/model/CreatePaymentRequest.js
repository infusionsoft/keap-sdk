/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.852640
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreatePaymentRequest model module.
 * @module keap.core.v2/model/CreatePaymentRequest
 */
class CreatePaymentRequest {
    /**
     * Constructs a new <code>CreatePaymentRequest</code>.
     * @alias module:keap.core.v2/model/CreatePaymentRequest
     */
    constructor() { 
        
        CreatePaymentRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreatePaymentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:keap.core.v2/model/CreatePaymentRequest} obj Optional instance to populate.
     * @return {module:keap.core.v2/model/CreatePaymentRequest} The populated <code>CreatePaymentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreatePaymentRequest();

            if (data.hasOwnProperty('apply_to_commissions')) {
                obj['apply_to_commissions'] = ApiClient.convertToType(data['apply_to_commissions'], 'Boolean');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('payment_amount')) {
                obj['payment_amount'] = ApiClient.convertToType(data['payment_amount'], 'Number');
            }
            if (data.hasOwnProperty('payment_method_id')) {
                obj['payment_method_id'] = ApiClient.convertToType(data['payment_method_id'], 'String');
            }
            if (data.hasOwnProperty('payment_method_type')) {
                obj['payment_method_type'] = ApiClient.convertToType(data['payment_method_type'], 'String');
            }
            if (data.hasOwnProperty('payment_time')) {
                obj['payment_time'] = ApiClient.convertToType(data['payment_time'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreatePaymentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreatePaymentRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['payment_method_id'] && !(typeof data['payment_method_id'] === 'string' || data['payment_method_id'] instanceof String)) {
            throw new Error("Expected the field `payment_method_id` to be a primitive type in the JSON string but got " + data['payment_method_id']);
        }
        // ensure the json data is a string
        if (data['payment_method_type'] && !(typeof data['payment_method_type'] === 'string' || data['payment_method_type'] instanceof String)) {
            throw new Error("Expected the field `payment_method_type` to be a primitive type in the JSON string but got " + data['payment_method_type']);
        }
        // ensure the json data is a string
        if (data['payment_time'] && !(typeof data['payment_time'] === 'string' || data['payment_time'] instanceof String)) {
            throw new Error("Expected the field `payment_time` to be a primitive type in the JSON string but got " + data['payment_time']);
        }

        return true;
    }


}



/**
 * Whether to apply this payment to commissions.
 * @member {Boolean} apply_to_commissions
 */
CreatePaymentRequest.prototype['apply_to_commissions'] = undefined;

/**
 * The notes for this payment.
 * @member {String} notes
 */
CreatePaymentRequest.prototype['notes'] = undefined;

/**
 * The amount to pay. Must not exceed the current balance of the order. Must be greater than 0 if charging with a payment_method_id
 * @member {Number} payment_amount
 */
CreatePaymentRequest.prototype['payment_amount'] = undefined;

/**
 * The payment method id to charge immediately against this order. Omit if you want to add a payment record instead.
 * @member {String} payment_method_id
 */
CreatePaymentRequest.prototype['payment_method_id'] = undefined;

/**
 * The manual payment method type for manually recording a payment. Value must match against the list of types defined under your application's Order Settings. Ignored if payment_method_id is provided.
 * @member {String} payment_method_type
 */
CreatePaymentRequest.prototype['payment_method_type'] = undefined;

/**
 * The date and time of payment. In ISO-8601 format (e.g. 2024-05-21T23:00:00Z)
 * @member {String} payment_time
 */
CreatePaymentRequest.prototype['payment_time'] = undefined;






export default CreatePaymentRequest;
