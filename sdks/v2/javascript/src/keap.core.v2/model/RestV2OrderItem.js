/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.812056
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CurrencyValue from './CurrencyValue';
import Discount from './Discount';
import OrderItemProduct from './OrderItemProduct';
import OrderItemTax from './OrderItemTax';
import RestSubscriptionPlan from './RestSubscriptionPlan';
import RestV2Subscription from './RestV2Subscription';

/**
 * The RestV2OrderItem model module.
 * @module keap.core.v2/model/RestV2OrderItem
 */
class RestV2OrderItem {
    /**
     * Constructs a new <code>RestV2OrderItem</code>.
     * @alias module:keap.core.v2/model/RestV2OrderItem
     */
    constructor() { 
        
        RestV2OrderItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RestV2OrderItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:keap.core.v2/model/RestV2OrderItem} obj Optional instance to populate.
     * @return {module:keap.core.v2/model/RestV2OrderItem} The populated <code>RestV2OrderItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RestV2OrderItem();

            if (data.hasOwnProperty('cost')) {
                obj['cost'] = CurrencyValue.constructFromObject(data['cost']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('discount')) {
                obj['discount'] = CurrencyValue.constructFromObject(data['discount']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('item_type')) {
                obj['item_type'] = ApiClient.convertToType(data['item_type'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('order_item_taxes')) {
                obj['order_item_taxes'] = ApiClient.convertToType(data['order_item_taxes'], [OrderItemTax]);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = CurrencyValue.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = OrderItemProduct.constructFromObject(data['product']);
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('special')) {
                obj['special'] = Discount.constructFromObject(data['special']);
            }
            if (data.hasOwnProperty('subscription')) {
                obj['subscription'] = RestV2Subscription.constructFromObject(data['subscription']);
            }
            if (data.hasOwnProperty('subscription_id')) {
                obj['subscription_id'] = ApiClient.convertToType(data['subscription_id'], 'String');
            }
            if (data.hasOwnProperty('subscription_plan')) {
                obj['subscription_plan'] = RestSubscriptionPlan.constructFromObject(data['subscription_plan']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RestV2OrderItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RestV2OrderItem</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cost`
        if (data['cost']) { // data not null
          CurrencyValue.validateJSON(data['cost']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `discount`
        if (data['discount']) { // data not null
          CurrencyValue.validateJSON(data['discount']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['item_type'] && !(typeof data['item_type'] === 'string' || data['item_type'] instanceof String)) {
            throw new Error("Expected the field `item_type` to be a primitive type in the JSON string but got " + data['item_type']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        if (data['order_item_taxes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['order_item_taxes'])) {
                throw new Error("Expected the field `order_item_taxes` to be an array in the JSON data but got " + data['order_item_taxes']);
            }
            // validate the optional field `order_item_taxes` (array)
            for (const item of data['order_item_taxes']) {
                OrderItemTax.validateJSON(item);
            };
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          CurrencyValue.validateJSON(data['price']);
        }
        // validate the optional field `product`
        if (data['product']) { // data not null
          OrderItemProduct.validateJSON(data['product']);
        }
        // validate the optional field `special`
        if (data['special']) { // data not null
          Discount.validateJSON(data['special']);
        }
        // validate the optional field `subscription`
        if (data['subscription']) { // data not null
          RestV2Subscription.validateJSON(data['subscription']);
        }
        // ensure the json data is a string
        if (data['subscription_id'] && !(typeof data['subscription_id'] === 'string' || data['subscription_id'] instanceof String)) {
            throw new Error("Expected the field `subscription_id` to be a primitive type in the JSON string but got " + data['subscription_id']);
        }
        // validate the optional field `subscription_plan`
        if (data['subscription_plan']) { // data not null
          RestSubscriptionPlan.validateJSON(data['subscription_plan']);
        }

        return true;
    }


}



/**
 * @member {module:keap.core.v2/model/CurrencyValue} cost
 */
RestV2OrderItem.prototype['cost'] = undefined;

/**
 * @member {String} description
 */
RestV2OrderItem.prototype['description'] = undefined;

/**
 * @member {module:keap.core.v2/model/CurrencyValue} discount
 */
RestV2OrderItem.prototype['discount'] = undefined;

/**
 * @member {String} id
 */
RestV2OrderItem.prototype['id'] = undefined;

/**
 * @member {module:keap.core.v2/model/RestV2OrderItem.ItemTypeEnum} item_type
 */
RestV2OrderItem.prototype['item_type'] = undefined;

/**
 * @member {String} name
 */
RestV2OrderItem.prototype['name'] = undefined;

/**
 * @member {String} notes
 */
RestV2OrderItem.prototype['notes'] = undefined;

/**
 * @member {Array.<module:keap.core.v2/model/OrderItemTax>} order_item_taxes
 */
RestV2OrderItem.prototype['order_item_taxes'] = undefined;

/**
 * @member {module:keap.core.v2/model/CurrencyValue} price
 */
RestV2OrderItem.prototype['price'] = undefined;

/**
 * @member {module:keap.core.v2/model/OrderItemProduct} product
 */
RestV2OrderItem.prototype['product'] = undefined;

/**
 * @member {Number} quantity
 */
RestV2OrderItem.prototype['quantity'] = undefined;

/**
 * @member {module:keap.core.v2/model/Discount} special
 */
RestV2OrderItem.prototype['special'] = undefined;

/**
 * @member {module:keap.core.v2/model/RestV2Subscription} subscription
 */
RestV2OrderItem.prototype['subscription'] = undefined;

/**
 * @member {String} subscription_id
 */
RestV2OrderItem.prototype['subscription_id'] = undefined;

/**
 * @member {module:keap.core.v2/model/RestSubscriptionPlan} subscription_plan
 */
RestV2OrderItem.prototype['subscription_plan'] = undefined;





/**
 * Allowed values for the <code>item_type</code> property.
 * @enum {String}
 * @readonly
 */
RestV2OrderItem['ItemTypeEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "SHIPPING"
     * @const
     */
    "SHIPPING": "SHIPPING",

    /**
     * value: "TAX"
     * @const
     */
    "TAX": "TAX",

    /**
     * value: "SERVICE"
     * @const
     */
    "SERVICE": "SERVICE",

    /**
     * value: "PRODUCT"
     * @const
     */
    "PRODUCT": "PRODUCT",

    /**
     * value: "UPSELL"
     * @const
     */
    "UPSELL": "UPSELL",

    /**
     * value: "FINANCE_CHARGE"
     * @const
     */
    "FINANCE_CHARGE": "FINANCE_CHARGE",

    /**
     * value: "DISCOUNT"
     * @const
     */
    "DISCOUNT": "DISCOUNT",

    /**
     * value: "PROGRAM"
     * @const
     */
    "PROGRAM": "PROGRAM",

    /**
     * value: "SUBSCRIPTION"
     * @const
     */
    "SUBSCRIPTION": "SUBSCRIPTION",

    /**
     * value: "DISCOUNT_FREE_TRIAL"
     * @const
     */
    "DISCOUNT_FREE_TRIAL": "DISCOUNT_FREE_TRIAL",

    /**
     * value: "DISCOUNT_ORDER_TOTAL"
     * @const
     */
    "DISCOUNT_ORDER_TOTAL": "DISCOUNT_ORDER_TOTAL",

    /**
     * value: "DISCOUNT_PRODUCT"
     * @const
     */
    "DISCOUNT_PRODUCT": "DISCOUNT_PRODUCT",

    /**
     * value: "DISCOUNT_PRODUCT_CATEGORY"
     * @const
     */
    "DISCOUNT_PRODUCT_CATEGORY": "DISCOUNT_PRODUCT_CATEGORY",

    /**
     * value: "DISCOUNT_SHIPPING"
     * @const
     */
    "DISCOUNT_SHIPPING": "DISCOUNT_SHIPPING",

    /**
     * value: "TIP"
     * @const
     */
    "TIP": "TIP",

    /**
     * value: "OTHER"
     * @const
     */
    "OTHER": "OTHER",

    /**
     * value: "unknown_default_open_api"
     * @const
     */
    "unknown_default_open_api": "unknown_default_open_api"
};


export default RestV2OrderItem;
