/*
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.844359
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keap.core.sdk.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


/**
 * RestAffiliatePayment
 */
@JsonPropertyOrder({
  RestAffiliatePayment.JSON_PROPERTY_CREATE_TIME,
  RestAffiliatePayment.JSON_PROPERTY_ID,
  RestAffiliatePayment.JSON_PROPERTY_PAY_AMOUNT,
  RestAffiliatePayment.JSON_PROPERTY_PAY_DATE,
  RestAffiliatePayment.JSON_PROPERTY_PAY_NOTES,
  RestAffiliatePayment.JSON_PROPERTY_PAY_TYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class RestAffiliatePayment implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_CREATE_TIME = "create_time";
  @jakarta.annotation.Nullable  private String createTime;

  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nullable  private String id;

  public static final String JSON_PROPERTY_PAY_AMOUNT = "pay_amount";
  @jakarta.annotation.Nullable  private Double payAmount;

  public static final String JSON_PROPERTY_PAY_DATE = "pay_date";
  @jakarta.annotation.Nullable  private String payDate;

  public static final String JSON_PROPERTY_PAY_NOTES = "pay_notes";
  @jakarta.annotation.Nullable  private String payNotes;

  /**
   * Gets or Sets payType
   */
  public enum PayTypeEnum {
    CASH(String.valueOf("CASH")),
    
    CHECK(String.valueOf("CHECK")),
    
    CREDIT_CARD(String.valueOf("CREDIT_CARD")),
    
    CREDIT_CARD_MANUAL(String.valueOf("CREDIT_CARD_MANUAL")),
    
    MONEY_ORDER(String.valueOf("MONEY_ORDER")),
    
    ADJUSTMENT(String.valueOf("ADJUSTMENT")),
    
    CREDIT(String.valueOf("CREDIT")),
    
    REFUND(String.valueOf("REFUND")),
    
    UNKNOWN_COULD_NOT_DESERIALIZE(String.valueOf("unknown_default_open_api"));

    private String value;

    PayTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PayTypeEnum fromValue(String value) {
      for (PayTypeEnum b : PayTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_COULD_NOT_DESERIALIZE;
    }
  }
  public static final String JSON_PROPERTY_PAY_TYPE = "pay_type";
  @jakarta.annotation.Nullable  private PayTypeEnum payType;

  public RestAffiliatePayment() { 
  }

  public RestAffiliatePayment createTime(@jakarta.annotation.Nullable String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Get createTime
   * @return createTime
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CREATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCreateTime() {
    return createTime;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateTime(@jakarta.annotation.Nullable String createTime) {
    this.createTime = createTime;
  }


  public RestAffiliatePayment id(@jakarta.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(@jakarta.annotation.Nullable String id) {
    this.id = id;
  }


  public RestAffiliatePayment payAmount(@jakarta.annotation.Nullable Double payAmount) {
    this.payAmount = payAmount;
    return this;
  }

  /**
   * Get payAmount
   * @return payAmount
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PAY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getPayAmount() {
    return payAmount;
  }


  @JsonProperty(JSON_PROPERTY_PAY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPayAmount(@jakarta.annotation.Nullable Double payAmount) {
    this.payAmount = payAmount;
  }


  public RestAffiliatePayment payDate(@jakarta.annotation.Nullable String payDate) {
    this.payDate = payDate;
    return this;
  }

  /**
   * Get payDate
   * @return payDate
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PAY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPayDate() {
    return payDate;
  }


  @JsonProperty(JSON_PROPERTY_PAY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPayDate(@jakarta.annotation.Nullable String payDate) {
    this.payDate = payDate;
  }


  public RestAffiliatePayment payNotes(@jakarta.annotation.Nullable String payNotes) {
    this.payNotes = payNotes;
    return this;
  }

  /**
   * Get payNotes
   * @return payNotes
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PAY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPayNotes() {
    return payNotes;
  }


  @JsonProperty(JSON_PROPERTY_PAY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPayNotes(@jakarta.annotation.Nullable String payNotes) {
    this.payNotes = payNotes;
  }


  public RestAffiliatePayment payType(@jakarta.annotation.Nullable PayTypeEnum payType) {
    this.payType = payType;
    return this;
  }

  /**
   * Get payType
   * @return payType
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PAY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public PayTypeEnum getPayType() {
    return payType;
  }


  @JsonProperty(JSON_PROPERTY_PAY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPayType(@jakarta.annotation.Nullable PayTypeEnum payType) {
    this.payType = payType;
  }

  /**
   * Return true if this RestAffiliatePayment object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestAffiliatePayment restAffiliatePayment = (RestAffiliatePayment) o;
    return Objects.equals(this.createTime, restAffiliatePayment.createTime) &&
        Objects.equals(this.id, restAffiliatePayment.id) &&
        Objects.equals(this.payAmount, restAffiliatePayment.payAmount) &&
        Objects.equals(this.payDate, restAffiliatePayment.payDate) &&
        Objects.equals(this.payNotes, restAffiliatePayment.payNotes) &&
        Objects.equals(this.payType, restAffiliatePayment.payType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, id, payAmount, payDate, payNotes, payType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestAffiliatePayment {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    payAmount: ").append(toIndentedString(payAmount)).append("\n");
    sb.append("    payDate: ").append(toIndentedString(payDate)).append("\n");
    sb.append("    payNotes: ").append(toIndentedString(payNotes)).append("\n");
    sb.append("    payType: ").append(toIndentedString(payType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

    public static class Builder {
    
        private RestAffiliatePayment instance;
    
        public Builder() {
          this(new RestAffiliatePayment());
        }
    
        protected Builder(RestAffiliatePayment instance) {
          this.instance = instance;
        }
    
        public RestAffiliatePayment.Builder createTime(String createTime) {
              this.instance.createTime = createTime;
          return this;
        }
            public RestAffiliatePayment.Builder id(String id) {
              this.instance.id = id;
          return this;
        }
            public RestAffiliatePayment.Builder payAmount(Double payAmount) {
              this.instance.payAmount = payAmount;
          return this;
        }
            public RestAffiliatePayment.Builder payDate(String payDate) {
              this.instance.payDate = payDate;
          return this;
        }
            public RestAffiliatePayment.Builder payNotes(String payNotes) {
              this.instance.payNotes = payNotes;
          return this;
        }
            public RestAffiliatePayment.Builder payType(PayTypeEnum payType) {
              this.instance.payType = payType;
          return this;
        }
        
    
        /**
        * returns a built RestAffiliatePayment instance.
        *
        * The builder is not reusable.
        */
        public RestAffiliatePayment build() {
          try {
            return this.instance;
          } finally {
            // ensure that this.instance is not reused
            this.instance = null;
          }
        }
    
        @Override
        public String toString() {
          return getClass() + "=(" + instance + ")";
        }
      }
    
      /**
      * Create a builder with no initialized field.
      */
      public static RestAffiliatePayment.Builder builder() {
        return new RestAffiliatePayment.Builder();
      }
    
      /**
      * Create a builder with a shallow copy of this instance.
      */
      public RestAffiliatePayment.Builder toBuilder() {
        return new RestAffiliatePayment.Builder()
          .createTime(getCreateTime())
          .id(getId())
          .payAmount(getPayAmount())
          .payDate(getPayDate())
          .payNotes(getPayNotes())
          .payType(getPayType());
      }
}

