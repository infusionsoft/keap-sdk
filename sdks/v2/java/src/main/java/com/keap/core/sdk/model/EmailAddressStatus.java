/*
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.809589
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keap.core.sdk.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


/**
 * EmailAddressStatus
 */
@JsonPropertyOrder({
  EmailAddressStatus.JSON_PROPERTY_EMAIL,
  EmailAddressStatus.JSON_PROPERTY_OPTED_IN,
  EmailAddressStatus.JSON_PROPERTY_STATUS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class EmailAddressStatus implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_EMAIL = "email";
  @jakarta.annotation.Nonnull  private String email;

  public static final String JSON_PROPERTY_OPTED_IN = "opted_in";
  @jakarta.annotation.Nonnull  private Boolean optedIn;

  /**
   * Gets or Sets status
   */
  public enum StatusEnum {
    UNENGAGED_MARKETABLE(String.valueOf("UNENGAGED_MARKETABLE")),
    
    SINGLE_OPT_IN(String.valueOf("SINGLE_OPT_IN")),
    
    DOUBLE_OPT_IN(String.valueOf("DOUBLE_OPT_IN")),
    
    CONFIRMED(String.valueOf("CONFIRMED")),
    
    UNENGAGED_NON_MARKETABLE(String.valueOf("UNENGAGED_NON_MARKETABLE")),
    
    NON_MARKETABLE(String.valueOf("NON_MARKETABLE")),
    
    LOCKDOWN(String.valueOf("LOCKDOWN")),
    
    BOUNCE(String.valueOf("BOUNCE")),
    
    HARD_BOUNCE(String.valueOf("HARD_BOUNCE")),
    
    MANUAL(String.valueOf("MANUAL")),
    
    ADMIN(String.valueOf("ADMIN")),
    
    SYSTEM(String.valueOf("SYSTEM")),
    
    LIST_UNSUBSCRIBE(String.valueOf("LIST_UNSUBSCRIBE")),
    
    FEEDBACK(String.valueOf("FEEDBACK")),
    
    SPAM(String.valueOf("SPAM")),
    
    INVALID(String.valueOf("INVALID")),
    
    DEACTIVATED(String.valueOf("DEACTIVATED")),
    
    UNKNOWN_COULD_NOT_DESERIALIZE(String.valueOf("unknown_default_open_api"));

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_COULD_NOT_DESERIALIZE;
    }
  }
  public static final String JSON_PROPERTY_STATUS = "status";
  @jakarta.annotation.Nonnull  private StatusEnum status;

  public EmailAddressStatus() { 
  }

  public EmailAddressStatus email(@jakarta.annotation.Nonnull String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @jakarta.annotation.Nonnull  @NotNull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getEmail() {
    return email;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmail(@jakarta.annotation.Nonnull String email) {
    this.email = email;
  }


  public EmailAddressStatus optedIn(@jakarta.annotation.Nonnull Boolean optedIn) {
    this.optedIn = optedIn;
    return this;
  }

  /**
   * Get optedIn
   * @return optedIn
   */
  @jakarta.annotation.Nonnull  @NotNull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_OPTED_IN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getOptedIn() {
    return optedIn;
  }


  @JsonProperty(JSON_PROPERTY_OPTED_IN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOptedIn(@jakarta.annotation.Nonnull Boolean optedIn) {
    this.optedIn = optedIn;
  }


  public EmailAddressStatus status(@jakarta.annotation.Nonnull StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @jakarta.annotation.Nonnull  @NotNull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(@jakarta.annotation.Nonnull StatusEnum status) {
    this.status = status;
  }

  /**
   * Return true if this EmailAddressStatus object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailAddressStatus emailAddressStatus = (EmailAddressStatus) o;
    return Objects.equals(this.email, emailAddressStatus.email) &&
        Objects.equals(this.optedIn, emailAddressStatus.optedIn) &&
        Objects.equals(this.status, emailAddressStatus.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, optedIn, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailAddressStatus {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    optedIn: ").append(toIndentedString(optedIn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

    public static class Builder {
    
        private EmailAddressStatus instance;
    
        public Builder() {
          this(new EmailAddressStatus());
        }
    
        protected Builder(EmailAddressStatus instance) {
          this.instance = instance;
        }
    
        public EmailAddressStatus.Builder email(String email) {
              this.instance.email = email;
          return this;
        }
            public EmailAddressStatus.Builder optedIn(Boolean optedIn) {
              this.instance.optedIn = optedIn;
          return this;
        }
            public EmailAddressStatus.Builder status(StatusEnum status) {
              this.instance.status = status;
          return this;
        }
        
    
        /**
        * returns a built EmailAddressStatus instance.
        *
        * The builder is not reusable.
        */
        public EmailAddressStatus build() {
          try {
            return this.instance;
          } finally {
            // ensure that this.instance is not reused
            this.instance = null;
          }
        }
    
        @Override
        public String toString() {
          return getClass() + "=(" + instance + ")";
        }
      }
    
      /**
      * Create a builder with no initialized field.
      */
      public static EmailAddressStatus.Builder builder() {
        return new EmailAddressStatus.Builder();
      }
    
      /**
      * Create a builder with a shallow copy of this instance.
      */
      public EmailAddressStatus.Builder toBuilder() {
        return new EmailAddressStatus.Builder()
          .email(getEmail())
          .optedIn(getOptedIn())
          .status(getStatus());
      }
}

