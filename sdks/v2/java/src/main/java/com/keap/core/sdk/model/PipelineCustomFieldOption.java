/*
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.812056
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keap.core.sdk.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


/**
 * Class representing an option for a custom field.
 */
@Schema(description = "Class representing an option for a custom field.")
@JsonPropertyOrder({
  PipelineCustomFieldOption.JSON_PROPERTY_ID,
  PipelineCustomFieldOption.JSON_PROPERTY_TITLE,
  PipelineCustomFieldOption.JSON_PROPERTY_SUBTITLE,
  PipelineCustomFieldOption.JSON_PROPERTY_SORT_ORDER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class PipelineCustomFieldOption implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nonnull  private String id;

  public static final String JSON_PROPERTY_TITLE = "title";
  @jakarta.annotation.Nonnull  private String title;

  public static final String JSON_PROPERTY_SUBTITLE = "subtitle";
  @jakarta.annotation.Nonnull  private String subtitle;

  public static final String JSON_PROPERTY_SORT_ORDER = "sort_order";
  @jakarta.annotation.Nonnull  private Integer sortOrder;

  public PipelineCustomFieldOption() { 
  }

  public PipelineCustomFieldOption id(@jakarta.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * The identifier of the custom field option.
   * @return id
   */
  @jakarta.annotation.Nonnull  @NotNull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "The identifier of the custom field option.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@jakarta.annotation.Nonnull String id) {
    this.id = id;
  }


  public PipelineCustomFieldOption title(@jakarta.annotation.Nonnull String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the custom field option.
   * @return title
   */
  @jakarta.annotation.Nonnull  @NotNull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "The title of the custom field option.")
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getTitle() {
    return title;
  }


  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTitle(@jakarta.annotation.Nonnull String title) {
    this.title = title;
  }


  public PipelineCustomFieldOption subtitle(@jakarta.annotation.Nonnull String subtitle) {
    this.subtitle = subtitle;
    return this;
  }

  /**
   * The subtitle of the custom field option.
   * @return subtitle
   */
  @jakarta.annotation.Nonnull  @NotNull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "The subtitle of the custom field option.")
  @JsonProperty(JSON_PROPERTY_SUBTITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getSubtitle() {
    return subtitle;
  }


  @JsonProperty(JSON_PROPERTY_SUBTITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubtitle(@jakarta.annotation.Nonnull String subtitle) {
    this.subtitle = subtitle;
  }


  public PipelineCustomFieldOption sortOrder(@jakarta.annotation.Nonnull Integer sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * The sort order of the custom field option.
   * @return sortOrder
   */
  @jakarta.annotation.Nonnull  @NotNull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "The sort order of the custom field option.")
  @JsonProperty(JSON_PROPERTY_SORT_ORDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getSortOrder() {
    return sortOrder;
  }


  @JsonProperty(JSON_PROPERTY_SORT_ORDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSortOrder(@jakarta.annotation.Nonnull Integer sortOrder) {
    this.sortOrder = sortOrder;
  }

  /**
   * Return true if this PipelineCustomFieldOption object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelineCustomFieldOption pipelineCustomFieldOption = (PipelineCustomFieldOption) o;
    return Objects.equals(this.id, pipelineCustomFieldOption.id) &&
        Objects.equals(this.title, pipelineCustomFieldOption.title) &&
        Objects.equals(this.subtitle, pipelineCustomFieldOption.subtitle) &&
        Objects.equals(this.sortOrder, pipelineCustomFieldOption.sortOrder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, title, subtitle, sortOrder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelineCustomFieldOption {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    subtitle: ").append(toIndentedString(subtitle)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

    public static class Builder {
    
        private PipelineCustomFieldOption instance;
    
        public Builder() {
          this(new PipelineCustomFieldOption());
        }
    
        protected Builder(PipelineCustomFieldOption instance) {
          this.instance = instance;
        }
    
        public PipelineCustomFieldOption.Builder id(String id) {
              this.instance.id = id;
          return this;
        }
            public PipelineCustomFieldOption.Builder title(String title) {
              this.instance.title = title;
          return this;
        }
            public PipelineCustomFieldOption.Builder subtitle(String subtitle) {
              this.instance.subtitle = subtitle;
          return this;
        }
            public PipelineCustomFieldOption.Builder sortOrder(Integer sortOrder) {
              this.instance.sortOrder = sortOrder;
          return this;
        }
        
    
        /**
        * returns a built PipelineCustomFieldOption instance.
        *
        * The builder is not reusable.
        */
        public PipelineCustomFieldOption build() {
          try {
            return this.instance;
          } finally {
            // ensure that this.instance is not reused
            this.instance = null;
          }
        }
    
        @Override
        public String toString() {
          return getClass() + "=(" + instance + ")";
        }
      }
    
      /**
      * Create a builder with no initialized field.
      */
      public static PipelineCustomFieldOption.Builder builder() {
        return new PipelineCustomFieldOption.Builder();
      }
    
      /**
      * Create a builder with a shallow copy of this instance.
      */
      public PipelineCustomFieldOption.Builder toBuilder() {
        return new PipelineCustomFieldOption.Builder()
          .id(getId())
          .title(getTitle())
          .subtitle(getSubtitle())
          .sortOrder(getSortOrder());
      }
}

