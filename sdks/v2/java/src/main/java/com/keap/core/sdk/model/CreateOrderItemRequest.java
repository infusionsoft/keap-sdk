/*
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.861953
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keap.core.sdk.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


/**
 * CreateOrderItemRequest
 */
@JsonPropertyOrder({
  CreateOrderItemRequest.JSON_PROPERTY_COST_PER_UNIT,
  CreateOrderItemRequest.JSON_PROPERTY_DESCRIPTION,
  CreateOrderItemRequest.JSON_PROPERTY_ITEM_TYPE,
  CreateOrderItemRequest.JSON_PROPERTY_NAME,
  CreateOrderItemRequest.JSON_PROPERTY_NOTES,
  CreateOrderItemRequest.JSON_PROPERTY_PRICE_PER_UNIT,
  CreateOrderItemRequest.JSON_PROPERTY_PRODUCT_ID,
  CreateOrderItemRequest.JSON_PROPERTY_QUANTITY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class CreateOrderItemRequest implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_COST_PER_UNIT = "cost_per_unit";
  @jakarta.annotation.Nullable  private Double costPerUnit;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @jakarta.annotation.Nullable  private String description;

  /**
   * The type of this order item. For now only [PRODUCT] is supported. Will default to [PRODUCT] if omitted.
   */
  public enum ItemTypeEnum {
    UNKNOWN(String.valueOf("UNKNOWN")),
    
    SHIPPING(String.valueOf("SHIPPING")),
    
    TAX(String.valueOf("TAX")),
    
    SERVICE(String.valueOf("SERVICE")),
    
    PRODUCT(String.valueOf("PRODUCT")),
    
    UPSELL(String.valueOf("UPSELL")),
    
    FINANCE_CHARGE(String.valueOf("FINANCE_CHARGE")),
    
    DISCOUNT(String.valueOf("DISCOUNT")),
    
    PROGRAM(String.valueOf("PROGRAM")),
    
    SUBSCRIPTION(String.valueOf("SUBSCRIPTION")),
    
    DISCOUNT_FREE_TRIAL(String.valueOf("DISCOUNT_FREE_TRIAL")),
    
    DISCOUNT_ORDER_TOTAL(String.valueOf("DISCOUNT_ORDER_TOTAL")),
    
    DISCOUNT_PRODUCT(String.valueOf("DISCOUNT_PRODUCT")),
    
    DISCOUNT_PRODUCT_CATEGORY(String.valueOf("DISCOUNT_PRODUCT_CATEGORY")),
    
    DISCOUNT_SHIPPING(String.valueOf("DISCOUNT_SHIPPING")),
    
    TIP(String.valueOf("TIP")),
    
    OTHER(String.valueOf("OTHER")),
    
    UNKNOWN_COULD_NOT_DESERIALIZE(String.valueOf("unknown_default_open_api"));

    private String value;

    ItemTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ItemTypeEnum fromValue(String value) {
      for (ItemTypeEnum b : ItemTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_COULD_NOT_DESERIALIZE;
    }
  }
  public static final String JSON_PROPERTY_ITEM_TYPE = "item_type";
  @jakarta.annotation.Nullable  private ItemTypeEnum itemType;

  public static final String JSON_PROPERTY_NAME = "name";
  @jakarta.annotation.Nullable  private String name;

  public static final String JSON_PROPERTY_NOTES = "notes";
  @jakarta.annotation.Nullable  private String notes;

  public static final String JSON_PROPERTY_PRICE_PER_UNIT = "price_per_unit";
  @jakarta.annotation.Nullable  private Double pricePerUnit;

  public static final String JSON_PROPERTY_PRODUCT_ID = "product_id";
  @jakarta.annotation.Nonnull  private String productId;

  public static final String JSON_PROPERTY_QUANTITY = "quantity";
  @jakarta.annotation.Nonnull  private Integer quantity;

  public CreateOrderItemRequest() { 
  }

  public CreateOrderItemRequest costPerUnit(@jakarta.annotation.Nullable Double costPerUnit) {
    this.costPerUnit = costPerUnit;
    return this;
  }

  /**
   * The cost per unit. Must be greater than or equal to 0. If not specified, the product cost will be used.
   * @return costPerUnit
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The cost per unit. Must be greater than or equal to 0. If not specified, the product cost will be used.")
  @JsonProperty(JSON_PROPERTY_COST_PER_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getCostPerUnit() {
    return costPerUnit;
  }


  @JsonProperty(JSON_PROPERTY_COST_PER_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCostPerUnit(@jakarta.annotation.Nullable Double costPerUnit) {
    this.costPerUnit = costPerUnit;
  }


  public CreateOrderItemRequest description(@jakarta.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the order item. Must not be whitespace.
   * @return description
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The description of the order item. Must not be whitespace.")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@jakarta.annotation.Nullable String description) {
    this.description = description;
  }


  public CreateOrderItemRequest itemType(@jakarta.annotation.Nullable ItemTypeEnum itemType) {
    this.itemType = itemType;
    return this;
  }

  /**
   * The type of this order item. For now only [PRODUCT] is supported. Will default to [PRODUCT] if omitted.
   * @return itemType
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The type of this order item. For now only [PRODUCT] is supported. Will default to [PRODUCT] if omitted.")
  @JsonProperty(JSON_PROPERTY_ITEM_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ItemTypeEnum getItemType() {
    return itemType;
  }


  @JsonProperty(JSON_PROPERTY_ITEM_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setItemType(@jakarta.annotation.Nullable ItemTypeEnum itemType) {
    this.itemType = itemType;
  }


  public CreateOrderItemRequest name(@jakarta.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the order item. Must not be whitespace. If not specified, the product name will be used.
   * @return name
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The name of the order item. Must not be whitespace. If not specified, the product name will be used.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@jakarta.annotation.Nullable String name) {
    this.name = name;
  }


  public CreateOrderItemRequest notes(@jakarta.annotation.Nullable String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * The notes for the order item. Must not be whitespace.
   * @return notes
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The notes for the order item. Must not be whitespace.")
  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getNotes() {
    return notes;
  }


  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotes(@jakarta.annotation.Nullable String notes) {
    this.notes = notes;
  }


  public CreateOrderItemRequest pricePerUnit(@jakarta.annotation.Nullable Double pricePerUnit) {
    this.pricePerUnit = pricePerUnit;
    return this;
  }

  /**
   * The price per unit. Must be greater than or equal to 0. If not specified, the product price will be used.
   * @return pricePerUnit
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The price per unit. Must be greater than or equal to 0. If not specified, the product price will be used.")
  @JsonProperty(JSON_PROPERTY_PRICE_PER_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getPricePerUnit() {
    return pricePerUnit;
  }


  @JsonProperty(JSON_PROPERTY_PRICE_PER_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPricePerUnit(@jakarta.annotation.Nullable Double pricePerUnit) {
    this.pricePerUnit = pricePerUnit;
  }


  public CreateOrderItemRequest productId(@jakarta.annotation.Nonnull String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * The id of the product to be added to the order. Must be a valid product id.
   * @return productId
   */
  @jakarta.annotation.Nonnull  @NotNull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "The id of the product to be added to the order. Must be a valid product id.")
  @JsonProperty(JSON_PROPERTY_PRODUCT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getProductId() {
    return productId;
  }


  @JsonProperty(JSON_PROPERTY_PRODUCT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProductId(@jakarta.annotation.Nonnull String productId) {
    this.productId = productId;
  }


  public CreateOrderItemRequest quantity(@jakarta.annotation.Nonnull Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The quantity. Must be greater than or equal to 1.
   * @return quantity
   */
  @jakarta.annotation.Nonnull  @NotNull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "The quantity. Must be greater than or equal to 1.")
  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getQuantity() {
    return quantity;
  }


  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQuantity(@jakarta.annotation.Nonnull Integer quantity) {
    this.quantity = quantity;
  }

  /**
   * Return true if this CreateOrderItemRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateOrderItemRequest createOrderItemRequest = (CreateOrderItemRequest) o;
    return Objects.equals(this.costPerUnit, createOrderItemRequest.costPerUnit) &&
        Objects.equals(this.description, createOrderItemRequest.description) &&
        Objects.equals(this.itemType, createOrderItemRequest.itemType) &&
        Objects.equals(this.name, createOrderItemRequest.name) &&
        Objects.equals(this.notes, createOrderItemRequest.notes) &&
        Objects.equals(this.pricePerUnit, createOrderItemRequest.pricePerUnit) &&
        Objects.equals(this.productId, createOrderItemRequest.productId) &&
        Objects.equals(this.quantity, createOrderItemRequest.quantity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(costPerUnit, description, itemType, name, notes, pricePerUnit, productId, quantity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateOrderItemRequest {\n");
    sb.append("    costPerUnit: ").append(toIndentedString(costPerUnit)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    pricePerUnit: ").append(toIndentedString(pricePerUnit)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

    public static class Builder {
    
        private CreateOrderItemRequest instance;
    
        public Builder() {
          this(new CreateOrderItemRequest());
        }
    
        protected Builder(CreateOrderItemRequest instance) {
          this.instance = instance;
        }
    
        public CreateOrderItemRequest.Builder costPerUnit(Double costPerUnit) {
              this.instance.costPerUnit = costPerUnit;
          return this;
        }
            public CreateOrderItemRequest.Builder description(String description) {
              this.instance.description = description;
          return this;
        }
            public CreateOrderItemRequest.Builder itemType(ItemTypeEnum itemType) {
              this.instance.itemType = itemType;
          return this;
        }
            public CreateOrderItemRequest.Builder name(String name) {
              this.instance.name = name;
          return this;
        }
            public CreateOrderItemRequest.Builder notes(String notes) {
              this.instance.notes = notes;
          return this;
        }
            public CreateOrderItemRequest.Builder pricePerUnit(Double pricePerUnit) {
              this.instance.pricePerUnit = pricePerUnit;
          return this;
        }
            public CreateOrderItemRequest.Builder productId(String productId) {
              this.instance.productId = productId;
          return this;
        }
            public CreateOrderItemRequest.Builder quantity(Integer quantity) {
              this.instance.quantity = quantity;
          return this;
        }
        
    
        /**
        * returns a built CreateOrderItemRequest instance.
        *
        * The builder is not reusable.
        */
        public CreateOrderItemRequest build() {
          try {
            return this.instance;
          } finally {
            // ensure that this.instance is not reused
            this.instance = null;
          }
        }
    
        @Override
        public String toString() {
          return getClass() + "=(" + instance + ")";
        }
      }
    
      /**
      * Create a builder with no initialized field.
      */
      public static CreateOrderItemRequest.Builder builder() {
        return new CreateOrderItemRequest.Builder();
      }
    
      /**
      * Create a builder with a shallow copy of this instance.
      */
      public CreateOrderItemRequest.Builder toBuilder() {
        return new CreateOrderItemRequest.Builder()
          .costPerUnit(getCostPerUnit())
          .description(getDescription())
          .itemType(getItemType())
          .name(getName())
          .notes(getNotes())
          .pricePerUnit(getPricePerUnit())
          .productId(getProductId())
          .quantity(getQuantity());
      }
}

