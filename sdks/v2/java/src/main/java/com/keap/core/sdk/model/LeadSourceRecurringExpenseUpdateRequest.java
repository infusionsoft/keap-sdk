/*
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.812056
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keap.core.sdk.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


/**
 * LeadSourceRecurringExpenseUpdateRequest
 */
@JsonPropertyOrder({
  LeadSourceRecurringExpenseUpdateRequest.JSON_PROPERTY_AMOUNT,
  LeadSourceRecurringExpenseUpdateRequest.JSON_PROPERTY_END_TIME,
  LeadSourceRecurringExpenseUpdateRequest.JSON_PROPERTY_NOTES,
  LeadSourceRecurringExpenseUpdateRequest.JSON_PROPERTY_START_TIME,
  LeadSourceRecurringExpenseUpdateRequest.JSON_PROPERTY_TITLE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class LeadSourceRecurringExpenseUpdateRequest implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  @jakarta.annotation.Nullable  private Long amount;

  public static final String JSON_PROPERTY_END_TIME = "end_time";
  @jakarta.annotation.Nullable  private String endTime;

  public static final String JSON_PROPERTY_NOTES = "notes";
  @jakarta.annotation.Nullable  private String notes;

  public static final String JSON_PROPERTY_START_TIME = "start_time";
  @jakarta.annotation.Nullable  private String startTime;

  public static final String JSON_PROPERTY_TITLE = "title";
  @jakarta.annotation.Nullable  private String title;

  public LeadSourceRecurringExpenseUpdateRequest() { 
  }

  public LeadSourceRecurringExpenseUpdateRequest amount(@jakarta.annotation.Nullable Long amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The monthly cost of the lead source recurring expense.  The value should be in the smallest unit of currency for your currency locale.  For example, if your currency locale is USD, then the smallest unit of currency is  in cents, $225.50 would be provided in the request as 22550.
   * @return amount
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The monthly cost of the lead source recurring expense.  The value should be in the smallest unit of currency for your currency locale.  For example, if your currency locale is USD, then the smallest unit of currency is  in cents, $225.50 would be provided in the request as 22550.")
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(@jakarta.annotation.Nullable Long amount) {
    this.amount = amount;
  }


  public LeadSourceRecurringExpenseUpdateRequest endTime(@jakarta.annotation.Nullable String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The time the lead source recurring expense ends
   * @return endTime
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The time the lead source recurring expense ends")
  @JsonProperty(JSON_PROPERTY_END_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getEndTime() {
    return endTime;
  }


  @JsonProperty(JSON_PROPERTY_END_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndTime(@jakarta.annotation.Nullable String endTime) {
    this.endTime = endTime;
  }


  public LeadSourceRecurringExpenseUpdateRequest notes(@jakarta.annotation.Nullable String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * The notes for the lead source recurring expense
   * @return notes
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The notes for the lead source recurring expense")
  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getNotes() {
    return notes;
  }


  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotes(@jakarta.annotation.Nullable String notes) {
    this.notes = notes;
  }


  public LeadSourceRecurringExpenseUpdateRequest startTime(@jakarta.annotation.Nullable String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time the lead source recurring expense starts
   * @return startTime
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The time the lead source recurring expense starts")
  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getStartTime() {
    return startTime;
  }


  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartTime(@jakarta.annotation.Nullable String startTime) {
    this.startTime = startTime;
  }


  public LeadSourceRecurringExpenseUpdateRequest title(@jakarta.annotation.Nullable String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the lead source recurring expense
   * @return title
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The title of the lead source recurring expense")
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getTitle() {
    return title;
  }


  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTitle(@jakarta.annotation.Nullable String title) {
    this.title = title;
  }

  /**
   * Return true if this LeadSourceRecurringExpenseUpdateRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeadSourceRecurringExpenseUpdateRequest leadSourceRecurringExpenseUpdateRequest = (LeadSourceRecurringExpenseUpdateRequest) o;
    return Objects.equals(this.amount, leadSourceRecurringExpenseUpdateRequest.amount) &&
        Objects.equals(this.endTime, leadSourceRecurringExpenseUpdateRequest.endTime) &&
        Objects.equals(this.notes, leadSourceRecurringExpenseUpdateRequest.notes) &&
        Objects.equals(this.startTime, leadSourceRecurringExpenseUpdateRequest.startTime) &&
        Objects.equals(this.title, leadSourceRecurringExpenseUpdateRequest.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, endTime, notes, startTime, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeadSourceRecurringExpenseUpdateRequest {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

    public static class Builder {
    
        private LeadSourceRecurringExpenseUpdateRequest instance;
    
        public Builder() {
          this(new LeadSourceRecurringExpenseUpdateRequest());
        }
    
        protected Builder(LeadSourceRecurringExpenseUpdateRequest instance) {
          this.instance = instance;
        }
    
        public LeadSourceRecurringExpenseUpdateRequest.Builder amount(Long amount) {
              this.instance.amount = amount;
          return this;
        }
            public LeadSourceRecurringExpenseUpdateRequest.Builder endTime(String endTime) {
              this.instance.endTime = endTime;
          return this;
        }
            public LeadSourceRecurringExpenseUpdateRequest.Builder notes(String notes) {
              this.instance.notes = notes;
          return this;
        }
            public LeadSourceRecurringExpenseUpdateRequest.Builder startTime(String startTime) {
              this.instance.startTime = startTime;
          return this;
        }
            public LeadSourceRecurringExpenseUpdateRequest.Builder title(String title) {
              this.instance.title = title;
          return this;
        }
        
    
        /**
        * returns a built LeadSourceRecurringExpenseUpdateRequest instance.
        *
        * The builder is not reusable.
        */
        public LeadSourceRecurringExpenseUpdateRequest build() {
          try {
            return this.instance;
          } finally {
            // ensure that this.instance is not reused
            this.instance = null;
          }
        }
    
        @Override
        public String toString() {
          return getClass() + "=(" + instance + ")";
        }
      }
    
      /**
      * Create a builder with no initialized field.
      */
      public static LeadSourceRecurringExpenseUpdateRequest.Builder builder() {
        return new LeadSourceRecurringExpenseUpdateRequest.Builder();
      }
    
      /**
      * Create a builder with a shallow copy of this instance.
      */
      public LeadSourceRecurringExpenseUpdateRequest.Builder toBuilder() {
        return new LeadSourceRecurringExpenseUpdateRequest.Builder()
          .amount(getAmount())
          .endTime(getEndTime())
          .notes(getNotes())
          .startTime(getStartTime())
          .title(getTitle());
      }
}

