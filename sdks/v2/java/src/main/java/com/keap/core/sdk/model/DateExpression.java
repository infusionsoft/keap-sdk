/*
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.809589
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keap.core.sdk.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.keap.core.sdk.model.LogicalDate;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


/**
 * DateExpression
 */
@JsonPropertyOrder({
  DateExpression.JSON_PROPERTY_QUERY,
  DateExpression.JSON_PROPERTY_PARSE_START,
  DateExpression.JSON_PROPERTY_PARSE_END,
  DateExpression.JSON_PROPERTY_DATE_INFERRED,
  DateExpression.JSON_PROPERTY_TIME_INFERRED,
  DateExpression.JSON_PROPERTY_RESULT,
  DateExpression.JSON_PROPERTY_RECURRING,
  DateExpression.JSON_PROPERTY_RECURSE_UNTIL,
  DateExpression.JSON_PROPERTY_COMPLETE_MATCH
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class DateExpression implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_QUERY = "query";
  @jakarta.annotation.Nonnull  private String query;

  public static final String JSON_PROPERTY_PARSE_START = "parse_start";
  @jakarta.annotation.Nonnull  private Integer parseStart;

  public static final String JSON_PROPERTY_PARSE_END = "parse_end";
  @jakarta.annotation.Nonnull  private Integer parseEnd;

  public static final String JSON_PROPERTY_DATE_INFERRED = "date_inferred";
  @jakarta.annotation.Nonnull  private Boolean dateInferred;

  public static final String JSON_PROPERTY_TIME_INFERRED = "time_inferred";
  @jakarta.annotation.Nonnull  private Boolean timeInferred;

  public static final String JSON_PROPERTY_RESULT = "result";
  @jakarta.annotation.Nonnull  private LogicalDate result;

  public static final String JSON_PROPERTY_RECURRING = "recurring";
  @jakarta.annotation.Nonnull  private Boolean recurring;

  public static final String JSON_PROPERTY_RECURSE_UNTIL = "recurse_until";
  @jakarta.annotation.Nonnull  private LogicalDate recurseUntil;

  public static final String JSON_PROPERTY_COMPLETE_MATCH = "complete_match";
  @jakarta.annotation.Nullable  private Boolean completeMatch;

  public DateExpression() { 
  }

  public DateExpression query(@jakarta.annotation.Nonnull String query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @jakarta.annotation.Nonnull  @NotNull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_QUERY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getQuery() {
    return query;
  }


  @JsonProperty(JSON_PROPERTY_QUERY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQuery(@jakarta.annotation.Nonnull String query) {
    this.query = query;
  }


  public DateExpression parseStart(@jakarta.annotation.Nonnull Integer parseStart) {
    this.parseStart = parseStart;
    return this;
  }

  /**
   * Where in the expression this date exists (start)
   * @return parseStart
   */
  @jakarta.annotation.Nonnull  @NotNull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "Where in the expression this date exists (start)")
  @JsonProperty(JSON_PROPERTY_PARSE_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getParseStart() {
    return parseStart;
  }


  @JsonProperty(JSON_PROPERTY_PARSE_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setParseStart(@jakarta.annotation.Nonnull Integer parseStart) {
    this.parseStart = parseStart;
  }


  public DateExpression parseEnd(@jakarta.annotation.Nonnull Integer parseEnd) {
    this.parseEnd = parseEnd;
    return this;
  }

  /**
   * Where in the expression this date exists
   * @return parseEnd
   */
  @jakarta.annotation.Nonnull  @NotNull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "Where in the expression this date exists")
  @JsonProperty(JSON_PROPERTY_PARSE_END)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getParseEnd() {
    return parseEnd;
  }


  @JsonProperty(JSON_PROPERTY_PARSE_END)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setParseEnd(@jakarta.annotation.Nonnull Integer parseEnd) {
    this.parseEnd = parseEnd;
  }


  public DateExpression dateInferred(@jakarta.annotation.Nonnull Boolean dateInferred) {
    this.dateInferred = dateInferred;
    return this;
  }

  /**
   * Whether the date portion of the results has been inferred (and can be ignored)
   * @return dateInferred
   */
  @jakarta.annotation.Nonnull  @NotNull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "Whether the date portion of the results has been inferred (and can be ignored)")
  @JsonProperty(JSON_PROPERTY_DATE_INFERRED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getDateInferred() {
    return dateInferred;
  }


  @JsonProperty(JSON_PROPERTY_DATE_INFERRED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDateInferred(@jakarta.annotation.Nonnull Boolean dateInferred) {
    this.dateInferred = dateInferred;
  }


  public DateExpression timeInferred(@jakarta.annotation.Nonnull Boolean timeInferred) {
    this.timeInferred = timeInferred;
    return this;
  }

  /**
   * Whether the time portion of the results has been inferred (and can be ignored)
   * @return timeInferred
   */
  @jakarta.annotation.Nonnull  @NotNull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "Whether the time portion of the results has been inferred (and can be ignored)")
  @JsonProperty(JSON_PROPERTY_TIME_INFERRED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getTimeInferred() {
    return timeInferred;
  }


  @JsonProperty(JSON_PROPERTY_TIME_INFERRED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTimeInferred(@jakarta.annotation.Nonnull Boolean timeInferred) {
    this.timeInferred = timeInferred;
  }


  public DateExpression result(@jakarta.annotation.Nonnull LogicalDate result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @jakarta.annotation.Nonnull  @NotNull
  @Valid
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_RESULT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public LogicalDate getResult() {
    return result;
  }


  @JsonProperty(JSON_PROPERTY_RESULT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResult(@jakarta.annotation.Nonnull LogicalDate result) {
    this.result = result;
  }


  public DateExpression recurring(@jakarta.annotation.Nonnull Boolean recurring) {
    this.recurring = recurring;
    return this;
  }

  /**
   * Whether the results are recurring
   * @return recurring
   */
  @jakarta.annotation.Nonnull  @NotNull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "Whether the results are recurring")
  @JsonProperty(JSON_PROPERTY_RECURRING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getRecurring() {
    return recurring;
  }


  @JsonProperty(JSON_PROPERTY_RECURRING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRecurring(@jakarta.annotation.Nonnull Boolean recurring) {
    this.recurring = recurring;
  }


  public DateExpression recurseUntil(@jakarta.annotation.Nonnull LogicalDate recurseUntil) {
    this.recurseUntil = recurseUntil;
    return this;
  }

  /**
   * If recurring, when the recurrence ends
   * @return recurseUntil
   */
  @jakarta.annotation.Nonnull  @NotNull
  @Valid
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "If recurring, when the recurrence ends")
  @JsonProperty(JSON_PROPERTY_RECURSE_UNTIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public LogicalDate getRecurseUntil() {
    return recurseUntil;
  }


  @JsonProperty(JSON_PROPERTY_RECURSE_UNTIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRecurseUntil(@jakarta.annotation.Nonnull LogicalDate recurseUntil) {
    this.recurseUntil = recurseUntil;
  }


  public DateExpression completeMatch(@jakarta.annotation.Nullable Boolean completeMatch) {
    this.completeMatch = completeMatch;
    return this;
  }

  /**
   * Get completeMatch
   * @return completeMatch
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_COMPLETE_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getCompleteMatch() {
    return completeMatch;
  }


  @JsonProperty(JSON_PROPERTY_COMPLETE_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCompleteMatch(@jakarta.annotation.Nullable Boolean completeMatch) {
    this.completeMatch = completeMatch;
  }

  /**
   * Return true if this DateExpression object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DateExpression dateExpression = (DateExpression) o;
    return Objects.equals(this.query, dateExpression.query) &&
        Objects.equals(this.parseStart, dateExpression.parseStart) &&
        Objects.equals(this.parseEnd, dateExpression.parseEnd) &&
        Objects.equals(this.dateInferred, dateExpression.dateInferred) &&
        Objects.equals(this.timeInferred, dateExpression.timeInferred) &&
        Objects.equals(this.result, dateExpression.result) &&
        Objects.equals(this.recurring, dateExpression.recurring) &&
        Objects.equals(this.recurseUntil, dateExpression.recurseUntil) &&
        Objects.equals(this.completeMatch, dateExpression.completeMatch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(query, parseStart, parseEnd, dateInferred, timeInferred, result, recurring, recurseUntil, completeMatch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DateExpression {\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    parseStart: ").append(toIndentedString(parseStart)).append("\n");
    sb.append("    parseEnd: ").append(toIndentedString(parseEnd)).append("\n");
    sb.append("    dateInferred: ").append(toIndentedString(dateInferred)).append("\n");
    sb.append("    timeInferred: ").append(toIndentedString(timeInferred)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    recurring: ").append(toIndentedString(recurring)).append("\n");
    sb.append("    recurseUntil: ").append(toIndentedString(recurseUntil)).append("\n");
    sb.append("    completeMatch: ").append(toIndentedString(completeMatch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

    public static class Builder {
    
        private DateExpression instance;
    
        public Builder() {
          this(new DateExpression());
        }
    
        protected Builder(DateExpression instance) {
          this.instance = instance;
        }
    
        public DateExpression.Builder query(String query) {
              this.instance.query = query;
          return this;
        }
            public DateExpression.Builder parseStart(Integer parseStart) {
              this.instance.parseStart = parseStart;
          return this;
        }
            public DateExpression.Builder parseEnd(Integer parseEnd) {
              this.instance.parseEnd = parseEnd;
          return this;
        }
            public DateExpression.Builder dateInferred(Boolean dateInferred) {
              this.instance.dateInferred = dateInferred;
          return this;
        }
            public DateExpression.Builder timeInferred(Boolean timeInferred) {
              this.instance.timeInferred = timeInferred;
          return this;
        }
            public DateExpression.Builder result(LogicalDate result) {
              this.instance.result = result;
          return this;
        }
            public DateExpression.Builder recurring(Boolean recurring) {
              this.instance.recurring = recurring;
          return this;
        }
            public DateExpression.Builder recurseUntil(LogicalDate recurseUntil) {
              this.instance.recurseUntil = recurseUntil;
          return this;
        }
            public DateExpression.Builder completeMatch(Boolean completeMatch) {
              this.instance.completeMatch = completeMatch;
          return this;
        }
        
    
        /**
        * returns a built DateExpression instance.
        *
        * The builder is not reusable.
        */
        public DateExpression build() {
          try {
            return this.instance;
          } finally {
            // ensure that this.instance is not reused
            this.instance = null;
          }
        }
    
        @Override
        public String toString() {
          return getClass() + "=(" + instance + ")";
        }
      }
    
      /**
      * Create a builder with no initialized field.
      */
      public static DateExpression.Builder builder() {
        return new DateExpression.Builder();
      }
    
      /**
      * Create a builder with a shallow copy of this instance.
      */
      public DateExpression.Builder toBuilder() {
        return new DateExpression.Builder()
          .query(getQuery())
          .parseStart(getParseStart())
          .parseEnd(getParseEnd())
          .dateInferred(getDateInferred())
          .timeInferred(getTimeInferred())
          .result(getResult())
          .recurring(getRecurring())
          .recurseUntil(getRecurseUntil())
          .completeMatch(getCompleteMatch());
      }
}

