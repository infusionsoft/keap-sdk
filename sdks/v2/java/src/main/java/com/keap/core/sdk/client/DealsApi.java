/*
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.809589
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.keap.core.sdk.client;

import com.keap.core.sdk.ApiClient;
import com.keap.core.sdk.ApiException;
import com.keap.core.sdk.ApiResponse;
import com.keap.core.sdk.Pair;

import com.keap.core.sdk.model.BulkCreateDealNotesRequest;
import com.keap.core.sdk.model.BulkCreateDealNotesResponse;
import com.keap.core.sdk.model.CreateDealNoteRequest;
import com.keap.core.sdk.model.CreateDealRequest;
import com.keap.core.sdk.model.Deal;
import com.keap.core.sdk.model.DealListResponse;
import com.keap.core.sdk.model.DealNote;
import com.keap.core.sdk.model.DealNoteListResponse;
import com.keap.core.sdk.model.UpdateDealNoteRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

import java.util.function.Supplier;
import io.github.resilience4j.core.functions.CheckedSupplier;
import io.github.resilience4j.retry.Retry;


@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")public class DealsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  private final Supplier<String> accessTokenSupplier;

  public DealsApi() {
    this(new ApiClient());
  }

  public DealsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();

    this.accessTokenSupplier = apiClient.getAccessTokenSupplier();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Creates a new deal.
   * Creates a new deal.
   * @param createDealRequest the request body containing deal details (required)
   * @return Deal
   * @throws ApiException if fails to make API call
   */
  public Deal createDeal(CreateDealRequest createDealRequest) throws ApiException {
    ApiResponse<Deal> localVarResponse = createDealWithHttpInfo(createDealRequest);
    return localVarResponse.getData();
  }

  /**
   * Creates a new deal.
   * Creates a new deal.
   * @param createDealRequest the request body containing deal details (required)
   * @return ApiResponse&lt;Deal&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Deal> createDealWithHttpInfo(CreateDealRequest createDealRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDealRequestBuilder(createDealRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDeal", localVarResponse);
        }
        return new ApiResponse<Deal>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Deal>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDealRequestBuilder(CreateDealRequest createDealRequest) throws ApiException {
    // verify the required parameter 'createDealRequest' is set
    if (createDealRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDealRequest' when calling createDeal");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/deals";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDealRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Creates a new note for a specific deal.
   * Creates a new note for a specific deal.
   * @param id the deal ID to associate the new note with (required)
   * @param createDealNoteRequest the request body containing note details (required)
   * @return DealNote
   * @throws ApiException if fails to make API call
   */
  public DealNote createNote(String id, CreateDealNoteRequest createDealNoteRequest) throws ApiException {
    ApiResponse<DealNote> localVarResponse = createNoteWithHttpInfo(id, createDealNoteRequest);
    return localVarResponse.getData();
  }

  /**
   * Creates a new note for a specific deal.
   * Creates a new note for a specific deal.
   * @param id the deal ID to associate the new note with (required)
   * @param createDealNoteRequest the request body containing note details (required)
   * @return ApiResponse&lt;DealNote&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DealNote> createNoteWithHttpInfo(String id, CreateDealNoteRequest createDealNoteRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createNoteRequestBuilder(id, createDealNoteRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createNote", localVarResponse);
        }
        return new ApiResponse<DealNote>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DealNote>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createNoteRequestBuilder(String id, CreateDealNoteRequest createDealNoteRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling createNote");
    }
    // verify the required parameter 'createDealNoteRequest' is set
    if (createDealNoteRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDealNoteRequest' when calling createNote");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/deals/{id}/notes"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDealNoteRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Creates new notes in bulk.
   * Creates new notes in bulk.
   * @param bulkCreateDealNotesRequest the request body containing note details (required)
   * @return BulkCreateDealNotesResponse
   * @throws ApiException if fails to make API call
   */
  public BulkCreateDealNotesResponse createNotesBulk(BulkCreateDealNotesRequest bulkCreateDealNotesRequest) throws ApiException {
    ApiResponse<BulkCreateDealNotesResponse> localVarResponse = createNotesBulkWithHttpInfo(bulkCreateDealNotesRequest);
    return localVarResponse.getData();
  }

  /**
   * Creates new notes in bulk.
   * Creates new notes in bulk.
   * @param bulkCreateDealNotesRequest the request body containing note details (required)
   * @return ApiResponse&lt;BulkCreateDealNotesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BulkCreateDealNotesResponse> createNotesBulkWithHttpInfo(BulkCreateDealNotesRequest bulkCreateDealNotesRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createNotesBulkRequestBuilder(bulkCreateDealNotesRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createNotesBulk", localVarResponse);
        }
        return new ApiResponse<BulkCreateDealNotesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BulkCreateDealNotesResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createNotesBulkRequestBuilder(BulkCreateDealNotesRequest bulkCreateDealNotesRequest) throws ApiException {
    // verify the required parameter 'bulkCreateDealNotesRequest' is set
    if (bulkCreateDealNotesRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'bulkCreateDealNotesRequest' when calling createNotesBulk");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/deals/-/notes";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(bulkCreateDealNotesRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Deletes a specific deal note by its ID.
   * Deletes a specific deal note by its ID.
   * @param noteId the ID of the note to delete (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteNote(String noteId) throws ApiException {
    deleteNoteWithHttpInfo(noteId);
  }

  /**
   * Deletes a specific deal note by its ID.
   * Deletes a specific deal note by its ID.
   * @param noteId the ID of the note to delete (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteNoteWithHttpInfo(String noteId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteNoteRequestBuilder(noteId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteNote", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteNoteRequestBuilder(String noteId) throws ApiException {
    // verify the required parameter 'noteId' is set
    if (noteId == null) {
      throw new ApiException(400, "Missing the required parameter 'noteId' when calling deleteNote");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/deals/-/notes/{note_id}"
        .replace("{note_id}", ApiClient.urlEncode(noteId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieves a specific deal by its ID.
   * Retrieves a specific deal by its ID.
   * @param dealId the ID of the deal to retrieve (required)
   * @return Deal
   * @throws ApiException if fails to make API call
   */
  public Deal getDeal(String dealId) throws ApiException {
    ApiResponse<Deal> localVarResponse = getDealWithHttpInfo(dealId);
    return localVarResponse.getData();
  }

  /**
   * Retrieves a specific deal by its ID.
   * Retrieves a specific deal by its ID.
   * @param dealId the ID of the deal to retrieve (required)
   * @return ApiResponse&lt;Deal&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Deal> getDealWithHttpInfo(String dealId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDealRequestBuilder(dealId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDeal", localVarResponse);
        }
        return new ApiResponse<Deal>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Deal>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDealRequestBuilder(String dealId) throws ApiException {
    // verify the required parameter 'dealId' is set
    if (dealId == null) {
      throw new ApiException(400, "Missing the required parameter 'dealId' when calling getDeal");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/deals/{deal_id}"
        .replace("{deal_id}", ApiClient.urlEncode(dealId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieves a specific deal note by its ID.
   * Retrieves a specific deal note by its ID.
   * @param noteId the ID of the note to retrieve (required)
   * @return DealNote
   * @throws ApiException if fails to make API call
   */
  public DealNote getNote(String noteId) throws ApiException {
    ApiResponse<DealNote> localVarResponse = getNoteWithHttpInfo(noteId);
    return localVarResponse.getData();
  }

  /**
   * Retrieves a specific deal note by its ID.
   * Retrieves a specific deal note by its ID.
   * @param noteId the ID of the note to retrieve (required)
   * @return ApiResponse&lt;DealNote&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DealNote> getNoteWithHttpInfo(String noteId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getNoteRequestBuilder(noteId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getNote", localVarResponse);
        }
        return new ApiResponse<DealNote>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DealNote>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getNoteRequestBuilder(String noteId) throws ApiException {
    // verify the required parameter 'noteId' is set
    if (noteId == null) {
      throw new ApiException(400, "Missing the required parameter 'noteId' when calling getNote");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/deals/-/notes/{note_id}"
        .replace("{note_id}", ApiClient.urlEncode(noteId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Lists all deals associated with a specific contact.
   * Lists all deals associated with a specific contact.
   * @param contactId the contact ID to list deals for (required)
   * @param filter  (optional)
   * @param pageToken  (optional)
   * @param orderBy  (optional)
   * @param pageSize  (optional, default to 1000)
   * @return DealListResponse
   * @throws ApiException if fails to make API call
   */
  public DealListResponse listDeals(String contactId, String filter, String pageToken, String orderBy, Integer pageSize) throws ApiException {
    ApiResponse<DealListResponse> localVarResponse = listDealsWithHttpInfo(contactId, filter, pageToken, orderBy, pageSize);
    return localVarResponse.getData();
  }

  /**
   * Lists all deals associated with a specific contact.
   * Lists all deals associated with a specific contact.
   * @param contactId the contact ID to list deals for (required)
   * @param filter  (optional)
   * @param pageToken  (optional)
   * @param orderBy  (optional)
   * @param pageSize  (optional, default to 1000)
   * @return ApiResponse&lt;DealListResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DealListResponse> listDealsWithHttpInfo(String contactId, String filter, String pageToken, String orderBy, Integer pageSize) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listDealsRequestBuilder(contactId, filter, pageToken, orderBy, pageSize);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listDeals", localVarResponse);
        }
        return new ApiResponse<DealListResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DealListResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listDealsRequestBuilder(String contactId, String filter, String pageToken, String orderBy, Integer pageSize) throws ApiException {
    // verify the required parameter 'contactId' is set
    if (contactId == null) {
      throw new ApiException(400, "Missing the required parameter 'contactId' when calling listDeals");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/deals/-/contacts/{contact_id}"
        .replace("{contact_id}", ApiClient.urlEncode(contactId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Lists all notes associated with a specific deal.
   * Lists all notes associated with a specific deal.
   * @param id the deal ID to list notes for (required)
   * @param filter  (optional)
   * @param pageToken  (optional)
   * @param orderBy  (optional)
   * @param pageSize  (optional, default to 1000)
   * @return DealNoteListResponse
   * @throws ApiException if fails to make API call
   */
  public DealNoteListResponse listNotes(String id, String filter, String pageToken, String orderBy, Integer pageSize) throws ApiException {
    ApiResponse<DealNoteListResponse> localVarResponse = listNotesWithHttpInfo(id, filter, pageToken, orderBy, pageSize);
    return localVarResponse.getData();
  }

  /**
   * Lists all notes associated with a specific deal.
   * Lists all notes associated with a specific deal.
   * @param id the deal ID to list notes for (required)
   * @param filter  (optional)
   * @param pageToken  (optional)
   * @param orderBy  (optional)
   * @param pageSize  (optional, default to 1000)
   * @return ApiResponse&lt;DealNoteListResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DealNoteListResponse> listNotesWithHttpInfo(String id, String filter, String pageToken, String orderBy, Integer pageSize) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listNotesRequestBuilder(id, filter, pageToken, orderBy, pageSize);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listNotes", localVarResponse);
        }
        return new ApiResponse<DealNoteListResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DealNoteListResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listNotesRequestBuilder(String id, String filter, String pageToken, String orderBy, Integer pageSize) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listNotes");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/deals/{id}/notes"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Updates a specific deal note by its ID.
   * Updates a specific deal note by its ID.
   * @param noteId the ID of the note to update (required)
   * @param updateDealNoteRequest the request body containing updated note details (required)
   * @return DealNote
   * @throws ApiException if fails to make API call
   */
  public DealNote updateNote(String noteId, UpdateDealNoteRequest updateDealNoteRequest) throws ApiException {
    ApiResponse<DealNote> localVarResponse = updateNoteWithHttpInfo(noteId, updateDealNoteRequest);
    return localVarResponse.getData();
  }

  /**
   * Updates a specific deal note by its ID.
   * Updates a specific deal note by its ID.
   * @param noteId the ID of the note to update (required)
   * @param updateDealNoteRequest the request body containing updated note details (required)
   * @return ApiResponse&lt;DealNote&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DealNote> updateNoteWithHttpInfo(String noteId, UpdateDealNoteRequest updateDealNoteRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateNoteRequestBuilder(noteId, updateDealNoteRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateNote", localVarResponse);
        }
        return new ApiResponse<DealNote>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DealNote>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateNoteRequestBuilder(String noteId, UpdateDealNoteRequest updateDealNoteRequest) throws ApiException {
    // verify the required parameter 'noteId' is set
    if (noteId == null) {
      throw new ApiException(400, "Missing the required parameter 'noteId' when calling updateNote");
    }
    // verify the required parameter 'updateDealNoteRequest' is set
    if (updateDealNoteRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDealNoteRequest' when calling updateNote");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/deals/-/notes/{note_id}"
        .replace("{note_id}", ApiClient.urlEncode(noteId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateDealNoteRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }


}
