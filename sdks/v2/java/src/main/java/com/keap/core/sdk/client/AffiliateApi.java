/*
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.848026-hf-202508251610
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.keap.core.sdk.client;

import com.keap.core.sdk.ApiClient;
import com.keap.core.sdk.ApiException;
import com.keap.core.sdk.ApiResponse;
import com.keap.core.sdk.Pair;

import com.keap.core.sdk.model.AffiliateAddToProgramRequest;
import com.keap.core.sdk.model.AffiliateCommissionEarned;
import com.keap.core.sdk.model.AffiliateCommissionProgramResponse;
import com.keap.core.sdk.model.AffiliateLink;
import com.keap.core.sdk.model.AffiliateProgramV2;
import com.keap.core.sdk.model.AffiliateRemoveFromProgramRequest;
import com.keap.core.sdk.model.CreateAffiliateRequest;
import com.keap.core.sdk.model.CreateCommissionProgramRequest;
import com.keap.core.sdk.model.CreateDefaultCommissionProgramRequest;
import com.keap.core.sdk.model.CreateOrUpdateAffiliateLinkRequest;
import com.keap.core.sdk.model.CreateProductCommissionProgramRequest;
import com.keap.core.sdk.model.CreateSubscriptionCommissionProgramRequest;
import com.keap.core.sdk.model.DeleteProgramCommissionRequest;
import com.keap.core.sdk.model.DeleteSubscriptionPlanCommissionRequest;
import com.keap.core.sdk.model.Error;
import com.keap.core.sdk.model.ListAffiliateCommissionProgramsResponse;
import com.keap.core.sdk.model.ListAffiliateCommissionsResponse;
import com.keap.core.sdk.model.ListAffiliateLinksResponse;
import com.keap.core.sdk.model.ListAffiliateSummariesResponse;
import com.keap.core.sdk.model.ProductCommissionProgram;
import com.keap.core.sdk.model.RestAffiliate;
import com.keap.core.sdk.model.SetDefaultCommissionProgramResponse;
import com.keap.core.sdk.model.SubscriptionCommissionProgram;
import com.keap.core.sdk.model.UpdateAffiliateRequest;
import com.keap.core.sdk.model.UpdateCommissionProgramRequest;
import com.keap.core.sdk.model.UpdateDefaultCommissionProgramRequest;
import com.keap.core.sdk.model.UpdateProductCommissionProgramRequest;
import com.keap.core.sdk.model.UpdateSubscriptionCommissionProgramRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

import java.util.function.Supplier;
import io.github.resilience4j.core.functions.CheckedSupplier;
import io.github.resilience4j.retry.Retry;


@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")public class AffiliateApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  private final Supplier<String> accessTokenSupplier;

  public AffiliateApi() {
    this(new ApiClient());
  }

  public AffiliateApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();

    this.accessTokenSupplier = apiClient.getAccessTokenSupplier();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Create an Affiliate
   * Creates a single Affiliate
   * @param createAffiliateRequest Affiliate request to insert (optional)
   * @return RestAffiliate
   * @throws ApiException if fails to make API call
   */
  public RestAffiliate addAffiliate(CreateAffiliateRequest createAffiliateRequest) throws ApiException {
    ApiResponse<RestAffiliate> localVarResponse = addAffiliateWithHttpInfo(createAffiliateRequest);
    return localVarResponse.getData();
  }

  /**
   * Create an Affiliate
   * Creates a single Affiliate
   * @param createAffiliateRequest Affiliate request to insert (optional)
   * @return ApiResponse&lt;RestAffiliate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAffiliate> addAffiliateWithHttpInfo(CreateAffiliateRequest createAffiliateRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addAffiliateRequestBuilder(createAffiliateRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addAffiliate", localVarResponse);
        }
        return new ApiResponse<RestAffiliate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAffiliate>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addAffiliateRequestBuilder(CreateAffiliateRequest createAffiliateRequest) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createAffiliateRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Assign Affiliate to Commission program
   * Assigns an Affiliate to Commission Program
   * @param id id (required)
   * @param affiliateAddToProgramRequest affiliateAddToProgramRequest (required)
   * @throws ApiException if fails to make API call
   */
  public void addAffiliateToProgram(String id, AffiliateAddToProgramRequest affiliateAddToProgramRequest) throws ApiException {
    addAffiliateToProgramWithHttpInfo(id, affiliateAddToProgramRequest);
  }

  /**
   * Assign Affiliate to Commission program
   * Assigns an Affiliate to Commission Program
   * @param id id (required)
   * @param affiliateAddToProgramRequest affiliateAddToProgramRequest (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addAffiliateToProgramWithHttpInfo(String id, AffiliateAddToProgramRequest affiliateAddToProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addAffiliateToProgramRequestBuilder(id, affiliateAddToProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addAffiliateToProgram", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addAffiliateToProgramRequestBuilder(String id, AffiliateAddToProgramRequest affiliateAddToProgramRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling addAffiliateToProgram");
    }
    // verify the required parameter 'affiliateAddToProgramRequest' is set
    if (affiliateAddToProgramRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'affiliateAddToProgramRequest' when calling addAffiliateToProgram");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{id}:assignToProgram"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(affiliateAddToProgramRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create an Affiliate Commission Program
   * Creates an Affiliate Commission Program
   * @param createCommissionProgramRequest Commission Program to insert (optional)
   * @return AffiliateCommissionProgramResponse
   * @throws ApiException if fails to make API call
   */
  public AffiliateCommissionProgramResponse addCommissionProgram(CreateCommissionProgramRequest createCommissionProgramRequest) throws ApiException {
    ApiResponse<AffiliateCommissionProgramResponse> localVarResponse = addCommissionProgramWithHttpInfo(createCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Create an Affiliate Commission Program
   * Creates an Affiliate Commission Program
   * @param createCommissionProgramRequest Commission Program to insert (optional)
   * @return ApiResponse&lt;AffiliateCommissionProgramResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateCommissionProgramResponse> addCommissionProgramWithHttpInfo(CreateCommissionProgramRequest createCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addCommissionProgramRequestBuilder(createCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addCommissionProgram", localVarResponse);
        }
        return new ApiResponse<AffiliateCommissionProgramResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateCommissionProgramResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addCommissionProgramRequestBuilder(CreateCommissionProgramRequest createCommissionProgramRequest) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createCommissionProgramRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Assign a Product Commission Program
   * Assigns a Product Commission Program to a Product
   * @param commissionProgramId commission_program_id (required)
   * @param createProductCommissionProgramRequest Product Commission Program (optional)
   * @return ProductCommissionProgram
   * @throws ApiException if fails to make API call
   */
  public ProductCommissionProgram assignProductCommissionProgram(String commissionProgramId, CreateProductCommissionProgramRequest createProductCommissionProgramRequest) throws ApiException {
    ApiResponse<ProductCommissionProgram> localVarResponse = assignProductCommissionProgramWithHttpInfo(commissionProgramId, createProductCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Assign a Product Commission Program
   * Assigns a Product Commission Program to a Product
   * @param commissionProgramId commission_program_id (required)
   * @param createProductCommissionProgramRequest Product Commission Program (optional)
   * @return ApiResponse&lt;ProductCommissionProgram&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ProductCommissionProgram> assignProductCommissionProgramWithHttpInfo(String commissionProgramId, CreateProductCommissionProgramRequest createProductCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = assignProductCommissionProgramRequestBuilder(commissionProgramId, createProductCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("assignProductCommissionProgram", localVarResponse);
        }
        return new ApiResponse<ProductCommissionProgram>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProductCommissionProgram>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder assignProductCommissionProgramRequestBuilder(String commissionProgramId, CreateProductCommissionProgramRequest createProductCommissionProgramRequest) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling assignProductCommissionProgram");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/productCommissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createProductCommissionProgramRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Assign a Subscription Commission Program
   * Assigns a Subscription Commission Program to a Subscription
   * @param commissionProgramId commission_program_id (required)
   * @param createSubscriptionCommissionProgramRequest Subscription Commission Program (optional)
   * @return SubscriptionCommissionProgram
   * @throws ApiException if fails to make API call
   */
  public SubscriptionCommissionProgram assignSubscriptionCommissionProgram(String commissionProgramId, CreateSubscriptionCommissionProgramRequest createSubscriptionCommissionProgramRequest) throws ApiException {
    ApiResponse<SubscriptionCommissionProgram> localVarResponse = assignSubscriptionCommissionProgramWithHttpInfo(commissionProgramId, createSubscriptionCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Assign a Subscription Commission Program
   * Assigns a Subscription Commission Program to a Subscription
   * @param commissionProgramId commission_program_id (required)
   * @param createSubscriptionCommissionProgramRequest Subscription Commission Program (optional)
   * @return ApiResponse&lt;SubscriptionCommissionProgram&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SubscriptionCommissionProgram> assignSubscriptionCommissionProgramWithHttpInfo(String commissionProgramId, CreateSubscriptionCommissionProgramRequest createSubscriptionCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = assignSubscriptionCommissionProgramRequestBuilder(commissionProgramId, createSubscriptionCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("assignSubscriptionCommissionProgram", localVarResponse);
        }
        return new ApiResponse<SubscriptionCommissionProgram>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionCommissionProgram>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder assignSubscriptionCommissionProgramRequestBuilder(String commissionProgramId, CreateSubscriptionCommissionProgramRequest createSubscriptionCommissionProgramRequest) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling assignSubscriptionCommissionProgram");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/subscriptionCommissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createSubscriptionCommissionProgramRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create a Default Commission Program
   * Creates a Default Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param createDefaultCommissionProgramRequest Values of the Default Commission Program (optional)
   * @return SetDefaultCommissionProgramResponse
   * @throws ApiException if fails to make API call
   */
  public SetDefaultCommissionProgramResponse createDefaultCommissionProgram(String commissionProgramId, CreateDefaultCommissionProgramRequest createDefaultCommissionProgramRequest) throws ApiException {
    ApiResponse<SetDefaultCommissionProgramResponse> localVarResponse = createDefaultCommissionProgramWithHttpInfo(commissionProgramId, createDefaultCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a Default Commission Program
   * Creates a Default Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param createDefaultCommissionProgramRequest Values of the Default Commission Program (optional)
   * @return ApiResponse&lt;SetDefaultCommissionProgramResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SetDefaultCommissionProgramResponse> createDefaultCommissionProgramWithHttpInfo(String commissionProgramId, CreateDefaultCommissionProgramRequest createDefaultCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDefaultCommissionProgramRequestBuilder(commissionProgramId, createDefaultCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDefaultCommissionProgram", localVarResponse);
        }
        return new ApiResponse<SetDefaultCommissionProgramResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SetDefaultCommissionProgramResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDefaultCommissionProgramRequestBuilder(String commissionProgramId, CreateDefaultCommissionProgramRequest createDefaultCommissionProgramRequest) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling createDefaultCommissionProgram");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/defaultCommissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDefaultCommissionProgramRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create an Affiliate Link
   * Creates a single Affiliate Link
   * @param createOrUpdateAffiliateLinkRequest request (required)
   * @return AffiliateLink
   * @throws ApiException if fails to make API call
   */
  public AffiliateLink createRedirectLink(CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest) throws ApiException {
    ApiResponse<AffiliateLink> localVarResponse = createRedirectLinkWithHttpInfo(createOrUpdateAffiliateLinkRequest);
    return localVarResponse.getData();
  }

  /**
   * Create an Affiliate Link
   * Creates a single Affiliate Link
   * @param createOrUpdateAffiliateLinkRequest request (required)
   * @return ApiResponse&lt;AffiliateLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateLink> createRedirectLinkWithHttpInfo(CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createRedirectLinkRequestBuilder(createOrUpdateAffiliateLinkRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createRedirectLink", localVarResponse);
        }
        return new ApiResponse<AffiliateLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateLink>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createRedirectLinkRequestBuilder(CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest) throws ApiException {
    // verify the required parameter 'createOrUpdateAffiliateLinkRequest' is set
    if (createOrUpdateAffiliateLinkRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createOrUpdateAffiliateLinkRequest' when calling createRedirectLink");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/redirects";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createOrUpdateAffiliateLinkRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete Affiliate
   * Deletes the specified Affiliate
   * @param id id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteAffiliate(String id) throws ApiException {
    deleteAffiliateWithHttpInfo(id);
  }

  /**
   * Delete Affiliate
   * Deletes the specified Affiliate
   * @param id id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteAffiliateWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteAffiliateRequestBuilder(id);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteAffiliate", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteAffiliateRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteAffiliate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete a Commission Program
   * Deletes a Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteAffiliateCommissionProgram(String commissionProgramId) throws ApiException {
    deleteAffiliateCommissionProgramWithHttpInfo(commissionProgramId);
  }

  /**
   * Delete a Commission Program
   * Deletes a Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteAffiliateCommissionProgramWithHttpInfo(String commissionProgramId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteAffiliateCommissionProgramRequestBuilder(commissionProgramId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteAffiliateCommissionProgram", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteAffiliateCommissionProgramRequestBuilder(String commissionProgramId) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling deleteAffiliateCommissionProgram");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete an Affiliate Link
   * Deletes an Affiliate Link
   * @param redirectId redirect_id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteRedirectLink(String redirectId) throws ApiException {
    deleteRedirectLinkWithHttpInfo(redirectId);
  }

  /**
   * Delete an Affiliate Link
   * Deletes an Affiliate Link
   * @param redirectId redirect_id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteRedirectLinkWithHttpInfo(String redirectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteRedirectLinkRequestBuilder(redirectId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteRedirectLink", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteRedirectLinkRequestBuilder(String redirectId) throws ApiException {
    // verify the required parameter 'redirectId' is set
    if (redirectId == null) {
      throw new ApiException(400, "Missing the required parameter 'redirectId' when calling deleteRedirectLink");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/redirects/{redirect_id}"
        .replace("{redirect_id}", ApiClient.urlEncode(redirectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve an Affiliate
   * Retrieves a single Affiliate
   * @param id id (required)
   * @return RestAffiliate
   * @throws ApiException if fails to make API call
   */
  public RestAffiliate getAffiliate(String id) throws ApiException {
    ApiResponse<RestAffiliate> localVarResponse = getAffiliateWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve an Affiliate
   * Retrieves a single Affiliate
   * @param id id (required)
   * @return ApiResponse&lt;RestAffiliate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAffiliate> getAffiliateWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAffiliateRequestBuilder(id);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAffiliate", localVarResponse);
        }
        return new ApiResponse<RestAffiliate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAffiliate>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAffiliateRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getAffiliate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve Affiliate Commission Earned and View LedgerURl for portal
   * Get the Affiliate Commission Earned and View LedgerURl for portal
   * @param affiliateId affiliate_id (required)
   * @return AffiliateCommissionEarned
   * @throws ApiException if fails to make API call
   */
  public AffiliateCommissionEarned getAffiliateCommissionTotal(String affiliateId) throws ApiException {
    ApiResponse<AffiliateCommissionEarned> localVarResponse = getAffiliateCommissionTotalWithHttpInfo(affiliateId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Affiliate Commission Earned and View LedgerURl for portal
   * Get the Affiliate Commission Earned and View LedgerURl for portal
   * @param affiliateId affiliate_id (required)
   * @return ApiResponse&lt;AffiliateCommissionEarned&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateCommissionEarned> getAffiliateCommissionTotalWithHttpInfo(String affiliateId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAffiliateCommissionTotalRequestBuilder(affiliateId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAffiliateCommissionTotal", localVarResponse);
        }
        return new ApiResponse<AffiliateCommissionEarned>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateCommissionEarned>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAffiliateCommissionTotalRequestBuilder(String affiliateId) throws ApiException {
    // verify the required parameter 'affiliateId' is set
    if (affiliateId == null) {
      throw new ApiException(400, "Missing the required parameter 'affiliateId' when calling getAffiliateCommissionTotal");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{affiliate_id}/commissionTotal"
        .replace("{affiliate_id}", ApiClient.urlEncode(affiliateId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve Affiliate Commission and Clawbacks
   * Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
   * @param affiliateId affiliate_id (required)
   * @param filter Filter to apply, allowed fields are: - (String) &#x60;affiliateId&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliateId%3D%3D123&#x60;  (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - &#x60;invoice_id&#x60; - &#x60;affowed_id&#x60; - &#x60;date_earned&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListAffiliateCommissionsResponse
   * @throws ApiException if fails to make API call
   */
  public ListAffiliateCommissionsResponse getAffiliateCommissions(String affiliateId, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListAffiliateCommissionsResponse> localVarResponse = getAffiliateCommissionsWithHttpInfo(affiliateId, filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Affiliate Commission and Clawbacks
   * Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
   * @param affiliateId affiliate_id (required)
   * @param filter Filter to apply, allowed fields are: - (String) &#x60;affiliateId&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliateId%3D%3D123&#x60;  (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - &#x60;invoice_id&#x60; - &#x60;affowed_id&#x60; - &#x60;date_earned&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListAffiliateCommissionsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListAffiliateCommissionsResponse> getAffiliateCommissionsWithHttpInfo(String affiliateId, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAffiliateCommissionsRequestBuilder(affiliateId, filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAffiliateCommissions", localVarResponse);
        }
        return new ApiResponse<ListAffiliateCommissionsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListAffiliateCommissionsResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAffiliateCommissionsRequestBuilder(String affiliateId, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    // verify the required parameter 'affiliateId' is set
    if (affiliateId == null) {
      throw new ApiException(400, "Missing the required parameter 'affiliateId' when calling getAffiliateCommissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{affiliate_id}:commissions"
        .replace("{affiliate_id}", ApiClient.urlEncode(affiliateId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve a Commission Program
   * Retrieves a single Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @return AffiliateProgramV2
   * @throws ApiException if fails to make API call
   */
  public AffiliateProgramV2 getCommissionProgram(String commissionProgramId) throws ApiException {
    ApiResponse<AffiliateProgramV2> localVarResponse = getCommissionProgramWithHttpInfo(commissionProgramId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve a Commission Program
   * Retrieves a single Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @return ApiResponse&lt;AffiliateProgramV2&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateProgramV2> getCommissionProgramWithHttpInfo(String commissionProgramId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getCommissionProgramRequestBuilder(commissionProgramId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getCommissionProgram", localVarResponse);
        }
        return new ApiResponse<AffiliateProgramV2>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateProgramV2>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getCommissionProgramRequestBuilder(String commissionProgramId) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling getCommissionProgram");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve an Affiliate Link
   * Retrieves information about a single Affiliate Link
   * @param redirectId redirect_id (required)
   * @return AffiliateLink
   * @throws ApiException if fails to make API call
   */
  public AffiliateLink getRedirectLink(String redirectId) throws ApiException {
    ApiResponse<AffiliateLink> localVarResponse = getRedirectLinkWithHttpInfo(redirectId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve an Affiliate Link
   * Retrieves information about a single Affiliate Link
   * @param redirectId redirect_id (required)
   * @return ApiResponse&lt;AffiliateLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateLink> getRedirectLinkWithHttpInfo(String redirectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getRedirectLinkRequestBuilder(redirectId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getRedirectLink", localVarResponse);
        }
        return new ApiResponse<AffiliateLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateLink>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getRedirectLinkRequestBuilder(String redirectId) throws ApiException {
    // verify the required parameter 'redirectId' is set
    if (redirectId == null) {
      throw new ApiException(400, "Missing the required parameter 'redirectId' when calling getRedirectLink");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/redirects/{redirect_id}"
        .replace("{redirect_id}", ApiClient.urlEncode(redirectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Affiliate Commission Programs
   * Retrieves a list of Affiliate Commission Programs
   * @param filter Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60;  (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListAffiliateCommissionProgramsResponse
   * @throws ApiException if fails to make API call
   */
  public ListAffiliateCommissionProgramsResponse listAffiliateCommissionPrograms(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListAffiliateCommissionProgramsResponse> localVarResponse = listAffiliateCommissionProgramsWithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List Affiliate Commission Programs
   * Retrieves a list of Affiliate Commission Programs
   * @param filter Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60;  (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListAffiliateCommissionProgramsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListAffiliateCommissionProgramsResponse> listAffiliateCommissionProgramsWithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listAffiliateCommissionProgramsRequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listAffiliateCommissionPrograms", localVarResponse);
        }
        return new ApiResponse<ListAffiliateCommissionProgramsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListAffiliateCommissionProgramsResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listAffiliateCommissionProgramsRequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Affiliate Links
   * Retrieves a list of Affiliate Links
   * @param filter Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60;  (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListAffiliateLinksResponse
   * @throws ApiException if fails to make API call
   */
  public ListAffiliateLinksResponse listAffiliateLinks(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListAffiliateLinksResponse> localVarResponse = listAffiliateLinksWithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List Affiliate Links
   * Retrieves a list of Affiliate Links
   * @param filter Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60;  (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListAffiliateLinksResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListAffiliateLinksResponse> listAffiliateLinksWithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listAffiliateLinksRequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listAffiliateLinks", localVarResponse);
        }
        return new ApiResponse<ListAffiliateLinksResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListAffiliateLinksResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listAffiliateLinksRequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/redirects";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Affiliate Summaries
   * Retrieves a list of Affiliate Summaries
   * @param filter Filter to apply, allowed fields are: - (List[String]) &#x60;affiliate_ids&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - &#x60;affiliate_id&#x60; - &#x60;amount_earned&#x60; - &#x60;balance&#x60; - &#x60;clawbacks&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListAffiliateSummariesResponse
   * @throws ApiException if fails to make API call
   */
  public ListAffiliateSummariesResponse listSummaries(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListAffiliateSummariesResponse> localVarResponse = listSummariesWithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List Affiliate Summaries
   * Retrieves a list of Affiliate Summaries
   * @param filter Filter to apply, allowed fields are: - (List[String]) &#x60;affiliate_ids&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - &#x60;affiliate_id&#x60; - &#x60;amount_earned&#x60; - &#x60;balance&#x60; - &#x60;clawbacks&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListAffiliateSummariesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListAffiliateSummariesResponse> listSummariesWithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listSummariesRequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listSummaries", localVarResponse);
        }
        return new ApiResponse<ListAffiliateSummariesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListAffiliateSummariesResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listSummariesRequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/summaries";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Remove an Affiliate from a Commission Program
   * Removes an Affiliate from a Commission Program
   * @param id id (required)
   * @param affiliateRemoveFromProgramRequest removeFromProgramRequest (required)
   * @throws ApiException if fails to make API call
   */
  public void removeAffiliateFromProgram(String id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest) throws ApiException {
    removeAffiliateFromProgramWithHttpInfo(id, affiliateRemoveFromProgramRequest);
  }

  /**
   * Remove an Affiliate from a Commission Program
   * Removes an Affiliate from a Commission Program
   * @param id id (required)
   * @param affiliateRemoveFromProgramRequest removeFromProgramRequest (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeAffiliateFromProgramWithHttpInfo(String id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeAffiliateFromProgramRequestBuilder(id, affiliateRemoveFromProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeAffiliateFromProgram", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeAffiliateFromProgramRequestBuilder(String id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling removeAffiliateFromProgram");
    }
    // verify the required parameter 'affiliateRemoveFromProgramRequest' is set
    if (affiliateRemoveFromProgramRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'affiliateRemoveFromProgramRequest' when calling removeAffiliateFromProgram");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{id}:removeFromProgram"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(affiliateRemoveFromProgramRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Remove a Product from a Commission Program
   * Removes a Product from a Commission Program
   * @param commissionId commission_id (required)
   * @param deleteProgramCommissionRequest deleteProgramCommissionRequest (required)
   * @throws ApiException if fails to make API call
   */
  public void removeProductCommissionFromCommissions(String commissionId, DeleteProgramCommissionRequest deleteProgramCommissionRequest) throws ApiException {
    removeProductCommissionFromCommissionsWithHttpInfo(commissionId, deleteProgramCommissionRequest);
  }

  /**
   * Remove a Product from a Commission Program
   * Removes a Product from a Commission Program
   * @param commissionId commission_id (required)
   * @param deleteProgramCommissionRequest deleteProgramCommissionRequest (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeProductCommissionFromCommissionsWithHttpInfo(String commissionId, DeleteProgramCommissionRequest deleteProgramCommissionRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeProductCommissionFromCommissionsRequestBuilder(commissionId, deleteProgramCommissionRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeProductCommissionFromCommissions", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeProductCommissionFromCommissionsRequestBuilder(String commissionId, DeleteProgramCommissionRequest deleteProgramCommissionRequest) throws ApiException {
    // verify the required parameter 'commissionId' is set
    if (commissionId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionId' when calling removeProductCommissionFromCommissions");
    }
    // verify the required parameter 'deleteProgramCommissionRequest' is set
    if (deleteProgramCommissionRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'deleteProgramCommissionRequest' when calling removeProductCommissionFromCommissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/{commission_id}:removeProductCommission"
        .replace("{commission_id}", ApiClient.urlEncode(commissionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(deleteProgramCommissionRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Remove a Subscription from a Commission Program
   * Removes a Subscription from a Commission Program
   * @param commissionId commission_id (required)
   * @param deleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest (required)
   * @throws ApiException if fails to make API call
   */
  public void removeSubscriptionPlanCommissionFromCommissions(String commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest) throws ApiException {
    removeSubscriptionPlanCommissionFromCommissionsWithHttpInfo(commissionId, deleteSubscriptionPlanCommissionRequest);
  }

  /**
   * Remove a Subscription from a Commission Program
   * Removes a Subscription from a Commission Program
   * @param commissionId commission_id (required)
   * @param deleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeSubscriptionPlanCommissionFromCommissionsWithHttpInfo(String commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeSubscriptionPlanCommissionFromCommissionsRequestBuilder(commissionId, deleteSubscriptionPlanCommissionRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeSubscriptionPlanCommissionFromCommissions", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeSubscriptionPlanCommissionFromCommissionsRequestBuilder(String commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest) throws ApiException {
    // verify the required parameter 'commissionId' is set
    if (commissionId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionId' when calling removeSubscriptionPlanCommissionFromCommissions");
    }
    // verify the required parameter 'deleteSubscriptionPlanCommissionRequest' is set
    if (deleteSubscriptionPlanCommissionRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'deleteSubscriptionPlanCommissionRequest' when calling removeSubscriptionPlanCommissionFromCommissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/{commission_id}:removeSubscriptionCommission"
        .replace("{commission_id}", ApiClient.urlEncode(commissionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(deleteSubscriptionPlanCommissionRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update an Affiliate
   * Updates a single Affiliate
   * @param id id (required)
   * @param updateAffiliateRequest Request to update an affiliate (optional)
   * @return RestAffiliate
   * @throws ApiException if fails to make API call
   */
  public RestAffiliate updateAffiliate(String id, UpdateAffiliateRequest updateAffiliateRequest) throws ApiException {
    ApiResponse<RestAffiliate> localVarResponse = updateAffiliateWithHttpInfo(id, updateAffiliateRequest);
    return localVarResponse.getData();
  }

  /**
   * Update an Affiliate
   * Updates a single Affiliate
   * @param id id (required)
   * @param updateAffiliateRequest Request to update an affiliate (optional)
   * @return ApiResponse&lt;RestAffiliate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAffiliate> updateAffiliateWithHttpInfo(String id, UpdateAffiliateRequest updateAffiliateRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateAffiliateRequestBuilder(id, updateAffiliateRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateAffiliate", localVarResponse);
        }
        return new ApiResponse<RestAffiliate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAffiliate>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateAffiliateRequestBuilder(String id, UpdateAffiliateRequest updateAffiliateRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateAffiliate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateAffiliateRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update an Affiliate Commission Program
   * Updates the properties of an Affiliate Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateCommissionProgramRequest updateCommissionProgramRequest (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return AffiliateCommissionProgramResponse
   * @throws ApiException if fails to make API call
   */
  public AffiliateCommissionProgramResponse updateCommissionProgram(String commissionProgramId, UpdateCommissionProgramRequest updateCommissionProgramRequest, List<String> updateMask) throws ApiException {
    ApiResponse<AffiliateCommissionProgramResponse> localVarResponse = updateCommissionProgramWithHttpInfo(commissionProgramId, updateCommissionProgramRequest, updateMask);
    return localVarResponse.getData();
  }

  /**
   * Update an Affiliate Commission Program
   * Updates the properties of an Affiliate Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateCommissionProgramRequest updateCommissionProgramRequest (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return ApiResponse&lt;AffiliateCommissionProgramResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateCommissionProgramResponse> updateCommissionProgramWithHttpInfo(String commissionProgramId, UpdateCommissionProgramRequest updateCommissionProgramRequest, List<String> updateMask) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateCommissionProgramRequestBuilder(commissionProgramId, updateCommissionProgramRequest, updateMask);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateCommissionProgram", localVarResponse);
        }
        return new ApiResponse<AffiliateCommissionProgramResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateCommissionProgramResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateCommissionProgramRequestBuilder(String commissionProgramId, UpdateCommissionProgramRequest updateCommissionProgramRequest, List<String> updateMask) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling updateCommissionProgram");
    }
    // verify the required parameter 'updateCommissionProgramRequest' is set
    if (updateCommissionProgramRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateCommissionProgramRequest' when calling updateCommissionProgram");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateCommissionProgramRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Default Commission Program
   * Updates a Default Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param updateDefaultCommissionProgramRequest Values of the default Commission Program (optional)
   * @return SetDefaultCommissionProgramResponse
   * @throws ApiException if fails to make API call
   */
  public SetDefaultCommissionProgramResponse updateDefaultCommissionProgram(String commissionProgramId, List<String> updateMask, UpdateDefaultCommissionProgramRequest updateDefaultCommissionProgramRequest) throws ApiException {
    ApiResponse<SetDefaultCommissionProgramResponse> localVarResponse = updateDefaultCommissionProgramWithHttpInfo(commissionProgramId, updateMask, updateDefaultCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a Default Commission Program
   * Updates a Default Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param updateDefaultCommissionProgramRequest Values of the default Commission Program (optional)
   * @return ApiResponse&lt;SetDefaultCommissionProgramResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SetDefaultCommissionProgramResponse> updateDefaultCommissionProgramWithHttpInfo(String commissionProgramId, List<String> updateMask, UpdateDefaultCommissionProgramRequest updateDefaultCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDefaultCommissionProgramRequestBuilder(commissionProgramId, updateMask, updateDefaultCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDefaultCommissionProgram", localVarResponse);
        }
        return new ApiResponse<SetDefaultCommissionProgramResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SetDefaultCommissionProgramResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDefaultCommissionProgramRequestBuilder(String commissionProgramId, List<String> updateMask, UpdateDefaultCommissionProgramRequest updateDefaultCommissionProgramRequest) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling updateDefaultCommissionProgram");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/defaultCommissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateDefaultCommissionProgramRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Product Commission Program
   * Updates a Product Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param updateProductCommissionProgramRequest Values of the product Commission Program (optional)
   * @return ProductCommissionProgram
   * @throws ApiException if fails to make API call
   */
  public ProductCommissionProgram updateProductCommissionProgram(String commissionProgramId, List<String> updateMask, UpdateProductCommissionProgramRequest updateProductCommissionProgramRequest) throws ApiException {
    ApiResponse<ProductCommissionProgram> localVarResponse = updateProductCommissionProgramWithHttpInfo(commissionProgramId, updateMask, updateProductCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a Product Commission Program
   * Updates a Product Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param updateProductCommissionProgramRequest Values of the product Commission Program (optional)
   * @return ApiResponse&lt;ProductCommissionProgram&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ProductCommissionProgram> updateProductCommissionProgramWithHttpInfo(String commissionProgramId, List<String> updateMask, UpdateProductCommissionProgramRequest updateProductCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateProductCommissionProgramRequestBuilder(commissionProgramId, updateMask, updateProductCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateProductCommissionProgram", localVarResponse);
        }
        return new ApiResponse<ProductCommissionProgram>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProductCommissionProgram>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateProductCommissionProgramRequestBuilder(String commissionProgramId, List<String> updateMask, UpdateProductCommissionProgramRequest updateProductCommissionProgramRequest) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling updateProductCommissionProgram");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/productCommissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateProductCommissionProgramRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update an Affiliate Link
   * Updates an Affiliate Link
   * @param redirectId redirect_id (required)
   * @param createOrUpdateAffiliateLinkRequest request (required)
   * @return AffiliateLink
   * @throws ApiException if fails to make API call
   */
  public AffiliateLink updateRedirectLink(String redirectId, CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest) throws ApiException {
    ApiResponse<AffiliateLink> localVarResponse = updateRedirectLinkWithHttpInfo(redirectId, createOrUpdateAffiliateLinkRequest);
    return localVarResponse.getData();
  }

  /**
   * Update an Affiliate Link
   * Updates an Affiliate Link
   * @param redirectId redirect_id (required)
   * @param createOrUpdateAffiliateLinkRequest request (required)
   * @return ApiResponse&lt;AffiliateLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateLink> updateRedirectLinkWithHttpInfo(String redirectId, CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateRedirectLinkRequestBuilder(redirectId, createOrUpdateAffiliateLinkRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateRedirectLink", localVarResponse);
        }
        return new ApiResponse<AffiliateLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateLink>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateRedirectLinkRequestBuilder(String redirectId, CreateOrUpdateAffiliateLinkRequest createOrUpdateAffiliateLinkRequest) throws ApiException {
    // verify the required parameter 'redirectId' is set
    if (redirectId == null) {
      throw new ApiException(400, "Missing the required parameter 'redirectId' when calling updateRedirectLink");
    }
    // verify the required parameter 'createOrUpdateAffiliateLinkRequest' is set
    if (createOrUpdateAffiliateLinkRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createOrUpdateAffiliateLinkRequest' when calling updateRedirectLink");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/redirects/{redirect_id}"
        .replace("{redirect_id}", ApiClient.urlEncode(redirectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createOrUpdateAffiliateLinkRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Subscription Commission Program
   * Updates a Subscription Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param updateSubscriptionCommissionProgramRequest Values of the subscription Commission Program (optional)
   * @return SubscriptionCommissionProgram
   * @throws ApiException if fails to make API call
   */
  public SubscriptionCommissionProgram updateSubscriptionCommissionProgram(String commissionProgramId, List<String> updateMask, UpdateSubscriptionCommissionProgramRequest updateSubscriptionCommissionProgramRequest) throws ApiException {
    ApiResponse<SubscriptionCommissionProgram> localVarResponse = updateSubscriptionCommissionProgramWithHttpInfo(commissionProgramId, updateMask, updateSubscriptionCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a Subscription Commission Program
   * Updates a Subscription Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param updateSubscriptionCommissionProgramRequest Values of the subscription Commission Program (optional)
   * @return ApiResponse&lt;SubscriptionCommissionProgram&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SubscriptionCommissionProgram> updateSubscriptionCommissionProgramWithHttpInfo(String commissionProgramId, List<String> updateMask, UpdateSubscriptionCommissionProgramRequest updateSubscriptionCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateSubscriptionCommissionProgramRequestBuilder(commissionProgramId, updateMask, updateSubscriptionCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateSubscriptionCommissionProgram", localVarResponse);
        }
        return new ApiResponse<SubscriptionCommissionProgram>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionCommissionProgram>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateSubscriptionCommissionProgramRequestBuilder(String commissionProgramId, List<String> updateMask, UpdateSubscriptionCommissionProgramRequest updateSubscriptionCommissionProgramRequest) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling updateSubscriptionCommissionProgram");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/subscriptionCommissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateSubscriptionCommissionProgramRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }


}
