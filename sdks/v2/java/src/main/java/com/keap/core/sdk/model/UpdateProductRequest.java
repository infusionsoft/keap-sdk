/*
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.844359
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keap.core.sdk.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


/**
 * UpdateProductRequest
 */
@JsonPropertyOrder({
  UpdateProductRequest.JSON_PROPERTY_ACTIVE,
  UpdateProductRequest.JSON_PROPERTY_CITY_TAXABLE,
  UpdateProductRequest.JSON_PROPERTY_COUNTRY_TAXABLE,
  UpdateProductRequest.JSON_PROPERTY_DESCRIPTION,
  UpdateProductRequest.JSON_PROPERTY_EMAIL_FOR_INVENTORY_NOTIFICATIONS,
  UpdateProductRequest.JSON_PROPERTY_INVENTORY_LIMIT,
  UpdateProductRequest.JSON_PROPERTY_NAME,
  UpdateProductRequest.JSON_PROPERTY_OUT_OF_STOCK_ENABLED,
  UpdateProductRequest.JSON_PROPERTY_PRICE,
  UpdateProductRequest.JSON_PROPERTY_SHIPPABLE,
  UpdateProductRequest.JSON_PROPERTY_SHORT_DESCRIPTION,
  UpdateProductRequest.JSON_PROPERTY_SKU,
  UpdateProductRequest.JSON_PROPERTY_STATE_TAXABLE,
  UpdateProductRequest.JSON_PROPERTY_STOREFRONT_HIDDEN,
  UpdateProductRequest.JSON_PROPERTY_SUBSCRIPTION_ONLY,
  UpdateProductRequest.JSON_PROPERTY_TAXABLE,
  UpdateProductRequest.JSON_PROPERTY_WEIGHT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class UpdateProductRequest implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  @jakarta.annotation.Nullable  private Boolean active;

  public static final String JSON_PROPERTY_CITY_TAXABLE = "city_taxable";
  @jakarta.annotation.Nullable  private Boolean cityTaxable;

  public static final String JSON_PROPERTY_COUNTRY_TAXABLE = "country_taxable";
  @jakarta.annotation.Nullable  private Boolean countryTaxable;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @jakarta.annotation.Nullable  private String description;

  public static final String JSON_PROPERTY_EMAIL_FOR_INVENTORY_NOTIFICATIONS = "email_for_inventory_notifications";
  @jakarta.annotation.Nullable  private String emailForInventoryNotifications;

  public static final String JSON_PROPERTY_INVENTORY_LIMIT = "inventory_limit";
  @jakarta.annotation.Nullable  private Integer inventoryLimit;

  public static final String JSON_PROPERTY_NAME = "name";
  @jakarta.annotation.Nullable  private String name;

  public static final String JSON_PROPERTY_OUT_OF_STOCK_ENABLED = "out_of_stock_enabled";
  @jakarta.annotation.Nullable  private Boolean outOfStockEnabled;

  public static final String JSON_PROPERTY_PRICE = "price";
  @jakarta.annotation.Nullable  private Long price;

  public static final String JSON_PROPERTY_SHIPPABLE = "shippable";
  @jakarta.annotation.Nullable  private Boolean shippable;

  public static final String JSON_PROPERTY_SHORT_DESCRIPTION = "short_description";
  @jakarta.annotation.Nullable  private String shortDescription;

  public static final String JSON_PROPERTY_SKU = "sku";
  @jakarta.annotation.Nullable  private String sku;

  public static final String JSON_PROPERTY_STATE_TAXABLE = "state_taxable";
  @jakarta.annotation.Nullable  private Boolean stateTaxable;

  public static final String JSON_PROPERTY_STOREFRONT_HIDDEN = "storefront_hidden";
  @jakarta.annotation.Nullable  private Boolean storefrontHidden;

  public static final String JSON_PROPERTY_SUBSCRIPTION_ONLY = "subscription_only";
  @jakarta.annotation.Nullable  private Boolean subscriptionOnly;

  public static final String JSON_PROPERTY_TAXABLE = "taxable";
  @jakarta.annotation.Nullable  private Boolean taxable;

  public static final String JSON_PROPERTY_WEIGHT = "weight";
  @jakarta.annotation.Nullable  private Double weight;

  public UpdateProductRequest() { 
  }

  public UpdateProductRequest active(@jakarta.annotation.Nullable Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * True means active, False means inactive
   * @return active
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "True means active, False means inactive")
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(@jakarta.annotation.Nullable Boolean active) {
    this.active = active;
  }


  public UpdateProductRequest cityTaxable(@jakarta.annotation.Nullable Boolean cityTaxable) {
    this.cityTaxable = cityTaxable;
    return this;
  }

  /**
   * If city-based taxes should be applied to this product
   * @return cityTaxable
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "If city-based taxes should be applied to this product")
  @JsonProperty(JSON_PROPERTY_CITY_TAXABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getCityTaxable() {
    return cityTaxable;
  }


  @JsonProperty(JSON_PROPERTY_CITY_TAXABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCityTaxable(@jakarta.annotation.Nullable Boolean cityTaxable) {
    this.cityTaxable = cityTaxable;
  }


  public UpdateProductRequest countryTaxable(@jakarta.annotation.Nullable Boolean countryTaxable) {
    this.countryTaxable = countryTaxable;
    return this;
  }

  /**
   * If country-based taxes should be applied to this product
   * @return countryTaxable
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "If country-based taxes should be applied to this product")
  @JsonProperty(JSON_PROPERTY_COUNTRY_TAXABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getCountryTaxable() {
    return countryTaxable;
  }


  @JsonProperty(JSON_PROPERTY_COUNTRY_TAXABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCountryTaxable(@jakarta.annotation.Nullable Boolean countryTaxable) {
    this.countryTaxable = countryTaxable;
  }


  public UpdateProductRequest description(@jakarta.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Product long description
   * @return description
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Product long description")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@jakarta.annotation.Nullable String description) {
    this.description = description;
  }


  public UpdateProductRequest emailForInventoryNotifications(@jakarta.annotation.Nullable String emailForInventoryNotifications) {
    this.emailForInventoryNotifications = emailForInventoryNotifications;
    return this;
  }

  /**
   * The email address for notifications about inventory
   * @return emailForInventoryNotifications
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The email address for notifications about inventory")
  @JsonProperty(JSON_PROPERTY_EMAIL_FOR_INVENTORY_NOTIFICATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getEmailForInventoryNotifications() {
    return emailForInventoryNotifications;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL_FOR_INVENTORY_NOTIFICATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmailForInventoryNotifications(@jakarta.annotation.Nullable String emailForInventoryNotifications) {
    this.emailForInventoryNotifications = emailForInventoryNotifications;
  }


  public UpdateProductRequest inventoryLimit(@jakarta.annotation.Nullable Integer inventoryLimit) {
    this.inventoryLimit = inventoryLimit;
    return this;
  }

  /**
   * The inventory limit for this product. Must be greater than or equal to 0.
   * @return inventoryLimit
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The inventory limit for this product. Must be greater than or equal to 0.")
  @JsonProperty(JSON_PROPERTY_INVENTORY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getInventoryLimit() {
    return inventoryLimit;
  }


  @JsonProperty(JSON_PROPERTY_INVENTORY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInventoryLimit(@jakarta.annotation.Nullable Integer inventoryLimit) {
    this.inventoryLimit = inventoryLimit;
  }


  public UpdateProductRequest name(@jakarta.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Product name
   * @return name
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Product name")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@jakarta.annotation.Nullable String name) {
    this.name = name;
  }


  public UpdateProductRequest outOfStockEnabled(@jakarta.annotation.Nullable Boolean outOfStockEnabled) {
    this.outOfStockEnabled = outOfStockEnabled;
    return this;
  }

  /**
   * The flag to enable out of stock inventory
   * @return outOfStockEnabled
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The flag to enable out of stock inventory")
  @JsonProperty(JSON_PROPERTY_OUT_OF_STOCK_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getOutOfStockEnabled() {
    return outOfStockEnabled;
  }


  @JsonProperty(JSON_PROPERTY_OUT_OF_STOCK_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutOfStockEnabled(@jakarta.annotation.Nullable Boolean outOfStockEnabled) {
    this.outOfStockEnabled = outOfStockEnabled;
  }


  public UpdateProductRequest price(@jakarta.annotation.Nullable Long price) {
    this.price = price;
    return this;
  }

  /**
   * The product price. The value is in the currency’s smallest unit. e.g. $12.50 is 1250. Must be greater than or equal to 0.
   * @return price
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The product price. The value is in the currency’s smallest unit. e.g. $12.50 is 1250. Must be greater than or equal to 0.")
  @JsonProperty(JSON_PROPERTY_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getPrice() {
    return price;
  }


  @JsonProperty(JSON_PROPERTY_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrice(@jakarta.annotation.Nullable Long price) {
    this.price = price;
  }


  public UpdateProductRequest shippable(@jakarta.annotation.Nullable Boolean shippable) {
    this.shippable = shippable;
    return this;
  }

  /**
   * If the product requires shipping
   * @return shippable
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "If the product requires shipping")
  @JsonProperty(JSON_PROPERTY_SHIPPABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getShippable() {
    return shippable;
  }


  @JsonProperty(JSON_PROPERTY_SHIPPABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShippable(@jakarta.annotation.Nullable Boolean shippable) {
    this.shippable = shippable;
  }


  public UpdateProductRequest shortDescription(@jakarta.annotation.Nullable String shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

  /**
   * Product short description
   * @return shortDescription
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Product short description")
  @JsonProperty(JSON_PROPERTY_SHORT_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getShortDescription() {
    return shortDescription;
  }


  @JsonProperty(JSON_PROPERTY_SHORT_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShortDescription(@jakarta.annotation.Nullable String shortDescription) {
    this.shortDescription = shortDescription;
  }


  public UpdateProductRequest sku(@jakarta.annotation.Nullable String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Product SKU
   * @return sku
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Product SKU")
  @JsonProperty(JSON_PROPERTY_SKU)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSku() {
    return sku;
  }


  @JsonProperty(JSON_PROPERTY_SKU)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSku(@jakarta.annotation.Nullable String sku) {
    this.sku = sku;
  }


  public UpdateProductRequest stateTaxable(@jakarta.annotation.Nullable Boolean stateTaxable) {
    this.stateTaxable = stateTaxable;
    return this;
  }

  /**
   * If state-based taxes should be applied to this product
   * @return stateTaxable
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "If state-based taxes should be applied to this product")
  @JsonProperty(JSON_PROPERTY_STATE_TAXABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getStateTaxable() {
    return stateTaxable;
  }


  @JsonProperty(JSON_PROPERTY_STATE_TAXABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStateTaxable(@jakarta.annotation.Nullable Boolean stateTaxable) {
    this.stateTaxable = stateTaxable;
  }


  public UpdateProductRequest storefrontHidden(@jakarta.annotation.Nullable Boolean storefrontHidden) {
    this.storefrontHidden = storefrontHidden;
    return this;
  }

  /**
   * If the product should not be shown in the storefront
   * @return storefrontHidden
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "If the product should not be shown in the storefront")
  @JsonProperty(JSON_PROPERTY_STOREFRONT_HIDDEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getStorefrontHidden() {
    return storefrontHidden;
  }


  @JsonProperty(JSON_PROPERTY_STOREFRONT_HIDDEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStorefrontHidden(@jakarta.annotation.Nullable Boolean storefrontHidden) {
    this.storefrontHidden = storefrontHidden;
  }


  public UpdateProductRequest subscriptionOnly(@jakarta.annotation.Nullable Boolean subscriptionOnly) {
    this.subscriptionOnly = subscriptionOnly;
    return this;
  }

  /**
   * If the product is a subscription-only product
   * @return subscriptionOnly
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "If the product is a subscription-only product")
  @JsonProperty(JSON_PROPERTY_SUBSCRIPTION_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getSubscriptionOnly() {
    return subscriptionOnly;
  }


  @JsonProperty(JSON_PROPERTY_SUBSCRIPTION_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubscriptionOnly(@jakarta.annotation.Nullable Boolean subscriptionOnly) {
    this.subscriptionOnly = subscriptionOnly;
  }


  public UpdateProductRequest taxable(@jakarta.annotation.Nullable Boolean taxable) {
    this.taxable = taxable;
    return this;
  }

  /**
   * Whether or not the product should be taxed
   * @return taxable
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Whether or not the product should be taxed")
  @JsonProperty(JSON_PROPERTY_TAXABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getTaxable() {
    return taxable;
  }


  @JsonProperty(JSON_PROPERTY_TAXABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxable(@jakarta.annotation.Nullable Boolean taxable) {
    this.taxable = taxable;
  }


  public UpdateProductRequest weight(@jakarta.annotation.Nullable Double weight) {
    this.weight = weight;
    return this;
  }

  /**
   * The product weight. Must be greater than or equal to 0.
   * @return weight
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The product weight. Must be greater than or equal to 0.")
  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getWeight() {
    return weight;
  }


  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWeight(@jakarta.annotation.Nullable Double weight) {
    this.weight = weight;
  }

  /**
   * Return true if this UpdateProductRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateProductRequest updateProductRequest = (UpdateProductRequest) o;
    return Objects.equals(this.active, updateProductRequest.active) &&
        Objects.equals(this.cityTaxable, updateProductRequest.cityTaxable) &&
        Objects.equals(this.countryTaxable, updateProductRequest.countryTaxable) &&
        Objects.equals(this.description, updateProductRequest.description) &&
        Objects.equals(this.emailForInventoryNotifications, updateProductRequest.emailForInventoryNotifications) &&
        Objects.equals(this.inventoryLimit, updateProductRequest.inventoryLimit) &&
        Objects.equals(this.name, updateProductRequest.name) &&
        Objects.equals(this.outOfStockEnabled, updateProductRequest.outOfStockEnabled) &&
        Objects.equals(this.price, updateProductRequest.price) &&
        Objects.equals(this.shippable, updateProductRequest.shippable) &&
        Objects.equals(this.shortDescription, updateProductRequest.shortDescription) &&
        Objects.equals(this.sku, updateProductRequest.sku) &&
        Objects.equals(this.stateTaxable, updateProductRequest.stateTaxable) &&
        Objects.equals(this.storefrontHidden, updateProductRequest.storefrontHidden) &&
        Objects.equals(this.subscriptionOnly, updateProductRequest.subscriptionOnly) &&
        Objects.equals(this.taxable, updateProductRequest.taxable) &&
        Objects.equals(this.weight, updateProductRequest.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, cityTaxable, countryTaxable, description, emailForInventoryNotifications, inventoryLimit, name, outOfStockEnabled, price, shippable, shortDescription, sku, stateTaxable, storefrontHidden, subscriptionOnly, taxable, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateProductRequest {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    cityTaxable: ").append(toIndentedString(cityTaxable)).append("\n");
    sb.append("    countryTaxable: ").append(toIndentedString(countryTaxable)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    emailForInventoryNotifications: ").append(toIndentedString(emailForInventoryNotifications)).append("\n");
    sb.append("    inventoryLimit: ").append(toIndentedString(inventoryLimit)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outOfStockEnabled: ").append(toIndentedString(outOfStockEnabled)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    shippable: ").append(toIndentedString(shippable)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    stateTaxable: ").append(toIndentedString(stateTaxable)).append("\n");
    sb.append("    storefrontHidden: ").append(toIndentedString(storefrontHidden)).append("\n");
    sb.append("    subscriptionOnly: ").append(toIndentedString(subscriptionOnly)).append("\n");
    sb.append("    taxable: ").append(toIndentedString(taxable)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

    public static class Builder {
    
        private UpdateProductRequest instance;
    
        public Builder() {
          this(new UpdateProductRequest());
        }
    
        protected Builder(UpdateProductRequest instance) {
          this.instance = instance;
        }
    
        public UpdateProductRequest.Builder active(Boolean active) {
              this.instance.active = active;
          return this;
        }
            public UpdateProductRequest.Builder cityTaxable(Boolean cityTaxable) {
              this.instance.cityTaxable = cityTaxable;
          return this;
        }
            public UpdateProductRequest.Builder countryTaxable(Boolean countryTaxable) {
              this.instance.countryTaxable = countryTaxable;
          return this;
        }
            public UpdateProductRequest.Builder description(String description) {
              this.instance.description = description;
          return this;
        }
            public UpdateProductRequest.Builder emailForInventoryNotifications(String emailForInventoryNotifications) {
              this.instance.emailForInventoryNotifications = emailForInventoryNotifications;
          return this;
        }
            public UpdateProductRequest.Builder inventoryLimit(Integer inventoryLimit) {
              this.instance.inventoryLimit = inventoryLimit;
          return this;
        }
            public UpdateProductRequest.Builder name(String name) {
              this.instance.name = name;
          return this;
        }
            public UpdateProductRequest.Builder outOfStockEnabled(Boolean outOfStockEnabled) {
              this.instance.outOfStockEnabled = outOfStockEnabled;
          return this;
        }
            public UpdateProductRequest.Builder price(Long price) {
              this.instance.price = price;
          return this;
        }
            public UpdateProductRequest.Builder shippable(Boolean shippable) {
              this.instance.shippable = shippable;
          return this;
        }
            public UpdateProductRequest.Builder shortDescription(String shortDescription) {
              this.instance.shortDescription = shortDescription;
          return this;
        }
            public UpdateProductRequest.Builder sku(String sku) {
              this.instance.sku = sku;
          return this;
        }
            public UpdateProductRequest.Builder stateTaxable(Boolean stateTaxable) {
              this.instance.stateTaxable = stateTaxable;
          return this;
        }
            public UpdateProductRequest.Builder storefrontHidden(Boolean storefrontHidden) {
              this.instance.storefrontHidden = storefrontHidden;
          return this;
        }
            public UpdateProductRequest.Builder subscriptionOnly(Boolean subscriptionOnly) {
              this.instance.subscriptionOnly = subscriptionOnly;
          return this;
        }
            public UpdateProductRequest.Builder taxable(Boolean taxable) {
              this.instance.taxable = taxable;
          return this;
        }
            public UpdateProductRequest.Builder weight(Double weight) {
              this.instance.weight = weight;
          return this;
        }
        
    
        /**
        * returns a built UpdateProductRequest instance.
        *
        * The builder is not reusable.
        */
        public UpdateProductRequest build() {
          try {
            return this.instance;
          } finally {
            // ensure that this.instance is not reused
            this.instance = null;
          }
        }
    
        @Override
        public String toString() {
          return getClass() + "=(" + instance + ")";
        }
      }
    
      /**
      * Create a builder with no initialized field.
      */
      public static UpdateProductRequest.Builder builder() {
        return new UpdateProductRequest.Builder();
      }
    
      /**
      * Create a builder with a shallow copy of this instance.
      */
      public UpdateProductRequest.Builder toBuilder() {
        return new UpdateProductRequest.Builder()
          .active(getActive())
          .cityTaxable(getCityTaxable())
          .countryTaxable(getCountryTaxable())
          .description(getDescription())
          .emailForInventoryNotifications(getEmailForInventoryNotifications())
          .inventoryLimit(getInventoryLimit())
          .name(getName())
          .outOfStockEnabled(getOutOfStockEnabled())
          .price(getPrice())
          .shippable(getShippable())
          .shortDescription(getShortDescription())
          .sku(getSku())
          .stateTaxable(getStateTaxable())
          .storefrontHidden(getStorefrontHidden())
          .subscriptionOnly(getSubscriptionOnly())
          .taxable(getTaxable())
          .weight(getWeight());
      }
}

