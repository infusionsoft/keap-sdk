/*
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.834462-hf-202507221415
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keap.core.sdk.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


/**
 * UpdateLeadSourceExpenseRequest
 */
@JsonPropertyOrder({
  UpdateLeadSourceExpenseRequest.JSON_PROPERTY_AMOUNT,
  UpdateLeadSourceExpenseRequest.JSON_PROPERTY_INCURRED_TIME,
  UpdateLeadSourceExpenseRequest.JSON_PROPERTY_NOTES,
  UpdateLeadSourceExpenseRequest.JSON_PROPERTY_TITLE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class UpdateLeadSourceExpenseRequest implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  @jakarta.annotation.Nullable  private Long amount;

  public static final String JSON_PROPERTY_INCURRED_TIME = "incurred_time";
  @jakarta.annotation.Nullable  private String incurredTime;

  public static final String JSON_PROPERTY_NOTES = "notes";
  @jakarta.annotation.Nullable  private String notes;

  public static final String JSON_PROPERTY_TITLE = "title";
  @jakarta.annotation.Nullable  private String title;

  public UpdateLeadSourceExpenseRequest() { 
  }

  public UpdateLeadSourceExpenseRequest amount(@jakarta.annotation.Nullable Long amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The monthly cost of the lead source recurring expense. The value should be in the smallest unit of currency for your currency locale. For example, if your currency locale is USD, then the smallest unit of currency is in cents, $225.50 would be provided in the request as 22550.
   * @return amount
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The monthly cost of the lead source recurring expense. The value should be in the smallest unit of currency for your currency locale. For example, if your currency locale is USD, then the smallest unit of currency is in cents, $225.50 would be provided in the request as 22550.")
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(@jakarta.annotation.Nullable Long amount) {
    this.amount = amount;
  }


  public UpdateLeadSourceExpenseRequest incurredTime(@jakarta.annotation.Nullable String incurredTime) {
    this.incurredTime = incurredTime;
    return this;
  }

  /**
   * The time that the lead source expense was incurred
   * @return incurredTime
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The time that the lead source expense was incurred")
  @JsonProperty(JSON_PROPERTY_INCURRED_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getIncurredTime() {
    return incurredTime;
  }


  @JsonProperty(JSON_PROPERTY_INCURRED_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIncurredTime(@jakarta.annotation.Nullable String incurredTime) {
    this.incurredTime = incurredTime;
  }


  public UpdateLeadSourceExpenseRequest notes(@jakarta.annotation.Nullable String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * The notes for the lead source expense
   * @return notes
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The notes for the lead source expense")
  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getNotes() {
    return notes;
  }


  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotes(@jakarta.annotation.Nullable String notes) {
    this.notes = notes;
  }


  public UpdateLeadSourceExpenseRequest title(@jakarta.annotation.Nullable String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the lead source expense
   * @return title
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The title of the lead source expense")
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getTitle() {
    return title;
  }


  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTitle(@jakarta.annotation.Nullable String title) {
    this.title = title;
  }

  /**
   * Return true if this UpdateLeadSourceExpenseRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateLeadSourceExpenseRequest updateLeadSourceExpenseRequest = (UpdateLeadSourceExpenseRequest) o;
    return Objects.equals(this.amount, updateLeadSourceExpenseRequest.amount) &&
        Objects.equals(this.incurredTime, updateLeadSourceExpenseRequest.incurredTime) &&
        Objects.equals(this.notes, updateLeadSourceExpenseRequest.notes) &&
        Objects.equals(this.title, updateLeadSourceExpenseRequest.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, incurredTime, notes, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateLeadSourceExpenseRequest {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    incurredTime: ").append(toIndentedString(incurredTime)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

    public static class Builder {
    
        private UpdateLeadSourceExpenseRequest instance;
    
        public Builder() {
          this(new UpdateLeadSourceExpenseRequest());
        }
    
        protected Builder(UpdateLeadSourceExpenseRequest instance) {
          this.instance = instance;
        }
    
        public UpdateLeadSourceExpenseRequest.Builder amount(Long amount) {
              this.instance.amount = amount;
          return this;
        }
            public UpdateLeadSourceExpenseRequest.Builder incurredTime(String incurredTime) {
              this.instance.incurredTime = incurredTime;
          return this;
        }
            public UpdateLeadSourceExpenseRequest.Builder notes(String notes) {
              this.instance.notes = notes;
          return this;
        }
            public UpdateLeadSourceExpenseRequest.Builder title(String title) {
              this.instance.title = title;
          return this;
        }
        
    
        /**
        * returns a built UpdateLeadSourceExpenseRequest instance.
        *
        * The builder is not reusable.
        */
        public UpdateLeadSourceExpenseRequest build() {
          try {
            return this.instance;
          } finally {
            // ensure that this.instance is not reused
            this.instance = null;
          }
        }
    
        @Override
        public String toString() {
          return getClass() + "=(" + instance + ")";
        }
      }
    
      /**
      * Create a builder with no initialized field.
      */
      public static UpdateLeadSourceExpenseRequest.Builder builder() {
        return new UpdateLeadSourceExpenseRequest.Builder();
      }
    
      /**
      * Create a builder with a shallow copy of this instance.
      */
      public UpdateLeadSourceExpenseRequest.Builder toBuilder() {
        return new UpdateLeadSourceExpenseRequest.Builder()
          .amount(getAmount())
          .incurredTime(getIncurredTime())
          .notes(getNotes())
          .title(getTitle());
      }
}

